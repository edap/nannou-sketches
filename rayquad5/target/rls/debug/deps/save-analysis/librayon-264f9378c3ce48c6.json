{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rayon","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=264f9378c3ce48c6","-C","extra-filename=-264f9378c3ce48c6","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","crossbeam_deque=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libcrossbeam_deque-2bcfebc03941ce6c.rmeta","--extern","either=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libeither-cafb78459fdd9575.rmeta","--extern","rayon_core=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/librayon_core-522a14fd5aa6a562.rmeta","--cap-lints","allow","--cfg","step_by","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/librayon-264f9378c3ce48c6.rmeta"},"prelude":{"crate_id":{"name":"rayon","disambiguator":[8837301931256387038,276227745869652756]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","num":15,"id":{"name":"either","disambiguator":[8884923402393253072,6032429501630248164]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":16,"id":{"name":"rayon_core","disambiguator":[3112109727074155044,3534036274552798731]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":17,"id":{"name":"crossbeam_channel","disambiguator":[15693235806395740041,13675018967709397917]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":18,"id":{"name":"crossbeam_utils","disambiguator":[12815700305172623123,14563506393251252287]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":19,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":20,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":21,"id":{"name":"maybe_uninit","disambiguator":[9925295721960399709,5075810066591430732]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","num":22,"id":{"name":"crossbeam_deque","disambiguator":[5235303285713816219,1168591414518111885]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":23,"id":{"name":"crossbeam_epoch","disambiguator":[17163470530562775512,8709529870593392442]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":24,"id":{"name":"memoffset","disambiguator":[2892690869131483658,14795605606618073579]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":25,"id":{"name":"scopeguard","disambiguator":[5081943333480440636,9076196664652206448]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":26,"id":{"name":"num_cpus","disambiguator":[5911647018467507976,7042850928943217931]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","num":27,"id":{"name":"libc","disambiguator":[7997064065336242500,8511025302220419458]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":0,"byte_end":4595,"line_start":1,"line_end":119,"column_start":1,"column_end":41}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26429,"byte_end":26435,"line_start":84,"line_end":84,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5488},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27772,"byte_end":27777,"line_start":152,"line_end":152,"column_start":12,"column_end":17},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27791,"byte_end":27797,"line_start":153,"line_end":153,"column_start":13,"column_end":19},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5511},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27811,"byte_end":27817,"line_start":154,"line_end":154,"column_start":13,"column_end":19},"alias_span":null,"name":"Cloned","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5520},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27831,"byte_end":27837,"line_start":155,"line_end":155,"column_start":13,"column_end":19},"alias_span":null,"name":"Copied","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27851,"byte_end":27856,"line_start":156,"line_end":156,"column_start":13,"column_end":18},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27858,"byte_end":27863,"line_start":156,"line_end":156,"column_start":20,"column_end":25},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5529},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27881,"byte_end":27890,"line_start":157,"line_end":157,"column_start":16,"column_end":25},"alias_span":null,"name":"Enumerate","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27904,"byte_end":27910,"line_start":158,"line_end":158,"column_start":13,"column_end":19},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27928,"byte_end":27937,"line_start":159,"line_end":159,"column_start":17,"column_end":26},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5564},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27953,"byte_end":27960,"line_start":160,"line_end":160,"column_start":15,"column_end":22},"alias_span":null,"name":"FlatMap","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27975,"byte_end":27982,"line_start":161,"line_end":161,"column_start":14,"column_end":21},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":27995,"byte_end":27999,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5594},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28001,"byte_end":28009,"line_start":162,"line_end":162,"column_start":18,"column_end":26},"alias_span":null,"name":"FoldWith","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28025,"byte_end":28032,"line_start":163,"line_end":163,"column_start":14,"column_end":21},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28050,"byte_end":28060,"line_start":164,"line_end":164,"column_start":17,"column_end":27},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28087,"byte_end":28105,"line_start":165,"line_end":165,"column_start":26,"column_end":44},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28124,"byte_end":28135,"line_start":166,"line_end":166,"column_start":18,"column_end":29},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28147,"byte_end":28153,"line_start":167,"line_end":167,"column_start":11,"column_end":17},"alias_span":null,"name":"MaxLen","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28155,"byte_end":28161,"line_start":167,"line_end":167,"column_start":19,"column_end":25},"alias_span":null,"name":"MinLen","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28173,"byte_end":28176,"line_start":168,"line_end":168,"column_start":10,"column_end":13},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28193,"byte_end":28200,"line_start":169,"line_end":169,"column_start":16,"column_end":23},"alias_span":null,"name":"MapInit","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28202,"byte_end":28209,"line_start":169,"line_end":169,"column_start":25,"column_end":32},"alias_span":null,"name":"MapWith","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28226,"byte_end":28234,"line_start":170,"line_end":170,"column_start":15,"column_end":23},"alias_span":null,"name":"MultiZip","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28247,"byte_end":28251,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28253,"byte_end":28257,"line_start":171,"line_end":171,"column_start":18,"column_end":22},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6591},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28276,"byte_end":28285,"line_start":172,"line_end":172,"column_start":17,"column_end":26},"alias_span":null,"name":"PanicFuse","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28304,"byte_end":28314,"line_start":173,"line_end":173,"column_start":18,"column_end":28},"alias_span":null,"name":"IterBridge","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28316,"byte_end":28330,"line_start":173,"line_end":173,"column_start":30,"column_end":44},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28346,"byte_end":28352,"line_start":174,"line_end":174,"column_start":14,"column_end":20},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28354,"byte_end":28361,"line_start":174,"line_end":174,"column_start":22,"column_end":29},"alias_span":null,"name":"repeatn","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6616},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28363,"byte_end":28369,"line_start":174,"line_end":174,"column_start":31,"column_end":37},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28371,"byte_end":28378,"line_start":174,"line_end":174,"column_start":39,"column_end":46},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28390,"byte_end":28393,"line_start":175,"line_end":175,"column_start":10,"column_end":13},"alias_span":null,"name":"Rev","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28405,"byte_end":28409,"line_start":176,"line_end":176,"column_start":11,"column_end":15},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28426,"byte_end":28431,"line_start":177,"line_end":177,"column_start":16,"column_end":21},"alias_span":null,"name":"split","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6654},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28433,"byte_end":28438,"line_start":177,"line_end":177,"column_start":23,"column_end":28},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28451,"byte_end":28455,"line_start":178,"line_end":178,"column_start":11,"column_end":15},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28472,"byte_end":28479,"line_start":179,"line_end":179,"column_start":16,"column_end":23},"alias_span":null,"name":"TryFold","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28481,"byte_end":28492,"line_start":179,"line_end":179,"column_start":25,"column_end":36},"alias_span":null,"name":"TryFoldWith","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6700},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28507,"byte_end":28513,"line_start":180,"line_end":180,"column_start":13,"column_end":19},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28531,"byte_end":28540,"line_start":181,"line_end":181,"column_start":17,"column_end":26},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6731},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28551,"byte_end":28554,"line_start":182,"line_end":182,"column_start":10,"column_end":13},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6744},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28568,"byte_end":28573,"line_start":183,"line_end":183,"column_start":13,"column_end":18},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28631,"byte_end":28637,"line_start":188,"line_end":188,"column_start":24,"column_end":30},"alias_span":null,"name":"StepBy","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":3988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393154,"byte_end":393174,"line_start":5,"line_end":5,"column_start":22,"column_end":42},"alias_span":null,"name":"FromParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393197,"byte_end":393220,"line_start":6,"line_end":6,"column_start":22,"column_end":45},"alias_span":null,"name":"IndexedParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3695},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393243,"byte_end":393263,"line_start":7,"line_end":7,"column_start":22,"column_end":42},"alias_span":null,"name":"IntoParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393286,"byte_end":393309,"line_start":8,"line_end":8,"column_start":22,"column_end":45},"alias_span":null,"name":"IntoParallelRefIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393332,"byte_end":393358,"line_start":9,"line_end":9,"column_start":22,"column_end":48},"alias_span":null,"name":"IntoParallelRefMutIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":2490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393381,"byte_end":393395,"line_start":10,"line_end":10,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3992},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393418,"byte_end":393432,"line_start":11,"line_end":11,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelExtend","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393455,"byte_end":393471,"line_start":12,"line_end":12,"column_start":22,"column_end":38},"alias_span":null,"name":"ParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":4366},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393495,"byte_end":393508,"line_start":13,"line_end":13,"column_start":23,"column_end":36},"alias_span":null,"name":"ParallelSlice","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":4377},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393532,"byte_end":393548,"line_start":14,"line_end":14,"column_start":23,"column_end":39},"alias_span":null,"name":"ParallelSliceMut","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":4710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393570,"byte_end":393584,"line_start":15,"line_end":15,"column_start":21,"column_end":35},"alias_span":null,"name":"ParallelString","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":16,"index":1069},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4208,"byte_end":4217,"line_start":110,"line_end":110,"column_start":21,"column_end":30},"alias_span":null,"name":"FnContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4239,"byte_end":4252,"line_start":111,"line_end":111,"column_start":21,"column_end":34},"alias_span":null,"name":"ThreadBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4274,"byte_end":4284,"line_start":112,"line_end":112,"column_start":21,"column_end":31},"alias_span":null,"name":"ThreadPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1057},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4306,"byte_end":4326,"line_start":113,"line_end":113,"column_start":21,"column_end":41},"alias_span":null,"name":"ThreadPoolBuildError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":718},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4348,"byte_end":4365,"line_start":114,"line_end":114,"column_start":21,"column_end":38},"alias_span":null,"name":"ThreadPoolBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":717},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4388,"byte_end":4407,"line_start":115,"line_end":115,"column_start":22,"column_end":41},"alias_span":null,"name":"current_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4409,"byte_end":4429,"line_start":115,"line_end":115,"column_start":43,"column_end":63},"alias_span":null,"name":"current_thread_index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":138},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4453,"byte_end":4457,"line_start":116,"line_end":116,"column_start":22,"column_end":26},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4459,"byte_end":4471,"line_start":116,"line_end":116,"column_start":28,"column_end":40},"alias_span":null,"name":"join_context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4495,"byte_end":4500,"line_start":117,"line_end":117,"column_start":22,"column_end":27},"alias_span":null,"name":"scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":439},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4502,"byte_end":4507,"line_start":117,"line_end":117,"column_start":29,"column_end":34},"alias_span":null,"name":"Scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":459},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4531,"byte_end":4541,"line_start":118,"line_end":118,"column_start":22,"column_end":32},"alias_span":null,"name":"scope_fifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4543,"byte_end":4552,"line_start":118,"line_end":118,"column_start":34,"column_end":43},"alias_span":null,"name":"ScopeFifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":600},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4576,"byte_end":4581,"line_start":119,"line_end":119,"column_start":22,"column_end":27},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4583,"byte_end":4593,"line_start":119,"line_end":119,"column_start":29,"column_end":39},"alias_span":null,"name":"spawn_fifo","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":0,"byte_end":4595,"line_start":1,"line_end":119,"column_start":1,"column_end":41},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":11},{"krate":0,"index":46},{"krate":0,"index":137},{"krate":0,"index":4018},{"krate":0,"index":4076},{"krate":0,"index":4088},{"krate":0,"index":4124},{"krate":0,"index":4152},{"krate":0,"index":4192},{"krate":0,"index":4703},{"krate":0,"index":4935},{"krate":0,"index":4993},{"krate":0,"index":4995},{"krate":0,"index":5022},{"krate":0,"index":5033},{"krate":0,"index":5034},{"krate":0,"index":5035},{"krate":0,"index":5036},{"krate":0,"index":5037},{"krate":0,"index":5038},{"krate":0,"index":5041},{"krate":0,"index":5044},{"krate":0,"index":5047},{"krate":0,"index":5050}],"decl_id":null,"docs":" Data-parallelism library that makes it easy to convert sequential\n computations into parallel","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":53,"byte_end":92,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":93,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":116,"byte_end":141,"line_start":4,"line_end":4,"column_start":1,"column_end":26}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":142,"byte_end":168,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"! Data-parallelism library that makes it easy to convert sequential","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":170,"byte_end":239,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"! computations into parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":240,"byte_end":270,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":271,"byte_end":274,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! Rayon is lightweight and convenient for introducing parallelism into existing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":275,"byte_end":356,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"! code. It guarantees data-race free executions and takes advantage of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":357,"byte_end":429,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"! parallelism when sensible, based on work-load at runtime.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":430,"byte_end":491,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":492,"byte_end":495,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! # How to use Rayon","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":496,"byte_end":518,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":519,"byte_end":522,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! There are two ways to use Rayon:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":523,"byte_end":559,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":560,"byte_end":563,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! - **High-level parallel constructs** are the simplest way to use Rayon and also","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":564,"byte_end":647,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"!   typically the most efficient.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":648,"byte_end":683,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"!   - [Parallel iterators][iter module] make it easy to convert a sequential iterator to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":684,"byte_end":774,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"!     execute in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":775,"byte_end":803,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"!     - The [`ParallelIterator`] trait defines general methods for all parallel iterators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":804,"byte_end":896,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"!     - The [`IndexedParallelIterator`] trait adds methods for iterators that support random","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":897,"byte_end":991,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"!       access.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":992,"byte_end":1009,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"!   - The [`par_sort`] method sorts `&mut [T]` slices (or vectors) in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1010,"byte_end":1091,"line_start":25,"line_end":25,"column_start":1,"column_end":82}},{"value":"!   - [`par_extend`] can be used to efficiently grow collections with items produced","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1092,"byte_end":1178,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"!     by a parallel iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1179,"byte_end":1210,"line_start":27,"line_end":27,"column_start":1,"column_end":32}},{"value":"! - **Custom tasks** let you divide your work into parallel tasks yourself.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1211,"byte_end":1288,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"!   - [`join`] is used to subdivide a task into two pieces.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1289,"byte_end":1350,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"!   - [`scope`] creates a scope within which you can create any number of parallel tasks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1351,"byte_end":1442,"line_start":30,"line_end":30,"column_start":1,"column_end":92}},{"value":"!   - [`ThreadPoolBuilder`] can be used to create your own thread pools or customize","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1443,"byte_end":1529,"line_start":31,"line_end":31,"column_start":1,"column_end":87}},{"value":"!     the global one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1530,"byte_end":1553,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1554,"byte_end":1557,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! [iter module]: iter/index.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1558,"byte_end":1592,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"! [`join`]: fn.join.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1593,"byte_end":1619,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"! [`scope`]: fn.scope.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1620,"byte_end":1648,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"! [`par_sort`]: slice/trait.ParallelSliceMut.html#method.par_sort","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1649,"byte_end":1716,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"! [`par_extend`]: iter/trait.ParallelExtend.html#tymethod.par_extend","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1717,"byte_end":1787,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"! [`ThreadPoolBuilder`]: struct.ThreadPoolBuilder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1788,"byte_end":1844,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1845,"byte_end":1848,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! # Basic usage and the Rayon prelude","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1849,"byte_end":1888,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1889,"byte_end":1892,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! First, you will need to add `rayon` to your `Cargo.toml`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1893,"byte_end":1954,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1955,"byte_end":1958,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! Next, to use parallel iterators or the other high-level methods,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":1959,"byte_end":2027,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"! you need to import several traits. Those traits are bundled into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2028,"byte_end":2096,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"! the module [`rayon::prelude`]. It is recommended that you import","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2097,"byte_end":2165,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"! all of these traits at once by adding `use rayon::prelude::*` at","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2166,"byte_end":2234,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"! the top of each module that uses Rayon methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2235,"byte_end":2286,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2287,"byte_end":2290,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! These traits give you access to the `par_iter` method which provides","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2291,"byte_end":2363,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"! parallel implementations of many iterative functions such as [`map`],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2364,"byte_end":2437,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"! [`for_each`], [`filter`], [`fold`], and [more].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2438,"byte_end":2489,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2490,"byte_end":2493,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! [`rayon::prelude`]: prelude/index.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2494,"byte_end":2536,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"! [`map`]: iter/trait.ParallelIterator.html#method.map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2537,"byte_end":2593,"line_start":56,"line_end":56,"column_start":1,"column_end":57}},{"value":"! [`for_each`]: iter/trait.ParallelIterator.html#method.for_each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2594,"byte_end":2660,"line_start":57,"line_end":57,"column_start":1,"column_end":67}},{"value":"! [`filter`]: iter/trait.ParallelIterator.html#method.filter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2661,"byte_end":2723,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"! [`fold`]: iter/trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2724,"byte_end":2782,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"! [more]: iter/trait.ParallelIterator.html#provided-methods","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2783,"byte_end":2844,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"! [`ParallelIterator`]: iter/trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2845,"byte_end":2903,"line_start":61,"line_end":61,"column_start":1,"column_end":59}},{"value":"! [`IndexedParallelIterator`]: iter/trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2904,"byte_end":2976,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2977,"byte_end":2980,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! # Crate Layout","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":2981,"byte_end":2999,"line_start":64,"line_end":64,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3000,"byte_end":3003,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"! Rayon extends many of the types found in the standard library with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3004,"byte_end":3074,"line_start":66,"line_end":66,"column_start":1,"column_end":71}},{"value":"! parallel iterator implementations. The modules in the `rayon`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3075,"byte_end":3140,"line_start":67,"line_end":67,"column_start":1,"column_end":66}},{"value":"! crate mirror [`std`] itself: so, e.g., the `option` module in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3141,"byte_end":3206,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"! Rayon contains parallel iterators for the `Option` type, which is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3207,"byte_end":3276,"line_start":69,"line_end":69,"column_start":1,"column_end":70}},{"value":"! found in [the `option` module of `std`]. Similarly, the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3277,"byte_end":3336,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"! `collections` module in Rayon offers parallel iterator types for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3337,"byte_end":3405,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"! [the `collections` from `std`]. You will rarely need to access","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3406,"byte_end":3472,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"! these submodules unless you need to name iterator types","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3473,"byte_end":3532,"line_start":73,"line_end":73,"column_start":1,"column_end":60}},{"value":"! explicitly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3533,"byte_end":3548,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3549,"byte_end":3552,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! [the `option` module of `std`]: https://doc.rust-lang.org/std/option/index.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3553,"byte_end":3636,"line_start":76,"line_end":76,"column_start":1,"column_end":84}},{"value":"! [the `collections` from `std`]: https://doc.rust-lang.org/std/collections/index.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3637,"byte_end":3725,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"! [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3726,"byte_end":3769,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3770,"byte_end":3773,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! # Other questions?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3774,"byte_end":3796,"line_start":80,"line_end":80,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3797,"byte_end":3800,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! See [the Rayon FAQ][faq].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3801,"byte_end":3830,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3831,"byte_end":3834,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! [faq]: https://github.com/rayon-rs/rayon/blob/master/FAQ.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3835,"byte_end":3898,"line_start":84,"line_end":84,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":7},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/private.rs","byte_start":7113,"byte_end":7126,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::private::PrivateMarker","value":"","parent":null,"children":[],"decl_id":null,"docs":" If this type is pub but not publicly reachable, third parties\n can't name it and can't implement traits using it.\n","sig":null,"attributes":[{"value":"/ If this type is pub but not publicly reachable, third parties","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/private.rs","byte_start":6941,"byte_end":7006,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ can't name it and can't implement traits using it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/private.rs","byte_start":7007,"byte_end":7061,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/private.rs","byte_start":7062,"byte_end":7101,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":46},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":62},{"krate":0,"index":72},{"krate":0,"index":81},{"krate":0,"index":94},{"krate":0,"index":106},{"krate":0,"index":115}],"decl_id":null,"docs":" Parallel iterator types for [standard collections][std::collections]","sig":null,"attributes":[{"value":"! Parallel iterator types for [standard collections][std::collections]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":11678,"byte_end":11750,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":11751,"byte_end":11754,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":11755,"byte_end":11833,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":11834,"byte_end":11872,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":11873,"byte_end":11876,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::collections]: https://doc.rust-lang.org/stable/std/collections/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":11877,"byte_end":11950,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":5053},{"krate":0,"index":5059},{"krate":0,"index":5056},{"krate":0,"index":53},{"krate":0,"index":5069},{"krate":0,"index":5062},{"krate":0,"index":5075},{"krate":0,"index":5079},{"krate":0,"index":58},{"krate":0,"index":5083},{"krate":0,"index":5098},{"krate":0,"index":5090}],"decl_id":null,"docs":" This module contains the parallel iterator types for heaps\n (`BinaryHeap<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for heaps","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":12654,"byte_end":12716,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"! (`BinaryHeap<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":12717,"byte_end":12789,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":12790,"byte_end":12849,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5053},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":13030,"byte_end":13038,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5055}],"decl_id":null,"docs":" Parallel iterator over a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a binary heap","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":12954,"byte_end":12994,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5075},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":13504,"byte_end":13508,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5078}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a binary heap","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":13409,"byte_end":13475,"line_start":34,"line_end":34,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":62},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_map","qualname":"::collections::btree_map","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":5105},{"krate":0,"index":5109},{"krate":0,"index":5113},{"krate":0,"index":5120},{"krate":0,"index":5127},{"krate":0,"index":5132},{"krate":0,"index":67},{"krate":0,"index":5137},{"krate":0,"index":5145},{"krate":0,"index":5153},{"krate":0,"index":5158},{"krate":0,"index":5163},{"krate":0,"index":5171}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree maps\n (`BTreeMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for B-Tree maps","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":13944,"byte_end":14012,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"! (`BTreeMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14013,"byte_end":14086,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14087,"byte_end":14146,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14338,"byte_end":14346,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5108}],"decl_id":null,"docs":" Parallel iterator over a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14249,"byte_end":14288,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5127},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14681,"byte_end":14685,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5131}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14587,"byte_end":14652,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5153},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":15222,"byte_end":15229,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5157}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a B-Tree map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":15131,"byte_end":15193,"line_start":52,"line_end":52,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":72},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_set","qualname":"::collections::btree_set","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":5179},{"krate":0,"index":5182},{"krate":0,"index":5185},{"krate":0,"index":5191},{"krate":0,"index":5197},{"krate":0,"index":5201},{"krate":0,"index":77},{"krate":0,"index":5205},{"krate":0,"index":5212}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree sets\n (`BTreeSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for B-Tree sets","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":15530,"byte_end":15598,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"! (`BTreeSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":15599,"byte_end":15669,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":15670,"byte_end":15729,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5179},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":15921,"byte_end":15929,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5181}],"decl_id":null,"docs":" Parallel iterator over a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":15832,"byte_end":15871,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":16218,"byte_end":16222,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5200}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":16124,"byte_end":16189,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":81},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_map","qualname":"::collections::hash_map","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":5219},{"krate":0,"index":5223},{"krate":0,"index":5227},{"krate":0,"index":5235},{"krate":0,"index":5242},{"krate":0,"index":5247},{"krate":0,"index":89},{"krate":0,"index":5252},{"krate":0,"index":5261},{"krate":0,"index":5269},{"krate":0,"index":5274},{"krate":0,"index":5279},{"krate":0,"index":5288}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash maps\n (`HashMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for hash maps","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":16651,"byte_end":16717,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"! (`HashMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":16718,"byte_end":16790,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":16791,"byte_end":16850,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5219},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":17075,"byte_end":17083,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5222}],"decl_id":null,"docs":" Parallel iterator over a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":16988,"byte_end":17025,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":17452,"byte_end":17456,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5246}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":17360,"byte_end":17423,"line_start":29,"line_end":29,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":18033,"byte_end":18040,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::hash_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5273}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a hash map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":17944,"byte_end":18004,"line_start":53,"line_end":53,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_set","qualname":"::collections::hash_set","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":5296},{"krate":0,"index":5299},{"krate":0,"index":5302},{"krate":0,"index":5309},{"krate":0,"index":5315},{"krate":0,"index":5319},{"krate":0,"index":102},{"krate":0,"index":5323},{"krate":0,"index":5331}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash sets\n (`HashSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for hash sets","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":18377,"byte_end":18443,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"! (`HashSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":18444,"byte_end":18513,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":18514,"byte_end":18573,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":18798,"byte_end":18806,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5298}],"decl_id":null,"docs":" Parallel iterator over a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":18711,"byte_end":18748,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":19129,"byte_end":19133,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5318}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":19037,"byte_end":19100,"line_start":29,"line_end":29,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":5338},{"krate":0,"index":5344},{"krate":0,"index":5341},{"krate":0,"index":5347},{"krate":0,"index":5353},{"krate":0,"index":5359},{"krate":0,"index":5363},{"krate":0,"index":111},{"krate":0,"index":5367},{"krate":0,"index":5374},{"krate":0,"index":5381},{"krate":0,"index":5385},{"krate":0,"index":5389},{"krate":0,"index":5396}],"decl_id":null,"docs":" This module contains the parallel iterator types for linked lists\n (`LinkedList<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for linked lists","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":19598,"byte_end":19667,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"! (`LinkedList<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":19668,"byte_end":19740,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":19741,"byte_end":19800,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":19981,"byte_end":19989,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5340}],"decl_id":null,"docs":" Parallel iterator over a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a linked list","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":19905,"byte_end":19945,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5359},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":20263,"byte_end":20267,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5362}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a linked list","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":20168,"byte_end":20234,"line_start":28,"line_end":28,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5381},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":20712,"byte_end":20719,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5384}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a linked list","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":20620,"byte_end":20683,"line_start":52,"line_end":52,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":5403},{"krate":0,"index":5409},{"krate":0,"index":5406},{"krate":0,"index":5412},{"krate":0,"index":5425},{"krate":0,"index":5418},{"krate":0,"index":5431},{"krate":0,"index":5435},{"krate":0,"index":121},{"krate":0,"index":125},{"krate":0,"index":5447},{"krate":0,"index":5439},{"krate":0,"index":5454},{"krate":0,"index":5458},{"krate":0,"index":131},{"krate":0,"index":5470},{"krate":0,"index":5462}],"decl_id":null,"docs":" This module contains the parallel iterator types for double-ended queues\n (`VecDeque<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for double-ended queues","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":20945,"byte_end":21021,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"! (`VecDeque<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21022,"byte_end":21092,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21093,"byte_end":21152,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5403},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21356,"byte_end":21364,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5405}],"decl_id":null,"docs":" Parallel iterator over a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a double-ended queue","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21273,"byte_end":21320,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5431},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21651,"byte_end":21655,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5434}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a double-ended queue","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21549,"byte_end":21622,"line_start":29,"line_end":29,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":22338,"byte_end":22345,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5457}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a double-ended queue","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":22239,"byte_end":22309,"line_start":60,"line_end":60,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":230},{"krate":0,"index":325},{"krate":0,"index":386},{"krate":0,"index":470},{"krate":0,"index":573},{"krate":0,"index":657},{"krate":0,"index":698},{"krate":0,"index":741},{"krate":0,"index":894},{"krate":0,"index":958},{"krate":0,"index":1026},{"krate":0,"index":1086},{"krate":0,"index":1151},{"krate":0,"index":1221},{"krate":0,"index":1236},{"krate":0,"index":1362},{"krate":0,"index":1400},{"krate":0,"index":1486},{"krate":0,"index":1592},{"krate":0,"index":1686},{"krate":0,"index":1708},{"krate":0,"index":1819},{"krate":0,"index":1903},{"krate":0,"index":2016},{"krate":0,"index":2293},{"krate":0,"index":2300},{"krate":0,"index":2328},{"krate":0,"index":2346},{"krate":0,"index":2470},{"krate":0,"index":2518},{"krate":0,"index":2567},{"krate":0,"index":2630},{"krate":0,"index":2696},{"krate":0,"index":2738},{"krate":0,"index":2769},{"krate":0,"index":2803},{"krate":0,"index":2852},{"krate":0,"index":2882},{"krate":0,"index":3005},{"krate":0,"index":3072},{"krate":0,"index":3131},{"krate":0,"index":3327},{"krate":0,"index":3455},{"krate":0,"index":3510},{"krate":0,"index":3572},{"krate":0,"index":3594},{"krate":0,"index":3647},{"krate":0,"index":3694},{"krate":0,"index":3695},{"krate":0,"index":3699},{"krate":0,"index":3704},{"krate":0,"index":3710},{"krate":0,"index":3715},{"krate":0,"index":3721},{"krate":0,"index":3920},{"krate":0,"index":3925},{"krate":0,"index":3988},{"krate":0,"index":3992},{"krate":0,"index":3996}],"decl_id":null,"docs":" Traits for writing parallel programs using an iterator-style interface","sig":null,"attributes":[{"value":"! Traits for writing parallel programs using an iterator-style interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":22815,"byte_end":22889,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":22890,"byte_end":22893,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":22894,"byte_end":22972,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":22973,"byte_end":23016,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23017,"byte_end":23020,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! Parallel iterators make it easy to write iterator-like chains that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23021,"byte_end":23091,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"! execute in parallel: typically all you have to do is convert the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23092,"byte_end":23160,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"! first `.iter()` (or `iter_mut()`, `into_iter()`, etc) method into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23161,"byte_end":23230,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"! `par_iter()` (or `par_iter_mut()`, `into_par_iter()`, etc). For","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23231,"byte_end":23298,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"! example, to compute the sum of the squares of a sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23299,"byte_end":23362,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"! integers, one might write:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23363,"byte_end":23393,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23394,"byte_end":23397,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23398,"byte_end":23409,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23410,"byte_end":23436,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"! fn sum_of_squares(input: &[i32]) -> i32 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23437,"byte_end":23482,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"!     input.par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23483,"byte_end":23507,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"!          .map(|i| i * i)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23508,"byte_end":23536,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"!          .sum()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23537,"byte_end":23556,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"! }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23557,"byte_end":23562,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23563,"byte_end":23570,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23571,"byte_end":23574,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Or, to increment all the integers in a slice, you could write:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23575,"byte_end":23641,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23642,"byte_end":23645,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23646,"byte_end":23657,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23658,"byte_end":23684,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"! fn increment_all(input: &mut [i32]) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23685,"byte_end":23726,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"!     input.par_iter_mut()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23727,"byte_end":23755,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"!          .for_each(|p| *p += 1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23756,"byte_end":23792,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"! }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23793,"byte_end":23798,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23799,"byte_end":23806,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23807,"byte_end":23810,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! To use parallel iterators, first import the traits by adding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23811,"byte_end":23875,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"! something like `use rayon::prelude::*` to your module. You can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23876,"byte_end":23942,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"! then call `par_iter`, `par_iter_mut`, or `into_par_iter` to get a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":23943,"byte_end":24012,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"! parallel iterator. Like a [regular iterator][], parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24013,"byte_end":24073,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"! iterators work by first constructing a computation and then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24074,"byte_end":24137,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"! executing it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24138,"byte_end":24155,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24156,"byte_end":24159,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! In addition to `par_iter()` and friends, some types offer other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24160,"byte_end":24227,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"! ways to create (or consume) parallel iterators:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24228,"byte_end":24279,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24280,"byte_end":24283,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! - Slices (`&[T]`, `&mut [T]`) offer methods like `par_split` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24284,"byte_end":24352,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"!   `par_windows`, as well as various parallel sorting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24353,"byte_end":24409,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"!   operations. See [the `ParallelSlice` trait] for the full list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24410,"byte_end":24478,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"! - Strings (`&str`) offer methods like `par_split` and `par_lines`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24479,"byte_end":24549,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"!   See [the `ParallelString` trait] for the full list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24550,"byte_end":24607,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"! - Various collections offer [`par_extend`], which grows a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24608,"byte_end":24669,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"!   collection given a parallel iterator. (If you don't have a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24670,"byte_end":24734,"line_start":48,"line_end":48,"column_start":1,"column_end":65}},{"value":"!   collection to extend, you can use [`collect()`] to create a new","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24735,"byte_end":24804,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"!   one from scratch.)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24805,"byte_end":24829,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24830,"byte_end":24833,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! [the `ParallelSlice` trait]: ../slice/trait.ParallelSlice.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24834,"byte_end":24900,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"! [the `ParallelString` trait]: ../str/trait.ParallelString.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24901,"byte_end":24967,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"! [`par_extend`]: trait.ParallelExtend.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":24968,"byte_end":25013,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"! [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25014,"byte_end":25075,"line_start":55,"line_end":55,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25076,"byte_end":25079,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! To see the full range of methods available on parallel iterators,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25080,"byte_end":25149,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"! check out the [`ParallelIterator`] and [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25150,"byte_end":25220,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"! traits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25221,"byte_end":25232,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25233,"byte_end":25236,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! If you'd like to build a custom parallel iterator, or to write your own","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25237,"byte_end":25312,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"! combinator, then check out the [split] function and the [plumbing] module.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25313,"byte_end":25391,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25392,"byte_end":25395,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! [regular iterator]: http://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25396,"byte_end":25473,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"! [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25474,"byte_end":25527,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"! [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25528,"byte_end":25595,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"! [split]: fn.split.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25596,"byte_end":25622,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"! [plumbing]: plumbing/index.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25623,"byte_end":25658,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25659,"byte_end":25662,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! Note: Several of the `ParallelIterator` methods rely on a `Try` trait which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25663,"byte_end":25742,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"! has been deliberately obscured from the public API.  This trait is intended","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25743,"byte_end":25822,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"! to mirror the unstable `std::ops::Try` with implementations for `Option` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25823,"byte_end":25903,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"! `Result`, where `Some`/`Ok` values will let those iterators continue, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25904,"byte_end":25981,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"! `None`/`Err` values will exit early.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":25982,"byte_end":26022,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26023,"byte_end":26026,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! A note about object safety: It is currently _not_ possible to wrap","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26027,"byte_end":26097,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"! a `ParallelIterator` (or any trait that depends on it) using a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26098,"byte_end":26164,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"! `Box<dyn ParallelIterator>` or other kind of dynamic allocation,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26165,"byte_end":26233,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"! because `ParallelIterator` is **not object-safe**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26234,"byte_end":26288,"line_start":79,"line_end":79,"column_start":1,"column_end":55}},{"value":"! (This keeps the implementation simpler and allows extra optimizations.)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26289,"byte_end":26364,"line_start":80,"line_end":80,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"plumbing","qualname":"::iter::plumbing","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":158},{"krate":0,"index":167},{"krate":0,"index":175},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":5477},{"krate":0,"index":5480},{"krate":0,"index":5479},{"krate":0,"index":195},{"krate":0,"index":5482},{"krate":0,"index":5486},{"krate":0,"index":5485},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":214},{"krate":0,"index":222},{"krate":0,"index":225}],"decl_id":null,"docs":" Traits and functions used to implement parallel iteration.  These are\n low-level details -- users of parallel iterators should not need to\n interact with them directly.  See [the `plumbing` README][r] for a general overview.","sig":null,"attributes":[{"value":"! Traits and functions used to implement parallel iteration.  These are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117287,"byte_end":117360,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"! low-level details -- users of parallel iterators should not need to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117361,"byte_end":117432,"line_start":2,"line_end":2,"column_start":1,"column_end":72}},{"value":"! interact with them directly.  See [the `plumbing` README][r] for a general overview.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117433,"byte_end":117521,"line_start":3,"line_end":3,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117522,"byte_end":117525,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117526,"byte_end":117608,"line_start":5,"line_end":5,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":153},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118065,"byte_end":118081,"line_start":20,"line_end":20,"column_start":11,"column_end":27},"name":"ProducerCallback","qualname":"::iter::plumbing::ProducerCallback","value":"ProducerCallback<T>","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"decl_id":null,"docs":" The `ProducerCallback` trait is a kind of generic closure,\n [analogous to `FnOnce`][FnOnce]. See [the corresponding section in\n the plumbing README][r] for more details.","sig":null,"attributes":[{"value":"/ The `ProducerCallback` trait is a kind of generic closure,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117704,"byte_end":117766,"line_start":14,"line_end":14,"column_start":1,"column_end":63}},{"value":"/ [analogous to `FnOnce`][FnOnce]. See [the corresponding section in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117767,"byte_end":117837,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ the plumbing README][r] for more details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117838,"byte_end":117883,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117884,"byte_end":117887,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md#producer-callback","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117888,"byte_end":117988,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ [FnOnce]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":117989,"byte_end":118054,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118314,"byte_end":118320,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::iter::plumbing::ProducerCallback::Output","value":"type Output;","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" The type of value returned by this callback. Analogous to\n [`Output` from the `FnOnce` trait][Output].","sig":null,"attributes":[{"value":"/ The type of value returned by this callback. Analogous to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118091,"byte_end":118152,"line_start":21,"line_end":21,"column_start":5,"column_end":66}},{"value":"/ [`Output` from the `FnOnce` trait][Output].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118157,"byte_end":118204,"line_start":22,"line_end":22,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118209,"byte_end":118212,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ [Output]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html#associatedtype.Output","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118217,"byte_end":118304,"line_start":24,"line_end":24,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118538,"byte_end":118546,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"callback","qualname":"::iter::plumbing::ProducerCallback::callback","value":"fn <P> (self, producer: P) -> Self::Output","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Invokes the callback with the given producer as argument. The\n key point of this trait is that this method is generic over\n `P`, and hence implementors must be defined for any producer.\n","sig":null,"attributes":[{"value":"/ Invokes the callback with the given producer as argument. The","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118327,"byte_end":118392,"line_start":27,"line_end":27,"column_start":5,"column_end":70}},{"value":"/ key point of this trait is that this method is generic over","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118397,"byte_end":118460,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ `P`, and hence implementors must be defined for any producer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118465,"byte_end":118530,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":158},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120020,"byte_end":120028,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"Producer","qualname":"::iter::plumbing::Producer","value":"Producer: Send + Sized","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" A `Producer` is effectively a \"splittable `IntoIterator`\". That\n is, a producer is a value which can be converted into an iterator\n at any time: at that point, it simply produces items on demand,\n like any iterator. But what makes a `Producer` special is that,\n *before* we convert to an iterator, we can also **split** it at a\n particular point using the `split_at` method. This will yield up\n two producers, one producing the items before that point, and one\n producing the items after that point (these two producers can then\n independently be split further, or be converted into iterators).\n In Rayon, this splitting is used to divide between threads.\n See [the `plumbing` README][r] for further details.","sig":null,"attributes":[{"value":"/ A `Producer` is effectively a \"splittable `IntoIterator`\". That","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118629,"byte_end":118696,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ is, a producer is a value which can be converted into an iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118697,"byte_end":118766,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ at any time: at that point, it simply produces items on demand,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118767,"byte_end":118834,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ like any iterator. But what makes a `Producer` special is that,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118835,"byte_end":118902,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ *before* we convert to an iterator, we can also **split** it at a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118903,"byte_end":118972,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ particular point using the `split_at` method. This will yield up","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":118973,"byte_end":119041,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ two producers, one producing the items before that point, and one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119042,"byte_end":119111,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ producing the items after that point (these two producers can then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119112,"byte_end":119182,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ independently be split further, or be converted into iterators).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119183,"byte_end":119251,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ In Rayon, this splitting is used to divide between threads.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119252,"byte_end":119315,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/ See [the `plumbing` README][r] for further details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119316,"byte_end":119371,"line_start":45,"line_end":45,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119372,"byte_end":119375,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that each producer will always produce a fixed number of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119376,"byte_end":119441,"line_start":47,"line_end":47,"column_start":1,"column_end":66}},{"value":"/ items N. However, this number N is not queryable through the API;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119442,"byte_end":119511,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ the consumer is expected to track it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119512,"byte_end":119553,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119554,"byte_end":119557,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ NB. You might expect `Producer` to extend the `IntoIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119558,"byte_end":119622,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/ trait.  However, [rust-lang/rust#20671][20671] prevents us from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119623,"byte_end":119690,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/ declaring the DoubleEndedIterator and ExactSizeIterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119691,"byte_end":119750,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ constraints on a required IntoIterator trait, so we inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119751,"byte_end":119813,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/ IntoIterator here until that issue is fixed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119814,"byte_end":119862,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119863,"byte_end":119866,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119867,"byte_end":119949,"line_start":57,"line_end":57,"column_start":1,"column_end":83}},{"value":"/ [20671]: https://github.com/rust-lang/rust/issues/20671","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":119950,"byte_end":120009,"line_start":58,"line_end":58,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":159},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120165,"byte_end":120169,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::Producer::Item","value":"type Item;","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The type of item that will be produced by this producer once\n it is converted into an iterator.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced by this producer once","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120049,"byte_end":120113,"line_start":60,"line_end":60,"column_start":5,"column_end":69}},{"value":"/ it is converted into an iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120118,"byte_end":120155,"line_start":61,"line_end":61,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120226,"byte_end":120234,"line_start":65,"line_end":65,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::plumbing::Producer::IntoIter","value":"type IntoIter: Iterator<Item = Self::Item> + DoubleEndedIterator + ExactSizeIterator;","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The type of iterator we will become.\n","sig":null,"attributes":[{"value":"/ The type of iterator we will become.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120176,"byte_end":120216,"line_start":64,"line_end":64,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120417,"byte_end":120426,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::plumbing::Producer::into_iter","value":"fn (self) -> Self::IntoIter","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Convert `self` into an iterator; at this point, no more parallel splits\n are possible.\n","sig":null,"attributes":[{"value":"/ Convert `self` into an iterator; at this point, no more parallel splits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120312,"byte_end":120387,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ are possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120392,"byte_end":120409,"line_start":68,"line_end":68,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121029,"byte_end":121036,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"min_len","qualname":"::iter::plumbing::Producer::min_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The minimum number of items that we will process\n sequentially. Defaults to 1, which means that we will split\n all the way down to a single item. This can be raised higher\n using the [`with_min_len`] method, which will force us to\n create sequential tasks at a larger granularity. Note that\n Rayon automatically normally attempts to adjust the size of\n parallel splits to reduce overhead, so this should not be\n needed.","sig":null,"attributes":[{"value":"/ The minimum number of items that we will process","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120457,"byte_end":120509,"line_start":71,"line_end":71,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to 1, which means that we will split","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120514,"byte_end":120577,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ all the way down to a single item. This can be raised higher","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120582,"byte_end":120646,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ using the [`with_min_len`] method, which will force us to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120651,"byte_end":120712,"line_start":74,"line_end":74,"column_start":5,"column_end":66}},{"value":"/ create sequential tasks at a larger granularity. Note that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120717,"byte_end":120779,"line_start":75,"line_end":75,"column_start":5,"column_end":67}},{"value":"/ Rayon automatically normally attempts to adjust the size of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120784,"byte_end":120847,"line_start":76,"line_end":76,"column_start":5,"column_end":68}},{"value":"/ parallel splits to reduce overhead, so this should not be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120852,"byte_end":120913,"line_start":77,"line_end":77,"column_start":5,"column_end":66}},{"value":"/ needed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120918,"byte_end":120929,"line_start":78,"line_end":78,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120934,"byte_end":120937,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`with_min_len`]: ../trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120942,"byte_end":121021,"line_start":80,"line_end":80,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121601,"byte_end":121608,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"max_len","qualname":"::iter::plumbing::Producer::max_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The maximum number of items that we will process\n sequentially. Defaults to MAX, which means that we can choose\n not to split at all. This can be lowered using the\n [`with_max_len`] method, which will force us to create more\n parallel tasks. Note that Rayon automatically normally\n attempts to adjust the size of parallel splits to reduce\n overhead, so this should not be needed.","sig":null,"attributes":[{"value":"/ The maximum number of items that we will process","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121076,"byte_end":121128,"line_start":85,"line_end":85,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to MAX, which means that we can choose","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121133,"byte_end":121198,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ not to split at all. This can be lowered using the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121203,"byte_end":121257,"line_start":87,"line_end":87,"column_start":5,"column_end":59}},{"value":"/ [`with_max_len`] method, which will force us to create more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121262,"byte_end":121325,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/ parallel tasks. Note that Rayon automatically normally","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121330,"byte_end":121388,"line_start":89,"line_end":89,"column_start":5,"column_end":63}},{"value":"/ attempts to adjust the size of parallel splits to reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121393,"byte_end":121453,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ overhead, so this should not be needed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121458,"byte_end":121501,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121506,"byte_end":121509,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ [`with_max_len`]: ../trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121514,"byte_end":121593,"line_start":93,"line_end":93,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121796,"byte_end":121804,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Producer::split_at","value":"fn (self, index: usize) -> (Self, Self)","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Split into two producers; one produces items `0..index`, the\n other `index..N`. Index must be less than or equal to `N`.\n","sig":null,"attributes":[{"value":"/ Split into two producers; one produces items `0..index`, the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121657,"byte_end":121721,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ other `index..N`. Index must be less than or equal to `N`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121726,"byte_end":121788,"line_start":99,"line_end":99,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122071,"byte_end":122080,"line_start":106,"line_end":106,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::Producer::fold_with","value":"fn <F> (self, folder: F) -> F","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121847,"byte_end":121910,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121915,"byte_end":121985,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121990,"byte_end":121993,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The provided implementation is sufficient for most iterables.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":121998,"byte_end":122063,"line_start":105,"line_end":105,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123028,"byte_end":123036,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"name":"Consumer","qualname":"::iter::plumbing::Consumer","value":"Consumer<Item>: Send + Sized","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" A consumer is effectively a [generalized \"fold\" operation][fold],\n and in fact each consumer will eventually be converted into a\n [`Folder`]. What makes a consumer special is that, like a\n [`Producer`], it can be **split** into multiple consumers using\n the `split_at` method. When a consumer is split, it produces two\n consumers, as well as a **reducer**. The two consumers can be fed\n items independently, and when they are done the reducer is used to\n combine their two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ A consumer is effectively a [generalized \"fold\" operation][fold],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122208,"byte_end":122277,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/ and in fact each consumer will eventually be converted into a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122278,"byte_end":122343,"line_start":115,"line_end":115,"column_start":1,"column_end":66}},{"value":"/ [`Folder`]. What makes a consumer special is that, like a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122344,"byte_end":122405,"line_start":116,"line_end":116,"column_start":1,"column_end":62}},{"value":"/ [`Producer`], it can be **split** into multiple consumers using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122406,"byte_end":122473,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/ the `split_at` method. When a consumer is split, it produces two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122474,"byte_end":122542,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ consumers, as well as a **reducer**. The two consumers can be fed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122543,"byte_end":122612,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ items independently, and when they are done the reducer is used to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122613,"byte_end":122683,"line_start":120,"line_end":120,"column_start":1,"column_end":71}},{"value":"/ combine their two results into one. See [the `plumbing`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122684,"byte_end":122743,"line_start":121,"line_end":121,"column_start":1,"column_end":60}},{"value":"/ README][r] for further details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122744,"byte_end":122779,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122780,"byte_end":122783,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122784,"byte_end":122866,"line_start":124,"line_end":124,"column_start":1,"column_end":83}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122867,"byte_end":122945,"line_start":125,"line_end":125,"column_start":1,"column_end":79}},{"value":"/ [`Folder`]: trait.Folder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122946,"byte_end":122979,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/ [`Producer`]: trait.Producer.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":122980,"byte_end":123017,"line_start":127,"line_end":127,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123137,"byte_end":123143,"line_start":130,"line_end":130,"column_start":10,"column_end":16},"name":"Folder","qualname":"::iter::plumbing::Consumer::Folder","value":"type Folder: Folder<Item, Result = Self::Result>;","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" The type of folder that this consumer can be converted into.\n","sig":null,"attributes":[{"value":"/ The type of folder that this consumer can be converted into.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123063,"byte_end":123127,"line_start":129,"line_end":129,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123264,"byte_end":123271,"line_start":133,"line_end":133,"column_start":10,"column_end":17},"name":"Reducer","qualname":"::iter::plumbing::Consumer::Reducer","value":"type Reducer: Reducer<Self::Result>;","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" The type of reducer that is produced if this consumer is split.\n","sig":null,"attributes":[{"value":"/ The type of reducer that is produced if this consumer is split.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123187,"byte_end":123254,"line_start":132,"line_end":132,"column_start":5,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123377,"byte_end":123383,"line_start":136,"line_end":136,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Consumer::Result","value":"type Result: Send;","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" The type of result that this consumer will ultimately produce.\n","sig":null,"attributes":[{"value":"/ The type of result that this consumer will ultimately produce.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123301,"byte_end":123367,"line_start":135,"line_end":135,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123619,"byte_end":123627,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Consumer::split_at","value":"fn (self, index: usize) -> (Self, Self, Self::Reducer)","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Divide the consumer into two consumers, one processing items\n `0..index` and one processing items from `index..`. Also\n produces a reducer that can be used to reduce the results at\n the end.\n","sig":null,"attributes":[{"value":"/ Divide the consumer into two consumers, one processing items","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123396,"byte_end":123460,"line_start":138,"line_end":138,"column_start":5,"column_end":69}},{"value":"/ `0..index` and one processing items from `index..`. Also","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123465,"byte_end":123525,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ produces a reducer that can be used to reduce the results at","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123530,"byte_end":123594,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/ the end.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123599,"byte_end":123611,"line_start":141,"line_end":141,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123813,"byte_end":123824,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"into_folder","qualname":"::iter::plumbing::Consumer::into_folder","value":"fn (self) -> Self::Folder","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Convert the consumer into a folder that can consume items\n sequentially, eventually producing a final result.\n","sig":null,"attributes":[{"value":"/ Convert the consumer into a folder that can consume items","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123685,"byte_end":123746,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ sequentially, eventually producing a final result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123751,"byte_end":123805,"line_start":145,"line_end":145,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123983,"byte_end":123987,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Consumer::full","value":"fn (&self) -> bool","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Hint whether this `Consumer` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Consumer` would like to stop processing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123853,"byte_end":123915,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123920,"byte_end":123975,"line_start":149,"line_end":149,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124350,"byte_end":124356,"line_start":159,"line_end":159,"column_start":11,"column_end":17},"name":"Folder","qualname":"::iter::plumbing::Folder","value":"Folder<Item>: Sized","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":182}],"decl_id":null,"docs":" The `Folder` trait encapsulates [the standard fold\n operation][fold].  It can be fed many items using the `consume`\n method. At the end, once all items have been consumed, it can then\n be converted (using `complete`) into a final value.","sig":null,"attributes":[{"value":"/ The `Folder` trait encapsulates [the standard fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124007,"byte_end":124061,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/ operation][fold].  It can be fed many items using the `consume`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124062,"byte_end":124129,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ method. At the end, once all items have been consumed, it can then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124130,"byte_end":124200,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"/ be converted (using `complete`) into a final value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124201,"byte_end":124256,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124257,"byte_end":124260,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124261,"byte_end":124339,"line_start":158,"line_end":158,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":177},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124456,"byte_end":124462,"line_start":161,"line_end":161,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Folder::Result","value":"type Result;","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" The type of result that will ultimately be produced by the folder.\n","sig":null,"attributes":[{"value":"/ The type of result that will ultimately be produced by the folder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124376,"byte_end":124446,"line_start":160,"line_end":160,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124531,"byte_end":124538,"line_start":164,"line_end":164,"column_start":8,"column_end":15},"name":"consume","qualname":"::iter::plumbing::Folder::consume","value":"fn (self, item: Item) -> Self","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Consume next item and return new sequential state.\n","sig":null,"attributes":[{"value":"/ Consume next item and return new sequential state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124469,"byte_end":124523,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124967,"byte_end":124979,"line_start":174,"line_end":174,"column_start":8,"column_end":20},"name":"consume_iter","qualname":"::iter::plumbing::Folder::consume_iter","value":"fn <I> (mut self, iter: I) -> Self","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Consume items from the iterator until full, and return new sequential state.","sig":null,"attributes":[{"value":"/ Consume items from the iterator until full, and return new sequential state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124571,"byte_end":124651,"line_start":166,"line_end":166,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124656,"byte_end":124659,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This method is **optional**. The default simply iterates over","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124664,"byte_end":124729,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ `iter`, invoking `consume` and checking after each iteration","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124734,"byte_end":124798,"line_start":169,"line_end":169,"column_start":5,"column_end":69}},{"value":"/ whether `full` returns false.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124803,"byte_end":124836,"line_start":170,"line_end":170,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124841,"byte_end":124844,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The main reason to override it is if you can provide a more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124849,"byte_end":124912,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/ specialized, efficient implementation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124917,"byte_end":124959,"line_start":173,"line_end":173,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125287,"byte_end":125295,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"complete","qualname":"::iter::plumbing::Folder::complete","value":"fn (self) -> Self::Result","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Finish consuming items, produce final result.\n","sig":null,"attributes":[{"value":"/ Finish consuming items, produce final result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125230,"byte_end":125279,"line_start":187,"line_end":187,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125452,"byte_end":125456,"line_start":192,"line_end":192,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Folder::full","value":"fn (&self) -> bool","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Hint whether this `Folder` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Folder` would like to stop processing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125324,"byte_end":125384,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125389,"byte_end":125444,"line_start":191,"line_end":191,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":183},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125886,"byte_end":125893,"line_start":202,"line_end":202,"column_start":11,"column_end":18},"name":"Reducer","qualname":"::iter::plumbing::Reducer","value":"Reducer<Result>","parent":null,"children":[{"krate":0,"index":185}],"decl_id":null,"docs":" The reducer is the final step of a `Consumer` -- after a consumer\n has been split into two parts, and each of those parts has been\n fully processed, we are left with two results. The reducer is then\n used to combine those two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ The reducer is the final step of a `Consumer` -- after a consumer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125476,"byte_end":125545,"line_start":195,"line_end":195,"column_start":1,"column_end":70}},{"value":"/ has been split into two parts, and each of those parts has been","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125546,"byte_end":125613,"line_start":196,"line_end":196,"column_start":1,"column_end":68}},{"value":"/ fully processed, we are left with two results. The reducer is then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125614,"byte_end":125684,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ used to combine those two results into one. See [the `plumbing`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125685,"byte_end":125752,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ README][r] for further details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125753,"byte_end":125788,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125789,"byte_end":125792,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125793,"byte_end":125875,"line_start":201,"line_end":201,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125994,"byte_end":126000,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::plumbing::Reducer::reduce","value":"fn (self, left: Result, right: Result) -> Result","parent":{"krate":0,"index":183},"children":[],"decl_id":null,"docs":" Reduce two final results into one; this is executed after a\n split.\n","sig":null,"attributes":[{"value":"/ Reduce two final results into one; this is executed after a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125908,"byte_end":125971,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/ split.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":125976,"byte_end":125986,"line_start":204,"line_end":204,"column_start":5,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":186},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126362,"byte_end":126379,"line_start":213,"line_end":213,"column_start":11,"column_end":28},"name":"UnindexedConsumer","qualname":"::iter::plumbing::UnindexedConsumer","value":"UnindexedConsumer<I>: Consumer<I>","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":" A stateless consumer can be freely copied. These consumers can be\n used like regular consumers, but they also support a\n `split_off_left` method that does not take an index to split, but\n simply splits at some arbitrary point (`for_each`, for example,\n produces an unindexed consumer).\n","sig":null,"attributes":[{"value":"/ A stateless consumer can be freely copied. These consumers can be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126050,"byte_end":126119,"line_start":208,"line_end":208,"column_start":1,"column_end":70}},{"value":"/ used like regular consumers, but they also support a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126120,"byte_end":126176,"line_start":209,"line_end":209,"column_start":1,"column_end":57}},{"value":"/ `split_off_left` method that does not take an index to split, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126177,"byte_end":126246,"line_start":210,"line_end":210,"column_start":1,"column_end":70}},{"value":"/ simply splits at some arbitrary point (`for_each`, for example,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126247,"byte_end":126314,"line_start":211,"line_end":211,"column_start":1,"column_end":68}},{"value":"/ produces an unindexed consumer).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126315,"byte_end":126351,"line_start":212,"line_end":212,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126855,"byte_end":126869,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"split_off_left","qualname":"::iter::plumbing::UnindexedConsumer::split_off_left","value":"fn (&self) -> Self","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Splits off a \"left\" consumer and returns it. The `self`\n consumer should then be used to consume the \"right\" portion of\n the data. (The ordering matters for methods like find_first --\n values produced by the returned value are given precedence\n over values produced by `self`.) Once the left and right\n halves have been fully consumed, you should reduce the results\n with the result of `to_reducer`.\n","sig":null,"attributes":[{"value":"/ Splits off a \"left\" consumer and returns it. The `self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126402,"byte_end":126461,"line_start":214,"line_end":214,"column_start":5,"column_end":64}},{"value":"/ consumer should then be used to consume the \"right\" portion of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126466,"byte_end":126532,"line_start":215,"line_end":215,"column_start":5,"column_end":71}},{"value":"/ the data. (The ordering matters for methods like find_first --","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126537,"byte_end":126603,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ values produced by the returned value are given precedence","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126608,"byte_end":126670,"line_start":217,"line_end":217,"column_start":5,"column_end":67}},{"value":"/ over values produced by `self`.) Once the left and right","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126675,"byte_end":126735,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/ halves have been fully consumed, you should reduce the results","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126740,"byte_end":126806,"line_start":219,"line_end":219,"column_start":5,"column_end":71}},{"value":"/ with the result of `to_reducer`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126811,"byte_end":126847,"line_start":220,"line_end":220,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126991,"byte_end":127001,"line_start":225,"line_end":225,"column_start":8,"column_end":18},"name":"to_reducer","qualname":"::iter::plumbing::UnindexedConsumer::to_reducer","value":"fn (&self) -> Self::Reducer","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Creates a reducer that can be used to combine the results from\n a split consumer.\n","sig":null,"attributes":[{"value":"/ Creates a reducer that can be used to combine the results from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126891,"byte_end":126957,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"/ a split consumer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126962,"byte_end":126983,"line_start":224,"line_end":224,"column_start":5,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127478,"byte_end":127495,"line_start":236,"line_end":236,"column_start":11,"column_end":28},"name":"UnindexedProducer","qualname":"::iter::plumbing::UnindexedProducer","value":"UnindexedProducer: Send + Sized","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"decl_id":null,"docs":" A variant on `Producer` which does not know its exact length or\n cannot represent it in a `usize`. These producers act like\n ordinary producers except that they cannot be told to split at a\n particular point. Instead, you just ask them to split 'somewhere'.","sig":null,"attributes":[{"value":"/ A variant on `Producer` which does not know its exact length or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127030,"byte_end":127097,"line_start":228,"line_end":228,"column_start":1,"column_end":68}},{"value":"/ cannot represent it in a `usize`. These producers act like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127098,"byte_end":127160,"line_start":229,"line_end":229,"column_start":1,"column_end":63}},{"value":"/ ordinary producers except that they cannot be told to split at a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127161,"byte_end":127229,"line_start":230,"line_end":230,"column_start":1,"column_end":69}},{"value":"/ particular point. Instead, you just ask them to split 'somewhere'.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127230,"byte_end":127300,"line_start":231,"line_end":231,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127301,"byte_end":127304,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ (In principle, `Producer` could extend this trait; however, it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127305,"byte_end":127371,"line_start":233,"line_end":233,"column_start":1,"column_end":67}},{"value":"/ does not because to do so would require producers to carry their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127372,"byte_end":127440,"line_start":234,"line_end":234,"column_start":1,"column_end":69}},{"value":"/ own length with them.)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127441,"byte_end":127467,"line_start":235,"line_end":235,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127573,"byte_end":127577,"line_start":238,"line_end":238,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::UnindexedProducer::Item","value":"type Item;","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" The type of item returned by this producer.\n","sig":null,"attributes":[{"value":"/ The type of item returned by this producer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127516,"byte_end":127563,"line_start":237,"line_end":237,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127666,"byte_end":127671,"line_start":241,"line_end":241,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::plumbing::UnindexedProducer::split","value":"fn (self) -> (Self, Option<Self>)","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" Split midway into a new producer if possible, otherwise return `None`.\n","sig":null,"attributes":[{"value":"/ Split midway into a new producer if possible, otherwise return `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127584,"byte_end":127658,"line_start":240,"line_end":240,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127854,"byte_end":127863,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::UnindexedProducer::fold_with","value":"fn <F> (self, folder: F) -> F","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).\n","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127708,"byte_end":127771,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127776,"byte_end":127846,"line_start":244,"line_end":244,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131683,"byte_end":131689,"line_start":351,"line_end":351,"column_start":8,"column_end":14},"name":"bridge","qualname":"::iter::plumbing::bridge","value":"fn <I, C> (par_iter: I, consumer: C) -> C::Result","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a parallel iterator to a\n consumer. It will convert the `par_iter` into a producer P and\n then pull items from P and feed them to `consumer`, splitting and\n creating parallel threads as needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a parallel iterator to a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131104,"byte_end":131174,"line_start":340,"line_end":340,"column_start":1,"column_end":71}},{"value":"/ consumer. It will convert the `par_iter` into a producer P and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131175,"byte_end":131241,"line_start":341,"line_end":341,"column_start":1,"column_end":67}},{"value":"/ then pull items from P and feed them to `consumer`, splitting and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131242,"byte_end":131311,"line_start":342,"line_end":342,"column_start":1,"column_end":70}},{"value":"/ creating parallel threads as needed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131312,"byte_end":131352,"line_start":343,"line_end":343,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131353,"byte_end":131356,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131357,"byte_end":131419,"line_start":345,"line_end":345,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131420,"byte_end":131476,"line_start":346,"line_end":346,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131477,"byte_end":131522,"line_start":347,"line_end":347,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131523,"byte_end":131526,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131527,"byte_end":131607,"line_start":349,"line_end":349,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":131608,"byte_end":131675,"line_start":350,"line_end":350,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132935,"byte_end":132959,"line_start":391,"line_end":391,"column_start":8,"column_end":32},"name":"bridge_producer_consumer","qualname":"::iter::plumbing::bridge_producer_consumer","value":"fn <P, C> (len: usize, producer: P, consumer: C) -> C::Result","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a producer and a\n consumer. You may prefer to call [`bridge`], which wraps this\n function. This function will draw items from `producer` and feed\n them to `consumer`, splitting and creating parallel tasks when\n needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a producer and a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132297,"byte_end":132359,"line_start":378,"line_end":378,"column_start":1,"column_end":63}},{"value":"/ consumer. You may prefer to call [`bridge`], which wraps this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132360,"byte_end":132425,"line_start":379,"line_end":379,"column_start":1,"column_end":66}},{"value":"/ function. This function will draw items from `producer` and feed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132426,"byte_end":132494,"line_start":380,"line_end":380,"column_start":1,"column_end":69}},{"value":"/ them to `consumer`, splitting and creating parallel tasks when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132495,"byte_end":132561,"line_start":381,"line_end":381,"column_start":1,"column_end":67}},{"value":"/ needed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132562,"byte_end":132573,"line_start":382,"line_end":382,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132574,"byte_end":132577,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132578,"byte_end":132640,"line_start":384,"line_end":384,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132641,"byte_end":132697,"line_start":385,"line_end":385,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132698,"byte_end":132743,"line_start":386,"line_end":386,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132744,"byte_end":132747,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ [`bridge`]: fn.bridge.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132748,"byte_end":132778,"line_start":388,"line_end":388,"column_start":1,"column_end":31}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132779,"byte_end":132859,"line_start":389,"line_end":389,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132860,"byte_end":132927,"line_start":390,"line_end":390,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":134735,"byte_end":134751,"line_start":446,"line_end":446,"column_start":8,"column_end":24},"name":"bridge_unindexed","qualname":"::iter::plumbing::bridge_unindexed","value":"fn <P, C> (producer: P, consumer: C) -> C::Result","parent":null,"children":[],"decl_id":null,"docs":" A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","sig":null,"attributes":[{"value":"/ A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":134566,"byte_end":134656,"line_start":443,"line_end":443,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":134657,"byte_end":134660,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ [`bridge_producer_consumer`]: fn.bridge_producer_consumer.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":134661,"byte_end":134727,"line_start":445,"line_end":445,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5488},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136608,"byte_end":136613,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":5491},{"krate":0,"index":5492}],"decl_id":null,"docs":" `Chain` is an iterator that joins `b` after `a` in one continuous iterator.\n This struct is created by the [`chain()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Chain` is an iterator that joins `b` after `a` in one continuous iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136226,"byte_end":136305,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`chain()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136306,"byte_end":136382,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136383,"byte_end":136386,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`chain()`]: trait.ParallelIterator.html#method.chain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136387,"byte_end":136444,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136445,"byte_end":136498,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136499,"byte_end":136572,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143541,"byte_end":143547,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::iter::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":5503},{"krate":0,"index":5504}],"decl_id":null,"docs":" `Chunks` is an iterator that groups elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Chunks` is an iterator that groups elements of an underlying iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143128,"byte_end":143203,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143204,"byte_end":143207,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`chunks()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143208,"byte_end":143292,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143293,"byte_end":143296,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`chunks()`]: trait.IndexedParallelIterator.html#method.chunks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143297,"byte_end":143363,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143364,"byte_end":143431,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143432,"byte_end":143505,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5511},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148531,"byte_end":148537,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::cloned::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":5513}],"decl_id":null,"docs":" `Cloned` is an iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Cloned` is an iterator that clones the elements of an underlying iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148142,"byte_end":148221,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148222,"byte_end":148225,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`cloned()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148226,"byte_end":148303,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148304,"byte_end":148307,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`cloned()`]: trait.ParallelIterator.html#method.cloned","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148308,"byte_end":148367,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148368,"byte_end":148421,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148422,"byte_end":148495,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5520},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178717,"byte_end":178723,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Copied","qualname":"::iter::copied::Copied","value":"Copied {  }","parent":null,"children":[{"krate":0,"index":5522}],"decl_id":null,"docs":" `Copied` is an iterator that copies the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Copied` is an iterator that copies the elements of an underlying iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178328,"byte_end":178407,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178408,"byte_end":178411,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`copied()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178412,"byte_end":178489,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178490,"byte_end":178493,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`copied()`]: trait.ParallelIterator.html#method.copied","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178494,"byte_end":178553,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178554,"byte_end":178607,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178608,"byte_end":178681,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183873,"byte_end":183878,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::empty::empty","value":"fn <T> () -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces nothing.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces nothing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183455,"byte_end":183509,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183510,"byte_end":183513,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be used for code that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183514,"byte_end":183591,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ deals with generic parallel iterators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183592,"byte_end":183634,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183635,"byte_end":183638,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183639,"byte_end":183653,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183654,"byte_end":183657,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183658,"byte_end":183665,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183666,"byte_end":183692,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::empty;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183693,"byte_end":183720,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183721,"byte_end":183724,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183725,"byte_end":183763,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/     .chain(empty())","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183764,"byte_end":183787,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183788,"byte_end":183817,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183818,"byte_end":183821,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.count(), 10_000);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183822,"byte_end":183857,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183858,"byte_end":183865,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184031,"byte_end":184036,"line_start":31,"line_end":31,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":666}],"decl_id":null,"docs":" Iterator adaptor for [the `empty()` function](fn.empty.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `empty()` function](fn.empty.html).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":183954,"byte_end":184019,"line_start":30,"line_end":30,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5529},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":186044,"byte_end":186053,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::enumerate::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":5531}],"decl_id":null,"docs":" `Enumerate` is an iterator that returns the current count along with the element.\n This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Enumerate` is an iterator that returns the current count along with the element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":185616,"byte_end":185701,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":185702,"byte_end":185789,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":185790,"byte_end":185793,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`enumerate()`]: trait.IndexedParallelIterator.html#method.enumerate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":185794,"byte_end":185866,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":185867,"byte_end":185934,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":185935,"byte_end":186008,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199268,"byte_end":199274,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":5541},{"krate":0,"index":5542}],"decl_id":null,"docs":" `Filter` takes a predicate `filter_op` and filters out elements that match.\n This struct is created by the [`filter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Filter` takes a predicate `filter_op` and filters out elements that match.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":198890,"byte_end":198969,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`filter()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":198970,"byte_end":199047,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199048,"byte_end":199051,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter()`]: trait.ParallelIterator.html#method.filter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199052,"byte_end":199111,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199112,"byte_end":199165,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199166,"byte_end":199239,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202807,"byte_end":202816,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":5550},{"krate":0,"index":5551}],"decl_id":null,"docs":" `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.\n This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202405,"byte_end":202495,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202496,"byte_end":202578,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202579,"byte_end":202582,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter_map()`]: trait.ParallelIterator.html#method.filter_map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202583,"byte_end":202650,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202651,"byte_end":202704,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202705,"byte_end":202778,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5564},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216831,"byte_end":216838,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::flat_map::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":5567},{"krate":0,"index":5568}],"decl_id":null,"docs":" `FlatMap` maps each element to an iterator, then flattens these iterators together.\n This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMap` maps each element to an iterator, then flattens these iterators together.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216439,"byte_end":216526,"line_start":6,"line_end":6,"column_start":1,"column_end":88}},{"value":"/ This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216527,"byte_end":216606,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216607,"byte_end":216610,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map()`]: trait.ParallelIterator.html#method.flat_map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216611,"byte_end":216674,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216675,"byte_end":216728,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216729,"byte_end":216802,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220883,"byte_end":220890,"line_start":12,"line_end":12,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::iter::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":5575}],"decl_id":null,"docs":" `Flatten` turns each element to an iterator, then flattens these iterators\n together. This struct is created by the [`flatten()`] method on\n [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `Flatten` turns each element to an iterator, then flattens these iterators","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220481,"byte_end":220559,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ together. This struct is created by the [`flatten()`] method on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220560,"byte_end":220627,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220628,"byte_end":220653,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220654,"byte_end":220657,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`flatten()`]: trait.ParallelIterator.html#method.flatten","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220658,"byte_end":220719,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220720,"byte_end":220773,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220774,"byte_end":220847,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222310,"byte_end":222314,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"Fold","qualname":"::iter::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":5586},{"krate":0,"index":5587},{"krate":0,"index":5588}],"decl_id":null,"docs":" `Fold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Fold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":221925,"byte_end":222017,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ This struct is created by the [`fold()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222018,"byte_end":222093,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222094,"byte_end":222097,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`fold()`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222098,"byte_end":222153,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222154,"byte_end":222207,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222208,"byte_end":222281,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5594},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226429,"byte_end":226437,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"FoldWith","qualname":"::iter::fold::FoldWith","value":"FoldWith {  }","parent":null,"children":[{"krate":0,"index":5598},{"krate":0,"index":5599},{"krate":0,"index":5600}],"decl_id":null,"docs":" `FoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226025,"byte_end":226121,"line_start":197,"line_end":197,"column_start":1,"column_end":97}},{"value":"/ This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226122,"byte_end":226202,"line_start":198,"line_end":198,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226203,"byte_end":226206,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ [`fold_with()`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226207,"byte_end":226272,"line_start":200,"line_end":200,"column_start":1,"column_end":66}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226273,"byte_end":226326,"line_start":201,"line_end":201,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226327,"byte_end":226400,"line_start":202,"line_end":202,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236678,"byte_end":236685,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":5609},{"krate":0,"index":5610}],"decl_id":null,"docs":" `Inspect` is an iterator that calls a function with a reference to each\n element before yielding it.","sig":null,"attributes":[{"value":"/ `Inspect` is an iterator that calls a function with a reference to each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236265,"byte_end":236340,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ element before yielding it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236341,"byte_end":236372,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236373,"byte_end":236376,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`inspect()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236377,"byte_end":236455,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236456,"byte_end":236459,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`inspect()`]: trait.ParallelIterator.html#method.inspect","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236460,"byte_end":236521,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236522,"byte_end":236575,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236576,"byte_end":236649,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242820,"byte_end":242830,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::iter::interleave::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":5618},{"krate":0,"index":5619}],"decl_id":null,"docs":" `Interleave` is an iterator that interleaves elements of iterators\n `i` and `j` in one continuous iterator. This struct is created by\n the [`interleave()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Interleave` is an iterator that interleaves elements of iterators","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242360,"byte_end":242430,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ `i` and `j` in one continuous iterator. This struct is created by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242431,"byte_end":242500,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ the [`interleave()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242501,"byte_end":242563,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242564,"byte_end":242567,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`interleave()`]: trait.IndexedParallelIterator.html#method.interleave","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242568,"byte_end":242642,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242643,"byte_end":242710,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242711,"byte_end":242784,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251831,"byte_end":251849,"line_start":15,"line_end":15,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::iter::interleave_shortest::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":5631}],"decl_id":null,"docs":" `InterleaveShortest` is an iterator that works similarly to\n `Interleave`, but this version stops returning elements once one\n of the iterators run out.","sig":null,"attributes":[{"value":"/ `InterleaveShortest` is an iterator that works similarly to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251287,"byte_end":251350,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/ `Interleave`, but this version stops returning elements once one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251351,"byte_end":251419,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ of the iterators run out.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251420,"byte_end":251449,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251450,"byte_end":251453,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`interleave_shortest()`] method on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251454,"byte_end":251523,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ [`IndexedParallelIterator`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251524,"byte_end":251556,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251557,"byte_end":251560,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`interleave_shortest()`]: trait.IndexedParallelIterator.html#method.interleave_shortest","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251561,"byte_end":251653,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251654,"byte_end":251721,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":251722,"byte_end":251795,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":254068,"byte_end":254079,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::iter::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":5642},{"krate":0,"index":5643}],"decl_id":null,"docs":" `Intersperse` is an iterator that inserts a particular item between each\n item of the adapted iterator.  This struct is created by the\n [`intersperse()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Intersperse` is an iterator that inserts a particular item between each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":253636,"byte_end":253712,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ item of the adapted iterator.  This struct is created by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":253713,"byte_end":253777,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`intersperse()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":253778,"byte_end":253830,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":253831,"byte_end":253834,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`intersperse()`]: trait.ParallelIterator.html#method.intersperse","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":253835,"byte_end":253904,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":253905,"byte_end":253958,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":253959,"byte_end":254032,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264285,"byte_end":264291,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"MinLen","qualname":"::iter::len::MinLen","value":"MinLen {  }","parent":null,"children":[{"krate":0,"index":5652},{"krate":0,"index":5653}],"decl_id":null,"docs":" `MinLen` is an iterator that imposes a minimum length on iterator splits.\n This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MinLen` is an iterator that imposes a minimum length on iterator splits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":263871,"byte_end":263948,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":263949,"byte_end":264034,"line_start":6,"line_end":6,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264035,"byte_end":264038,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`min_len()`]: trait.IndexedParallelIterator.html#method.min_len","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264039,"byte_end":264107,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264108,"byte_end":264175,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264176,"byte_end":264249,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267370,"byte_end":267376,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"MaxLen","qualname":"::iter::len::MaxLen","value":"MaxLen {  }","parent":null,"children":[{"krate":0,"index":5662},{"krate":0,"index":5663}],"decl_id":null,"docs":" `MaxLen` is an iterator that imposes a maximum length on iterator splits.\n This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MaxLen` is an iterator that imposes a maximum length on iterator splits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":266956,"byte_end":267033,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267034,"byte_end":267119,"line_start":140,"line_end":140,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267120,"byte_end":267123,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`max_len()`]: trait.IndexedParallelIterator.html#method.max_len","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267124,"byte_end":267192,"line_start":142,"line_end":142,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267193,"byte_end":267260,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267261,"byte_end":267334,"line_start":144,"line_end":144,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270499,"byte_end":270502,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":5673},{"krate":0,"index":5674}],"decl_id":null,"docs":" `Map` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Map` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270125,"byte_end":270205,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270206,"byte_end":270209,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270210,"byte_end":270284,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270285,"byte_end":270288,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map()`]: trait.ParallelIterator.html#method.map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270289,"byte_end":270342,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270343,"byte_end":270396,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270397,"byte_end":270470,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276477,"byte_end":276484,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"MapWith","qualname":"::iter::map_with::MapWith","value":"MapWith {  }","parent":null,"children":[{"krate":0,"index":5683},{"krate":0,"index":5684},{"krate":0,"index":5685}],"decl_id":null,"docs":" `MapWith` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapWith` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276084,"byte_end":276168,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276169,"byte_end":276172,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276173,"byte_end":276252,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276253,"byte_end":276256,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`map_with()`]: trait.ParallelIterator.html#method.map_with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276257,"byte_end":276320,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276321,"byte_end":276374,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276375,"byte_end":276448,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284545,"byte_end":284552,"line_start":346,"line_end":346,"column_start":12,"column_end":19},"name":"MapInit","qualname":"::iter::map_with::MapInit","value":"MapInit {  }","parent":null,"children":[{"krate":0,"index":5695},{"krate":0,"index":5696},{"krate":0,"index":5697}],"decl_id":null,"docs":" `MapInit` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapInit` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284152,"byte_end":284236,"line_start":338,"line_end":338,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284237,"byte_end":284240,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_init()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284241,"byte_end":284320,"line_start":340,"line_end":340,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284321,"byte_end":284324,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ [`map_init()`]: trait.ParallelIterator.html#method.map_init","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284325,"byte_end":284388,"line_start":342,"line_end":342,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284389,"byte_end":284442,"line_start":343,"line_end":343,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284443,"byte_end":284516,"line_start":344,"line_end":344,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292706,"byte_end":292714,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"MultiZip","qualname":"::iter::multizip::MultiZip","value":"MultiZip {  }","parent":null,"children":[{"krate":0,"index":5705}],"decl_id":null,"docs":" `MultiZip` is an iterator that zips up a tuple of parallel iterators to\n produce tuples of their items.","sig":null,"attributes":[{"value":"/ `MultiZip` is an iterator that zips up a tuple of parallel iterators to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290290,"byte_end":290365,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ produce tuples of their items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290366,"byte_end":290400,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290401,"byte_end":290404,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It is created by calling `into_par_iter()` on a tuple of types that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290405,"byte_end":290476,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ implement `IntoParallelIterator`, or `par_iter()`/`par_iter_mut()` with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290477,"byte_end":290552,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types that are iterable by reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290553,"byte_end":290594,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290595,"byte_end":290598,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The implementation currently support tuples up to length 12.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290599,"byte_end":290663,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290664,"byte_end":290667,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290668,"byte_end":290682,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290683,"byte_end":290686,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290687,"byte_end":290694,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290695,"byte_end":290721,"line_start":16,"line_end":16,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290722,"byte_end":290725,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // This will iterate `r` by mutable reference, like `par_iter_mut()`, while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290726,"byte_end":290805,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ // ranges are all iterated by value like `into_par_iter()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290806,"byte_end":290869,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ // Note that the zipped iterator is only as long as the shortest input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290870,"byte_end":290945,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ let mut r = vec![0; 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290946,"byte_end":290973,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/ (&mut r, 1..10, 10..100, 100..1000).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":290974,"byte_end":291029,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     .for_each(|(r, x, y, z)| *r = x * y + z);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291030,"byte_end":291079,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291080,"byte_end":291083,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&r, &[1 * 10 + 100, 2 * 11 + 101, 3 * 12 + 102]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291084,"byte_end":291148,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291149,"byte_end":291156,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291157,"byte_end":291160,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ For a group that should all be iterated by reference, you can use a tuple reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291161,"byte_end":291249,"line_start":28,"line_end":28,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291250,"byte_end":291253,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291254,"byte_end":291261,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291262,"byte_end":291288,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291289,"byte_end":291292,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let xs: Vec<_> = (1..10).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291293,"byte_end":291332,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/ let ys: Vec<_> = (10..100).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291333,"byte_end":291374,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ let zs: Vec<_> = (100..1000).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291375,"byte_end":291418,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291419,"byte_end":291422,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Reference each input separately with `IntoParallelIterator`:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291423,"byte_end":291490,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ let r1: Vec<_> = (&xs, &ys, &zs).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291491,"byte_end":291543,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291544,"byte_end":291579,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291580,"byte_end":291599,"line_start":40,"line_end":40,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291600,"byte_end":291603,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Reference them all together with `IntoParallelRefIterator`:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291604,"byte_end":291670,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ let r2: Vec<_> = (xs, ys, zs).par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291671,"byte_end":291715,"line_start":43,"line_end":43,"column_start":1,"column_end":45}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291716,"byte_end":291751,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291752,"byte_end":291771,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291772,"byte_end":291775,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(r1, r2);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291776,"byte_end":291799,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291800,"byte_end":291807,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291808,"byte_end":291811,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Mutable references to a tuple will work similarly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291812,"byte_end":291866,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291867,"byte_end":291870,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291871,"byte_end":291878,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291879,"byte_end":291905,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291906,"byte_end":291909,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let mut xs: Vec<_> = (1..4).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291910,"byte_end":291952,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ let mut ys: Vec<_> = (-4..-1).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291953,"byte_end":291997,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ let mut zs = vec![0; 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":291998,"byte_end":292026,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292027,"byte_end":292030,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference each input separately with `IntoParallelIterator`:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292031,"byte_end":292106,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ (&mut xs, &mut ys, &mut zs).into_par_iter().for_each(|(x, y, z)| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292107,"byte_end":292177,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/     *z += *x + *y;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292178,"byte_end":292200,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292201,"byte_end":292230,"line_start":62,"line_end":62,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292231,"byte_end":292238,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292239,"byte_end":292242,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(xs, (vec![-4, -3, -2]));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292243,"byte_end":292282,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(ys, (vec![1, 2, 3]));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292283,"byte_end":292319,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(zs, (vec![-3, -1, 1]));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292320,"byte_end":292358,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292359,"byte_end":292362,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference them all together with `IntoParallelRefMutIterator`:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292363,"byte_end":292440,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ let mut tuple = (xs, ys, zs);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292441,"byte_end":292474,"line_start":70,"line_end":70,"column_start":1,"column_end":34}},{"value":"/ tuple.par_iter_mut().for_each(|(x, y, z)| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292475,"byte_end":292522,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/     *z += *x + *y;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292523,"byte_end":292545,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292546,"byte_end":292575,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292576,"byte_end":292583,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292584,"byte_end":292587,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple, (vec![1, 2, 3], vec![-4, -3, -2], vec![-6, -2, 2]));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292588,"byte_end":292662,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/multizip.rs","byte_start":292663,"byte_end":292670,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300975,"byte_end":300979,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::once::once","value":"fn <T> (item: T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces an element exactly once.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces an element exactly once.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300333,"byte_end":300403,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300404,"byte_end":300407,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be chained to existing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300408,"byte_end":300486,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ parallel iterators to extend their contents, or otherwise used for any code","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300487,"byte_end":300566,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ that deals with generic parallel iterators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300567,"byte_end":300614,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300615,"byte_end":300618,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300619,"byte_end":300633,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300634,"byte_end":300637,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300638,"byte_end":300645,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300646,"byte_end":300672,"line_start":13,"line_end":13,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::once;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300673,"byte_end":300699,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300700,"byte_end":300703,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300704,"byte_end":300742,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/     .chain(once(-1))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300743,"byte_end":300767,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300768,"byte_end":300797,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300798,"byte_end":300801,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.clone().count(), 10_001);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300802,"byte_end":300845,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(pi.clone().filter(|&x| x < 0).count(), 1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300846,"byte_end":300903,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(pi.position_any(|x| x < 0), Some(1234));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300904,"byte_end":300959,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":300960,"byte_end":300967,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":301131,"byte_end":301135,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":6584}],"decl_id":null,"docs":" Iterator adaptor for [the `once()` function](fn.once.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `once()` function](fn.once.html).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":301032,"byte_end":301095,"line_start":28,"line_end":28,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6591},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302495,"byte_end":302504,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"PanicFuse","qualname":"::iter::panic_fuse::PanicFuse","value":"PanicFuse {  }","parent":null,"children":[{"krate":0,"index":6593}],"decl_id":null,"docs":" `PanicFuse` is an adaptor that wraps an iterator with a fuse in case\n of panics, to halt all threads as soon as possible.","sig":null,"attributes":[{"value":"/ `PanicFuse` is an adaptor that wraps an iterator with a fuse in case","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302045,"byte_end":302117,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of panics, to halt all threads as soon as possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302118,"byte_end":302173,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302174,"byte_end":302177,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`panic_fuse()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302178,"byte_end":302259,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302260,"byte_end":302263,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`panic_fuse()`]: trait.ParallelIterator.html#method.panic_fuse","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302264,"byte_end":302331,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302332,"byte_end":302385,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302386,"byte_end":302459,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311246,"byte_end":311260,"line_start":46,"line_end":46,"column_start":11,"column_end":25},"name":"ParallelBridge","qualname":"::iter::par_bridge::ParallelBridge","value":"ParallelBridge: Sized","parent":null,"children":[{"krate":0,"index":2491}],"decl_id":null,"docs":" Conversion trait to convert an `Iterator` to a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ Conversion trait to convert an `Iterator` to a `ParallelIterator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":309982,"byte_end":310052,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310053,"byte_end":310056,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This creates a \"bridge\" from a sequential iterator to a parallel one, by distributing its items","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310057,"byte_end":310156,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ across the Rayon thread pool. This has the advantage of being able to parallelize just about","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310157,"byte_end":310253,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ anything, but the resulting `ParallelIterator` can be less efficient than if you started with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310254,"byte_end":310351,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ `par_iter` instead. However, it can still be useful for iterators that are difficult to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310352,"byte_end":310443,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/ parallelize by other means, like channels or file or network I/O.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310444,"byte_end":310513,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310514,"byte_end":310517,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The resulting iterator is not guaranteed to keep the order of the original iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310518,"byte_end":310606,"line_start":19,"line_end":19,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310607,"byte_end":310610,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310611,"byte_end":310625,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310626,"byte_end":310629,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ To use this trait, take an existing `Iterator` and call `par_bridge` on it. After that, you can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310630,"byte_end":310729,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ use any of the `ParallelIterator` methods:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310730,"byte_end":310776,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310777,"byte_end":310780,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310781,"byte_end":310788,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter::ParallelBridge;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310789,"byte_end":310825,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/ use rayon::prelude::ParallelIterator;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310826,"byte_end":310867,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310868,"byte_end":310901,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310902,"byte_end":310905,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let rx = {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310906,"byte_end":310920,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/     let (tx, rx) = channel();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310921,"byte_end":310954,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310955,"byte_end":310958,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     tx.send(\"one!\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310959,"byte_end":310983,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"two!\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":310984,"byte_end":311008,"line_start":35,"line_end":35,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"three!\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311009,"byte_end":311035,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311036,"byte_end":311039,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/     rx","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311040,"byte_end":311050,"line_start":38,"line_end":38,"column_start":1,"column_end":11}},{"value":"/ };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311051,"byte_end":311057,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311058,"byte_end":311061,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut output: Vec<&'static str> = rx.into_iter().par_bridge().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311062,"byte_end":311140,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ output.sort_unstable();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311141,"byte_end":311168,"line_start":42,"line_end":42,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311169,"byte_end":311172,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&*output, &[\"one!\", \"three!\", \"two!\"]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311173,"byte_end":311227,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311228,"byte_end":311235,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311342,"byte_end":311352,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"par_bridge","qualname":"::iter::par_bridge::ParallelBridge::par_bridge","value":"fn (self) -> IterBridge<Self>","parent":{"krate":0,"index":2490},"children":[],"decl_id":null,"docs":" Creates a bridge from this type to a `ParallelIterator`.\n","sig":null,"attributes":[{"value":"/ Creates a bridge from this type to a `ParallelIterator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311274,"byte_end":311334,"line_start":47,"line_end":47,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":6607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311851,"byte_end":311861,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"IterBridge","qualname":"::iter::par_bridge::IterBridge","value":"IterBridge {  }","parent":null,"children":[{"krate":0,"index":6609}],"decl_id":null,"docs":" `IterBridge` is a parallel iterator that wraps a sequential iterator.","sig":null,"attributes":[{"value":"/ `IterBridge` is a parallel iterator that wraps a sequential iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311545,"byte_end":311618,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311619,"byte_end":311622,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This type is created when using the `par_bridge` method on `ParallelBridge`. See the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311623,"byte_end":311711,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ [`ParallelBridge`] documentation for details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311712,"byte_end":311761,"line_start":63,"line_end":63,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311762,"byte_end":311765,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`ParallelBridge`]: trait.ParallelBridge.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311766,"byte_end":311815,"line_start":65,"line_end":65,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6616},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321328,"byte_end":321334,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":6618}],"decl_id":null,"docs":" Iterator adaptor for [the `repeat()` function](fn.repeat.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeat()` function](fn.repeat.html).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321225,"byte_end":321292,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":2635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321886,"byte_end":321892,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::repeat::repeat","value":"fn <T> (elt: T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that endlessly repeats `elt` (by\n cloning it). Note that this iterator has \"infinite\" length, so\n typically you would want to use `zip` or `take` or some other\n means to shorten it, or consider using\n [the `repeatn()` function](fn.repeatn.html) instead.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that endlessly repeats `elt` (by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321373,"byte_end":321437,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ cloning it). Note that this iterator has \"infinite\" length, so","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321438,"byte_end":321504,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ typically you would want to use `zip` or `take` or some other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321505,"byte_end":321570,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ means to shorten it, or consider using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321571,"byte_end":321613,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/ [the `repeatn()` function](fn.repeatn.html) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321614,"byte_end":321670,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321671,"byte_end":321674,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321675,"byte_end":321689,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321690,"byte_end":321693,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321694,"byte_end":321701,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321702,"byte_end":321728,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeat;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321729,"byte_end":321757,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ let x: Vec<(i32, i32)> = repeat(22).zip(0..3).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321758,"byte_end":321818,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321819,"byte_end":321870,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321871,"byte_end":321878,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322290,"byte_end":322294,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"take","qualname":"<Repeat<T>>::take","value":"fn (self, n: usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes only `n` repeats of the element, similar to the general\n [`take()`](trait.IndexedParallelIterator.html#method.take).","sig":null,"attributes":[{"value":"/ Takes only `n` repeats of the element, similar to the general","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322015,"byte_end":322080,"line_start":34,"line_end":34,"column_start":5,"column_end":70}},{"value":"/ [`take()`](trait.IndexedParallelIterator.html#method.take).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322085,"byte_end":322148,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322153,"byte_end":322156,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The resulting `RepeatN` is an `IndexedParallelIterator`, allowing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322161,"byte_end":322230,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/ more functionality than `Repeat` alone.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322235,"byte_end":322278,"line_start":38,"line_end":38,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322556,"byte_end":322559,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"zip","qualname":"<Repeat<T>>::zip","value":"fn <Z> (self, zip_op: Z) -> Zip<RepeatN<T>, Z::Iter>","parent":null,"children":[],"decl_id":null,"docs":" Iterates tuples, repeating the element with items from another\n iterator, similar to the general\n [`zip()`](trait.IndexedParallelIterator.html#method.zip).\n","sig":null,"attributes":[{"value":"/ Iterates tuples, repeating the element with items from another","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322371,"byte_end":322437,"line_start":43,"line_end":43,"column_start":5,"column_end":71}},{"value":"/ iterator, similar to the general","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322442,"byte_end":322478,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ [`zip()`](trait.IndexedParallelIterator.html#method.zip).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322483,"byte_end":322544,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":6625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323828,"byte_end":323835,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::iter::repeat::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":6627},{"krate":0,"index":6628}],"decl_id":null,"docs":" Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323723,"byte_end":323792,"line_start":101,"line_end":101,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":2656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324200,"byte_end":324207,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::iter::repeat::repeatn","value":"fn <T> (elt: T, n: usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces `n` repeats of `elt`\n (by cloning it).","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces `n` repeats of `elt`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323892,"byte_end":323958,"line_start":108,"line_end":108,"column_start":1,"column_end":67}},{"value":"/ (by cloning it).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323959,"byte_end":323979,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323980,"byte_end":323983,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323984,"byte_end":323998,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323999,"byte_end":324002,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324003,"byte_end":324010,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324011,"byte_end":324037,"line_start":114,"line_end":114,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeatn;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324038,"byte_end":324067,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/ let x: Vec<(i32, i32)> = repeatn(22, 3).zip(0..3).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324068,"byte_end":324132,"line_start":116,"line_end":116,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324133,"byte_end":324184,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324185,"byte_end":324192,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327147,"byte_end":327150,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::rev::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":6637}],"decl_id":null,"docs":" `Rev` is an iterator that produces elements in reverse order. This struct\n is created by the [`rev()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Rev` is an iterator that produces elements in reverse order. This struct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":326757,"byte_end":326834,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ is created by the [`rev()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":326835,"byte_end":326904,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":326905,"byte_end":326908,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`rev()`]: trait.IndexedParallelIterator.html#method.rev","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":326909,"byte_end":326969,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":326970,"byte_end":327037,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327038,"byte_end":327111,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":329992,"byte_end":329996,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":6646},{"krate":0,"index":6647}],"decl_id":null,"docs":" `Skip` is an iterator that skips over the first `n` elements.\n This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Skip` is an iterator that skips over the first `n` elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":329599,"byte_end":329664,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":329665,"byte_end":329747,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":329748,"byte_end":329751,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`skip()`]: trait.IndexedParallelIterator.html#method.skip","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":329752,"byte_end":329814,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":329815,"byte_end":329882,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":329883,"byte_end":329956,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335625,"byte_end":335630,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::splitter::split","value":"fn <D, S> (data: D, splitter: S) -> Split<D, S>","parent":null,"children":[],"decl_id":null,"docs":" The `split` function takes arbitrary data and a closure that knows how to\n split it, and turns this into a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ The `split` function takes arbitrary data and a closure that knows how to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331741,"byte_end":331818,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ split it, and turns this into a `ParallelIterator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331819,"byte_end":331874,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331875,"byte_end":331878,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331879,"byte_end":331893,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331894,"byte_end":331897,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ As a simple example, Rayon can recursively split ranges of indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331898,"byte_end":331968,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331969,"byte_end":331972,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331973,"byte_end":331980,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":331981,"byte_end":332001,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332002,"byte_end":332028,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332029,"byte_end":332053,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332054,"byte_end":332057,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332058,"byte_end":332061,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // We define a range of indices as follows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332062,"byte_end":332108,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ type Range1D = Range<usize>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332109,"byte_end":332141,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332142,"byte_end":332145,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Splitting it in two can be done like this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332146,"byte_end":332194,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332195,"byte_end":332258,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     // We are mathematically unable to split the range if there is only","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332259,"byte_end":332334,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/     // one point inside of it, but we could stop splitting before that.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332335,"byte_end":332410,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332411,"byte_end":332464,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332465,"byte_end":332468,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     // Here, our range is considered large enough to be splittable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332469,"byte_end":332539,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332540,"byte_end":332595,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332596,"byte_end":332646,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332647,"byte_end":332652,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332653,"byte_end":332656,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // By using iter::split, Rayon will split the range until it has enough work","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332657,"byte_end":332737,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ // to feed the CPU cores, then give us the resulting sub-ranges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332738,"byte_end":332805,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ iter::split(0..4096, split_range1).for_each(|sub_range| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332806,"byte_end":332867,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/     // As our initial range had a power-of-two size, the final sub-ranges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332868,"byte_end":332945,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/     // should have power-of-two sizes too","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332946,"byte_end":332991,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/     assert!((sub_range.end - sub_range.start).is_power_of_two());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":332992,"byte_end":333061,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333062,"byte_end":333069,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333070,"byte_end":333077,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333078,"byte_end":333081,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This recursive splitting can be extended to two or three dimensions,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333082,"byte_end":333154,"line_start":42,"line_end":42,"column_start":1,"column_end":73}},{"value":"/ to reproduce a classic \"block-wise\" parallelization scheme of graphics and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333155,"byte_end":333233,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ numerical simulations:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333234,"byte_end":333260,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333261,"byte_end":333264,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333265,"byte_end":333272,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # use rayon::iter;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333273,"byte_end":333295,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/ # use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333296,"byte_end":333324,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ # use std::ops::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333325,"byte_end":333351,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/ # type Range1D = Range<usize>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333352,"byte_end":333386,"line_start":50,"line_end":50,"column_start":1,"column_end":35}},{"value":"/ # fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333387,"byte_end":333452,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ #     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333453,"byte_end":333508,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/ #     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333509,"byte_end":333566,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ #     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333567,"byte_end":333619,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333620,"byte_end":333627,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333628,"byte_end":333633,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ // A two-dimensional range of indices can be built out of two 1D ones","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333634,"byte_end":333707,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ struct Range2D {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333708,"byte_end":333728,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     // Range of horizontal indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333729,"byte_end":333767,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/     pub rx: Range1D,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333768,"byte_end":333792,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333793,"byte_end":333796,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     // Range of vertical indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333797,"byte_end":333833,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/     pub ry: Range1D,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333834,"byte_end":333858,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333859,"byte_end":333864,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333865,"byte_end":333868,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We want to recursively split them by the largest dimension until we have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333869,"byte_end":333948,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ // enough sub-ranges to feed our mighty multi-core CPU. This function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":333949,"byte_end":334022,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ // carries out one such split.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334023,"byte_end":334057,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ fn split_range2(r2: Range2D) -> (Range2D, Option<Range2D>) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334058,"byte_end":334122,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/     // Decide on which axis (horizontal/vertical) the range should be split","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334123,"byte_end":334202,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/     let width = r2.rx.end - r2.rx.start;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334203,"byte_end":334247,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/     let height = r2.ry.end - r2.ry.start;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334248,"byte_end":334293,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/     if width >= height {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334294,"byte_end":334322,"line_start":73,"line_end":73,"column_start":1,"column_end":29}},{"value":"/         // This is a wide range, split it on the horizontal axis","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334323,"byte_end":334391,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/         let (split_rx, ry) = (split_range1(r2.rx), r2.ry);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334392,"byte_end":334454,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334455,"byte_end":334487,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/             rx: split_rx.0,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334488,"byte_end":334519,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/             ry: ry.clone(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334520,"byte_end":334551,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334552,"byte_end":334566,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_rx.1.map(|rx| Range2D { rx, ry });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334567,"byte_end":334630,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/         (out1, out2)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334631,"byte_end":334655,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/     } else {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334656,"byte_end":334672,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/         // This is a tall range, split it on the vertical axis","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334673,"byte_end":334739,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/         let (rx, split_ry) = (r2.rx, split_range1(r2.ry));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334740,"byte_end":334802,"line_start":84,"line_end":84,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334803,"byte_end":334835,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/             rx: rx.clone(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334836,"byte_end":334867,"line_start":86,"line_end":86,"column_start":1,"column_end":32}},{"value":"/             ry: split_ry.0,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334868,"byte_end":334899,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334900,"byte_end":334914,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_ry.1.map(|ry| Range2D { rx, ry, });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334915,"byte_end":334979,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/         (out1, out2)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":334980,"byte_end":335004,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335005,"byte_end":335014,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335015,"byte_end":335020,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335021,"byte_end":335024,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Again, rayon can handle the recursive splitting for us","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335025,"byte_end":335086,"line_start":94,"line_end":94,"column_start":1,"column_end":62}},{"value":"/ let range = Range2D { rx: 0..800, ry: 0..600 };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335087,"byte_end":335138,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ iter::split(range, split_range2).for_each(|sub_range| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335139,"byte_end":335198,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/     // If the sub-ranges were indeed split by the largest dimension, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335199,"byte_end":335276,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/     // if no dimension was twice larger than the other initially, this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335277,"byte_end":335351,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/     // property will remain true in the final sub-ranges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335352,"byte_end":335413,"line_start":99,"line_end":99,"column_start":1,"column_end":62}},{"value":"/     let width = sub_range.rx.end - sub_range.rx.start;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335414,"byte_end":335472,"line_start":100,"line_end":100,"column_start":1,"column_end":59}},{"value":"/     let height = sub_range.ry.end - sub_range.ry.start;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335473,"byte_end":335532,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/     assert!((width / 2 <= height) && (height / 2 <= width));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335533,"byte_end":335597,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335598,"byte_end":335605,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335606,"byte_end":335613,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335614,"byte_end":335617,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6654},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335967,"byte_end":335972,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"Split","qualname":"::iter::splitter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6657},{"krate":0,"index":6658}],"decl_id":null,"docs":" `Split` is a parallel iterator using arbitrary data and a splitting function.\n This struct is created by the [`split()`] function.","sig":null,"attributes":[{"value":"/ `Split` is a parallel iterator using arbitrary data and a splitting function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335766,"byte_end":335847,"line_start":114,"line_end":114,"column_start":1,"column_end":82}},{"value":"/ This struct is created by the [`split()`] function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335848,"byte_end":335903,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335904,"byte_end":335907,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ [`split()`]: fn.split.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":335908,"byte_end":335938,"line_start":117,"line_end":117,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339673,"byte_end":339677,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":6665},{"krate":0,"index":6666}],"decl_id":null,"docs":" `Take` is an iterator that iterates over the first `n` elements.\n This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Take` is an iterator that iterates over the first `n` elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339277,"byte_end":339345,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339346,"byte_end":339428,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339429,"byte_end":339432,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`take()`]: trait.IndexedParallelIterator.html#method.take","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339433,"byte_end":339495,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339496,"byte_end":339563,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339564,"byte_end":339637,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":342140,"byte_end":342147,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"TryFold","qualname":"::iter::try_fold::TryFold","value":"TryFold {  }","parent":null,"children":[{"krate":0,"index":6678},{"krate":0,"index":6679},{"krate":0,"index":6680},{"krate":0,"index":6681}],"decl_id":null,"docs":" `TryFold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":341740,"byte_end":341835,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":341836,"byte_end":341915,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":341916,"byte_end":341919,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`try_fold()`]: trait.ParallelIterator.html#method.try_fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":341920,"byte_end":341983,"line_start":28,"line_end":28,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":341984,"byte_end":342037,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":342038,"byte_end":342111,"line_start":30,"line_end":30,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":346101,"byte_end":346112,"line_start":190,"line_end":190,"column_start":12,"column_end":23},"name":"TryFoldWith","qualname":"::iter::try_fold::TryFoldWith","value":"TryFoldWith {  }","parent":null,"children":[{"krate":0,"index":6692},{"krate":0,"index":6693},{"krate":0,"index":6694}],"decl_id":null,"docs":" `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345682,"byte_end":345781,"line_start":183,"line_end":183,"column_start":1,"column_end":100}},{"value":"/ This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345782,"byte_end":345866,"line_start":184,"line_end":184,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345867,"byte_end":345870,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ [`try_fold_with()`]: trait.ParallelIterator.html#method.try_fold_with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345871,"byte_end":345944,"line_start":186,"line_end":186,"column_start":1,"column_end":74}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345945,"byte_end":345998,"line_start":187,"line_end":187,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345999,"byte_end":346072,"line_start":188,"line_end":188,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":3136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":355174,"byte_end":355178,"line_start":9,"line_end":9,"column_start":10,"column_end":14},"name":"Left","qualname":"::iter::unzip::UnzipOp::Left","value":"type Left: Send;","parent":{"krate":0,"index":3134},"children":[],"decl_id":null,"docs":" The type of item expected by the left consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the left consumer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":355113,"byte_end":355164,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":3137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":355253,"byte_end":355258,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Right","qualname":"::iter::unzip::UnzipOp::Right","value":"type Right: Send;","parent":{"krate":0,"index":3134},"children":[],"decl_id":null,"docs":" The type of item expected by the right consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the right consumer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":355191,"byte_end":355243,"line_start":11,"line_end":11,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":6700},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367384,"byte_end":367390,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Update","qualname":"::iter::update::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":6703},{"krate":0,"index":6704}],"decl_id":null,"docs":" `Update` is an iterator that mutates the elements of an\n underlying iterator before they are yielded.","sig":null,"attributes":[{"value":"/ `Update` is an iterator that mutates the elements of an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":366973,"byte_end":367032,"line_start":6,"line_end":6,"column_start":1,"column_end":60}},{"value":"/ underlying iterator before they are yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367033,"byte_end":367081,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367082,"byte_end":367085,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`update()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367086,"byte_end":367163,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367164,"byte_end":367167,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`update()`]: trait.ParallelIterator.html#method.update","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367168,"byte_end":367227,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367228,"byte_end":367281,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367282,"byte_end":367355,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":375107,"byte_end":375116,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::iter::while_some::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":6724}],"decl_id":null,"docs":" `WhileSome` is an iterator that yields the `Some` elements of an iterator,\n halting as soon as any `None` is produced.","sig":null,"attributes":[{"value":"/ `WhileSome` is an iterator that yields the `Some` elements of an iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374660,"byte_end":374738,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ halting as soon as any `None` is produced.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374739,"byte_end":374785,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374786,"byte_end":374789,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`while_some()`] method on [`ParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374790,"byte_end":374871,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374872,"byte_end":374875,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`while_some()`]: trait.ParallelIterator.html#method.while_some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374876,"byte_end":374943,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374944,"byte_end":374997,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":374998,"byte_end":375071,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6731},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378812,"byte_end":378815,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":6734},{"krate":0,"index":6735}],"decl_id":null,"docs":" `Zip` is an iterator that zips up `a` and `b` into a single iterator\n of pairs. This struct is created by the [`zip()`] method on\n [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Zip` is an iterator that zips up `a` and `b` into a single iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378401,"byte_end":378473,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of pairs. This struct is created by the [`zip()`] method on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378474,"byte_end":378537,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/ [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378538,"byte_end":378569,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378570,"byte_end":378573,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip()`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378574,"byte_end":378634,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378635,"byte_end":378702,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378703,"byte_end":378776,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6744},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382802,"byte_end":382807,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::iter::zip_eq::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":6747}],"decl_id":null,"docs":" An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal\n length simultaneously.","sig":null,"attributes":[{"value":"/ An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382307,"byte_end":382392,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ length simultaneously.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382393,"byte_end":382419,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382420,"byte_end":382423,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`zip_eq`] method on [`IndexedParallelIterator`],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382424,"byte_end":382507,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/ see its documentation for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382508,"byte_end":382555,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382556,"byte_end":382559,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip_eq`]: trait.IndexedParallelIterator.html#method.zip_eq","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382560,"byte_end":382624,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382625,"byte_end":382692,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382693,"byte_end":382766,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384596,"byte_end":384602,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::iter::step_by::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":6758},{"krate":0,"index":6759}],"decl_id":null,"docs":" `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.\n This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384159,"byte_end":384259,"line_start":10,"line_end":10,"column_start":1,"column_end":101}},{"value":"/ This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384260,"byte_end":384345,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384346,"byte_end":384349,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`step_by()`]: trait.IndexedParallelIterator.html#method.step_by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384350,"byte_end":384418,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384419,"byte_end":384486,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384487,"byte_end":384560,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":3695},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29088,"byte_end":29108,"line_start":198,"line_end":198,"column_start":11,"column_end":31},"name":"IntoParallelIterator","qualname":"::iter::IntoParallelIterator","value":"IntoParallelIterator","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698}],"decl_id":null,"docs":" `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28640,"byte_end":28719,"line_start":190,"line_end":190,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28720,"byte_end":28723,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ By implementing `IntoParallelIterator` for a type, you define how it will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28724,"byte_end":28801,"line_start":192,"line_end":192,"column_start":1,"column_end":78}},{"value":"/ transformed into an iterator. This is a parallel version of the standard","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28802,"byte_end":28878,"line_start":193,"line_end":193,"column_start":1,"column_end":77}},{"value":"/ library's [`std::iter::IntoIterator`] trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28879,"byte_end":28927,"line_start":194,"line_end":194,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28928,"byte_end":28931,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28932,"byte_end":28985,"line_start":196,"line_end":196,"column_start":1,"column_end":54}},{"value":"/ [`std::iter::IntoIterator`]: https://doc.rust-lang.org/std/iter/trait.IntoIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":28986,"byte_end":29077,"line_start":197,"line_end":197,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":3696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29177,"byte_end":29181,"line_start":200,"line_end":200,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":" The parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The parallel iterator type that will be created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29115,"byte_end":29167,"line_start":199,"line_end":199,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":3697},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29296,"byte_end":29300,"line_start":203,"line_end":203,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29225,"byte_end":29286,"line_start":202,"line_end":202,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3698},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29951,"byte_end":29964,"line_start":227,"line_end":227,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"::iter::IntoParallelIterator::into_par_iter","value":"fn (self) -> Self::Iter","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29313,"byte_end":29358,"line_start":205,"line_end":205,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29363,"byte_end":29366,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29371,"byte_end":29385,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29390,"byte_end":29393,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29398,"byte_end":29405,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29410,"byte_end":29436,"line_start":210,"line_end":210,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29441,"byte_end":29444,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ println!(\"counting in parallel:\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29449,"byte_end":29487,"line_start":212,"line_end":212,"column_start":5,"column_end":43}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29492,"byte_end":29520,"line_start":213,"line_end":213,"column_start":5,"column_end":33}},{"value":"/     .for_each(|i| println!(\"{}\", i));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29525,"byte_end":29566,"line_start":214,"line_end":214,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29571,"byte_end":29578,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29583,"byte_end":29586,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This conversion is often implicit for arguments to methods like [`zip`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29591,"byte_end":29667,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29672,"byte_end":29675,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29680,"byte_end":29687,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29692,"byte_end":29718,"line_start":220,"line_end":220,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29723,"byte_end":29726,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..5).into_par_iter().zip(5..10).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29731,"byte_end":29795,"line_start":222,"line_end":222,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(v, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29800,"byte_end":29860,"line_start":223,"line_end":223,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29865,"byte_end":29872,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29877,"byte_end":29880,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ [`zip`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29885,"byte_end":29943,"line_start":226,"line_end":226,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":3699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30553,"byte_end":30576,"line_start":243,"line_end":243,"column_start":11,"column_end":34},"name":"IntoParallelRefIterator","qualname":"::iter::IntoParallelRefIterator","value":"IntoParallelRefIterator<'data>","parent":null,"children":[{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3703}],"decl_id":null,"docs":" `IntoParallelRefIterator` implements the conversion to a\n [`ParallelIterator`], providing shared references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefIterator` implements the conversion to a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":29989,"byte_end":30049,"line_start":230,"line_end":230,"column_start":1,"column_end":61}},{"value":"/ [`ParallelIterator`], providing shared references to the data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30050,"byte_end":30116,"line_start":231,"line_end":231,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30117,"byte_end":30120,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter()` method","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30121,"byte_end":30174,"line_start":233,"line_end":233,"column_start":1,"column_end":54}},{"value":"/ defined by various collections.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30175,"byte_end":30210,"line_start":234,"line_end":234,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30211,"byte_end":30214,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30215,"byte_end":30258,"line_start":236,"line_end":236,"column_start":1,"column_end":44}},{"value":"/ `for I where &I: IntoParallelIterator`. In most cases, users","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30259,"byte_end":30323,"line_start":237,"line_end":237,"column_start":1,"column_end":65}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30324,"byte_end":30397,"line_start":238,"line_end":238,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30398,"byte_end":30422,"line_start":239,"line_end":239,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30423,"byte_end":30426,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30427,"byte_end":30480,"line_start":241,"line_end":241,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30481,"byte_end":30542,"line_start":242,"line_end":242,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":3701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30660,"byte_end":30664,"line_start":245,"line_end":245,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3699},"children":[],"decl_id":null,"docs":" The type of the parallel iterator that will be returned.\n","sig":null,"attributes":[{"value":"/ The type of the parallel iterator that will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30590,"byte_end":30650,"line_start":244,"line_end":244,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":3702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30840,"byte_end":30844,"line_start":249,"line_end":249,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":3699},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This will typically be an `&'data T` reference type.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30708,"byte_end":30769,"line_start":247,"line_end":247,"column_start":5,"column_end":66}},{"value":"/ This will typically be an `&'data T` reference type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30774,"byte_end":30830,"line_start":248,"line_end":248,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31334,"byte_end":31342,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"par_iter","qualname":"::iter::IntoParallelRefIterator::par_iter","value":"fn (&'data self) -> Self::Iter","parent":{"krate":0,"index":3699},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30865,"byte_end":30910,"line_start":251,"line_end":251,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30915,"byte_end":30918,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30923,"byte_end":30937,"line_start":253,"line_end":253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30942,"byte_end":30945,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30950,"byte_end":30957,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30962,"byte_end":30988,"line_start":256,"line_end":256,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":30993,"byte_end":30996,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..100).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31001,"byte_end":31040,"line_start":258,"line_end":258,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.par_iter().sum::<i32>(), 100 * 99 / 2);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31045,"byte_end":31101,"line_start":259,"line_end":259,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31106,"byte_end":31109,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ // `v.par_iter()` is shorthand for `(&v).into_par_iter()`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31114,"byte_end":31176,"line_start":261,"line_end":261,"column_start":5,"column_end":67}},{"value":"/ // producing the exact same references.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31181,"byte_end":31224,"line_start":262,"line_end":262,"column_start":5,"column_end":48}},{"value":"/ assert!(v.par_iter().zip(&v)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31229,"byte_end":31261,"line_start":263,"line_end":263,"column_start":5,"column_end":37}},{"value":"/          .all(|(a, b)| std::ptr::eq(a, b)));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31266,"byte_end":31314,"line_start":264,"line_end":264,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31319,"byte_end":31326,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32262,"byte_end":32288,"line_start":294,"line_end":294,"column_start":11,"column_end":37},"name":"IntoParallelRefMutIterator","qualname":"::iter::IntoParallelRefMutIterator","value":"IntoParallelRefMutIterator<'data>","parent":null,"children":[{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3714}],"decl_id":null,"docs":" `IntoParallelRefMutIterator` implements the conversion to a\n [`ParallelIterator`], providing mutable references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefMutIterator` implements the conversion to a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31686,"byte_end":31749,"line_start":281,"line_end":281,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`], providing mutable references to the data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31750,"byte_end":31817,"line_start":282,"line_end":282,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31818,"byte_end":31821,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter_mut()` method","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31822,"byte_end":31879,"line_start":284,"line_end":284,"column_start":1,"column_end":58}},{"value":"/ defined by various collections.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31880,"byte_end":31915,"line_start":285,"line_end":285,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31916,"byte_end":31919,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31920,"byte_end":31963,"line_start":287,"line_end":287,"column_start":1,"column_end":44}},{"value":"/ `for I where &mut I: IntoParallelIterator`. In most cases, users","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31964,"byte_end":32032,"line_start":288,"line_end":288,"column_start":1,"column_end":69}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32033,"byte_end":32106,"line_start":289,"line_end":289,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32107,"byte_end":32131,"line_start":290,"line_end":290,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32132,"byte_end":32135,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32136,"byte_end":32189,"line_start":292,"line_end":292,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32190,"byte_end":32251,"line_start":293,"line_end":293,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":3712},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32358,"byte_end":32362,"line_start":296,"line_end":296,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefMutIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" The type of iterator that will be created.\n","sig":null,"attributes":[{"value":"/ The type of iterator that will be created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32302,"byte_end":32348,"line_start":295,"line_end":295,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":3713},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32514,"byte_end":32518,"line_start":300,"line_end":300,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefMutIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" The type of item that will be produced; this is typically an\n `&'data mut T` reference.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced; this is typically an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32406,"byte_end":32470,"line_start":298,"line_end":298,"column_start":5,"column_end":69}},{"value":"/ `&'data mut T` reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32475,"byte_end":32504,"line_start":299,"line_end":299,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3714},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32832,"byte_end":32844,"line_start":313,"line_end":313,"column_start":8,"column_end":20},"name":"par_iter_mut","qualname":"::iter::IntoParallelRefMutIterator::par_iter_mut","value":"fn (&'data mut self) -> Self::Iter","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" Creates the parallel iterator from `self`.","sig":null,"attributes":[{"value":"/ Creates the parallel iterator from `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32539,"byte_end":32585,"line_start":302,"line_end":302,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32590,"byte_end":32593,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32598,"byte_end":32612,"line_start":304,"line_end":304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32617,"byte_end":32620,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32625,"byte_end":32632,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32637,"byte_end":32663,"line_start":307,"line_end":307,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32668,"byte_end":32671,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0usize; 5];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32676,"byte_end":32708,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/ v.par_iter_mut().enumerate().for_each(|(i, x)| *x = i);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32713,"byte_end":32772,"line_start":310,"line_end":310,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(v, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32777,"byte_end":32812,"line_start":311,"line_end":311,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32817,"byte_end":32824,"line_start":312,"line_end":312,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33821,"byte_end":33837,"line_start":342,"line_end":342,"column_start":11,"column_end":27},"name":"ParallelIterator","qualname":"::iter::ParallelIterator","value":"ParallelIterator: Sized + Send","parent":null,"children":[{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3725},{"krate":0,"index":3728},{"krate":0,"index":3732},{"krate":0,"index":3737},{"krate":0,"index":3743},{"krate":0,"index":3750},{"krate":0,"index":3753},{"krate":0,"index":3756},{"krate":0,"index":3760},{"krate":0,"index":3765},{"krate":0,"index":3768},{"krate":0,"index":3771},{"krate":0,"index":3773},{"krate":0,"index":3775},{"krate":0,"index":3777},{"krate":0,"index":3780},{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3787},{"krate":0,"index":3799},{"krate":0,"index":3803},{"krate":0,"index":3806},{"krate":0,"index":3810},{"krate":0,"index":3813},{"krate":0,"index":3818},{"krate":0,"index":3822},{"krate":0,"index":3824},{"krate":0,"index":3826},{"krate":0,"index":3827},{"krate":0,"index":3834},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3854},{"krate":0,"index":3866},{"krate":0,"index":3868},{"krate":0,"index":3870},{"krate":0,"index":3872},{"krate":0,"index":3874},{"krate":0,"index":3879},{"krate":0,"index":3884},{"krate":0,"index":3889},{"krate":0,"index":3891},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3901},{"krate":0,"index":3906},{"krate":0,"index":3910},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3919}],"decl_id":null,"docs":" Parallel version of the standard iterator trait.","sig":null,"attributes":[{"value":"/ Parallel version of the standard iterator trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33215,"byte_end":33267,"line_start":328,"line_end":328,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33268,"byte_end":33271,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ The combinators on this trait are available on **all** parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33272,"byte_end":33339,"line_start":330,"line_end":330,"column_start":1,"column_end":68}},{"value":"/ iterators.  Additional methods can be found on the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33340,"byte_end":33394,"line_start":331,"line_end":331,"column_start":1,"column_end":55}},{"value":"/ [`IndexedParallelIterator`] trait: those methods are only","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33395,"byte_end":33456,"line_start":332,"line_end":332,"column_start":1,"column_end":62}},{"value":"/ available for parallel iterators where the number of items is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33457,"byte_end":33522,"line_start":333,"line_end":333,"column_start":1,"column_end":66}},{"value":"/ known in advance (so, e.g., after invoking `filter`, those methods","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33523,"byte_end":33593,"line_start":334,"line_end":334,"column_start":1,"column_end":71}},{"value":"/ become unavailable).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33594,"byte_end":33618,"line_start":335,"line_end":335,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33619,"byte_end":33622,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ For examples of using parallel iterators, see [the docs on the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33623,"byte_end":33689,"line_start":337,"line_end":337,"column_start":1,"column_end":67}},{"value":"/ `iter` module][iter].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33690,"byte_end":33715,"line_start":338,"line_end":338,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33716,"byte_end":33719,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ [iter]: index.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33720,"byte_end":33742,"line_start":340,"line_end":340,"column_start":1,"column_end":23}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33743,"byte_end":33810,"line_start":341,"line_end":341,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":3722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34103,"byte_end":34107,"line_start":348,"line_end":348,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" The type of item that this parallel iterator produces.\n For example, if you use the [`for_each`] method, this is the type of\n item that your closure will be invoked with.","sig":null,"attributes":[{"value":"/ The type of item that this parallel iterator produces.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33858,"byte_end":33916,"line_start":343,"line_end":343,"column_start":5,"column_end":63}},{"value":"/ For example, if you use the [`for_each`] method, this is the type of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33921,"byte_end":33993,"line_start":344,"line_end":344,"column_start":5,"column_end":77}},{"value":"/ item that your closure will be invoked with.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33998,"byte_end":34046,"line_start":345,"line_end":345,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34051,"byte_end":34054,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ [`for_each`]: #method.for_each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34059,"byte_end":34093,"line_start":347,"line_end":347,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3723},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34363,"byte_end":34371,"line_start":359,"line_end":359,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::ParallelIterator::for_each","value":"fn <OP> (self, op: OP) -> ()","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34120,"byte_end":34189,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34194,"byte_end":34197,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34202,"byte_end":34216,"line_start":352,"line_end":352,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34221,"byte_end":34224,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34229,"byte_end":34236,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34241,"byte_end":34267,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34272,"byte_end":34275,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ (0..100).into_par_iter().for_each(|x| println!(\"{:?}\", x));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34280,"byte_end":34343,"line_start":357,"line_end":357,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34348,"byte_end":34355,"line_start":358,"line_end":358,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3725},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35206,"byte_end":35219,"line_start":389,"line_end":389,"column_start":8,"column_end":21},"name":"for_each_with","qualname":"::iter::ParallelIterator::for_each_with","value":"fn <OP, T> (self, init: T, op: OP) -> ()","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes `OP` on the given `init` value with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on the given `init` value with each item produced by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34497,"byte_end":34567,"line_start":366,"line_end":366,"column_start":5,"column_end":75}},{"value":"/ the iterator, in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34572,"byte_end":34602,"line_start":367,"line_end":367,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34607,"byte_end":34610,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34615,"byte_end":34683,"line_start":369,"line_end":369,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34688,"byte_end":34759,"line_start":370,"line_end":370,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34764,"byte_end":34781,"line_start":371,"line_end":371,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34786,"byte_end":34789,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34794,"byte_end":34808,"line_start":373,"line_end":373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34813,"byte_end":34816,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34821,"byte_end":34828,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34833,"byte_end":34866,"line_start":376,"line_end":376,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34871,"byte_end":34897,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34902,"byte_end":34905,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34910,"byte_end":34949,"line_start":379,"line_end":379,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34954,"byte_end":34957,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter().for_each_with(sender, |s, x| s.send(x).unwrap());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":34962,"byte_end":35038,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35043,"byte_end":35046,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35051,"byte_end":35103,"line_start":383,"line_end":383,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35108,"byte_end":35111,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35116,"byte_end":35131,"line_start":385,"line_end":385,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35136,"byte_end":35139,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35144,"byte_end":35186,"line_start":387,"line_end":387,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35191,"byte_end":35198,"line_start":388,"line_end":388,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3728},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36187,"byte_end":36200,"line_start":423,"line_end":423,"column_start":8,"column_end":21},"name":"for_each_init","qualname":"::iter::ParallelIterator::for_each_init","value":"fn <OP, INIT, T> (self, init: INIT, op: OP) -> ()","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes `OP` on a value returned by `init` with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on a value returned by `init` with each item produced by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35394,"byte_end":35468,"line_start":397,"line_end":397,"column_start":5,"column_end":79}},{"value":"/ the iterator, in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35473,"byte_end":35503,"line_start":398,"line_end":398,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35508,"byte_end":35511,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35516,"byte_end":35587,"line_start":400,"line_end":400,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35592,"byte_end":35658,"line_start":401,"line_end":401,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35663,"byte_end":35707,"line_start":402,"line_end":402,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35712,"byte_end":35715,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35720,"byte_end":35734,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35739,"byte_end":35742,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35747,"byte_end":35754,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35759,"byte_end":35777,"line_start":407,"line_end":407,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35782,"byte_end":35808,"line_start":408,"line_end":408,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35813,"byte_end":35816,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35821,"byte_end":35858,"line_start":410,"line_end":410,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35863,"byte_end":35866,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35871,"byte_end":35897,"line_start":412,"line_end":412,"column_start":5,"column_end":31}},{"value":"/     .for_each_init(","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35902,"byte_end":35925,"line_start":413,"line_end":413,"column_start":5,"column_end":28}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35930,"byte_end":35964,"line_start":414,"line_end":414,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.fill(chunk),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":35969,"byte_end":36010,"line_start":415,"line_end":415,"column_start":5,"column_end":46}},{"value":"/     );","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36015,"byte_end":36025,"line_start":416,"line_end":416,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36030,"byte_end":36033,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36038,"byte_end":36091,"line_start":418,"line_end":418,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36096,"byte_end":36120,"line_start":419,"line_end":419,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36125,"byte_end":36157,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36162,"byte_end":36167,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36172,"byte_end":36179,"line_start":422,"line_end":422,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37303,"byte_end":37315,"line_start":451,"line_end":451,"column_start":8,"column_end":20},"name":"try_for_each","qualname":"::iter::ParallelIterator::try_for_each","value":"fn <OP, R> (self, op: OP) -> R","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36398,"byte_end":36478,"line_start":431,"line_end":431,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36483,"byte_end":36486,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ If the `OP` returns `Result::Err` or `Option::None`, we will attempt to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36491,"byte_end":36566,"line_start":433,"line_end":433,"column_start":5,"column_end":80}},{"value":"/ stop processing the rest of the items in the iterator as soon as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36571,"byte_end":36639,"line_start":434,"line_end":434,"column_start":5,"column_end":73}},{"value":"/ possible, and we will return that terminating value.  Otherwise, we will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36644,"byte_end":36720,"line_start":435,"line_end":435,"column_start":5,"column_end":81}},{"value":"/ return an empty `Result::Ok(())` or `Option::Some(())`.  If there are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36725,"byte_end":36798,"line_start":436,"line_end":436,"column_start":5,"column_end":78}},{"value":"/ multiple errors in parallel, it is not specified which will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36803,"byte_end":36879,"line_start":437,"line_end":437,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36884,"byte_end":36887,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36892,"byte_end":36906,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36911,"byte_end":36914,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36919,"byte_end":36926,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36931,"byte_end":36957,"line_start":442,"line_end":442,"column_start":5,"column_end":31}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36962,"byte_end":36993,"line_start":443,"line_end":443,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":36998,"byte_end":37001,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ // This will stop iteration early if there's any write error, like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37006,"byte_end":37076,"line_start":445,"line_end":445,"column_start":5,"column_end":75}},{"value":"/ // having piped output get closed on the other end.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37081,"byte_end":37136,"line_start":446,"line_end":446,"column_start":5,"column_end":60}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37141,"byte_end":37169,"line_start":447,"line_end":447,"column_start":5,"column_end":33}},{"value":"/     .try_for_each(|x| writeln!(io::stdout(), \"{:?}\", x))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37174,"byte_end":37234,"line_start":448,"line_end":448,"column_start":5,"column_end":65}},{"value":"/     .expect(\"expected no write errors\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37239,"byte_end":37283,"line_start":449,"line_end":449,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37288,"byte_end":37295,"line_start":450,"line_end":450,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3737},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38424,"byte_end":38441,"line_start":490,"line_end":490,"column_start":8,"column_end":25},"name":"try_for_each_with","qualname":"::iter::ParallelIterator::try_for_each_with","value":"fn <OP, T, R> (self, init: T, op: OP) -> R","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on the given `init` value with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on the given `init` value with each item","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37589,"byte_end":37658,"line_start":463,"line_end":463,"column_start":5,"column_end":74}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37663,"byte_end":37705,"line_start":464,"line_end":464,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37710,"byte_end":37713,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_with()`] and the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37718,"byte_end":37787,"line_start":466,"line_end":466,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37792,"byte_end":37836,"line_start":467,"line_end":467,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37841,"byte_end":37844,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ [`for_each_with()`]: #method.for_each_with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37849,"byte_end":37895,"line_start":469,"line_end":469,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37900,"byte_end":37944,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37949,"byte_end":37952,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37957,"byte_end":37971,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37976,"byte_end":37979,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37984,"byte_end":37991,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":37996,"byte_end":38029,"line_start":475,"line_end":475,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38034,"byte_end":38060,"line_start":476,"line_end":476,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38065,"byte_end":38068,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38073,"byte_end":38112,"line_start":478,"line_end":478,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38117,"byte_end":38120,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38125,"byte_end":38151,"line_start":480,"line_end":480,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_with(sender, |s, x| s.send(x))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38156,"byte_end":38208,"line_start":481,"line_end":481,"column_start":5,"column_end":57}},{"value":"/     .expect(\"expected no send errors\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38213,"byte_end":38256,"line_start":482,"line_end":482,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38261,"byte_end":38264,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38269,"byte_end":38321,"line_start":484,"line_end":484,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38326,"byte_end":38329,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38334,"byte_end":38349,"line_start":486,"line_end":486,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38354,"byte_end":38357,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38362,"byte_end":38404,"line_start":488,"line_end":488,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38409,"byte_end":38416,"line_start":489,"line_end":489,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3743},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39665,"byte_end":39682,"line_start":532,"line_end":532,"column_start":8,"column_end":25},"name":"try_for_each_init","qualname":"::iter::ParallelIterator::try_for_each_init","value":"fn <OP, INIT, T, R> (self, init: INIT, op: OP) -> R","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on a value returned by `init` with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on a value returned by `init` with each item","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38771,"byte_end":38844,"line_start":503,"line_end":503,"column_start":5,"column_end":78}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38849,"byte_end":38891,"line_start":504,"line_end":504,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38896,"byte_end":38899,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_init()`] and the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38904,"byte_end":38973,"line_start":506,"line_end":506,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":38978,"byte_end":39022,"line_start":507,"line_end":507,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39027,"byte_end":39030,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ [`for_each_init()`]: #method.for_each_init","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39035,"byte_end":39081,"line_start":509,"line_end":509,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39086,"byte_end":39130,"line_start":510,"line_end":510,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39135,"byte_end":39138,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39143,"byte_end":39157,"line_start":512,"line_end":512,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39162,"byte_end":39165,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39170,"byte_end":39177,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39182,"byte_end":39200,"line_start":515,"line_end":515,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39205,"byte_end":39231,"line_start":516,"line_end":516,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39236,"byte_end":39239,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39244,"byte_end":39281,"line_start":518,"line_end":518,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39286,"byte_end":39289,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39294,"byte_end":39320,"line_start":520,"line_end":520,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_init(","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39325,"byte_end":39352,"line_start":521,"line_end":521,"column_start":5,"column_end":32}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39357,"byte_end":39391,"line_start":522,"line_end":522,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.try_fill(chunk),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39396,"byte_end":39441,"line_start":523,"line_end":523,"column_start":5,"column_end":50}},{"value":"/     )","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39446,"byte_end":39455,"line_start":524,"line_end":524,"column_start":5,"column_end":14}},{"value":"/     .expect(\"expected no rand errors\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39460,"byte_end":39503,"line_start":525,"line_end":525,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39508,"byte_end":39511,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39516,"byte_end":39569,"line_start":527,"line_end":527,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39574,"byte_end":39598,"line_start":528,"line_end":528,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39603,"byte_end":39635,"line_start":529,"line_end":529,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39640,"byte_end":39645,"line_start":530,"line_end":530,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":39650,"byte_end":39657,"line_start":531,"line_end":531,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40292,"byte_end":40297,"line_start":556,"line_end":556,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::ParallelIterator::count","value":"fn (self) -> usize","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Counts the number of items in this parallel iterator.","sig":null,"attributes":[{"value":"/ Counts the number of items in this parallel iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40035,"byte_end":40092,"line_start":545,"line_end":545,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40097,"byte_end":40100,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40105,"byte_end":40119,"line_start":547,"line_end":547,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40124,"byte_end":40127,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40132,"byte_end":40139,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40144,"byte_end":40170,"line_start":550,"line_end":550,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40175,"byte_end":40178,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ let count = (0..100).into_par_iter().count();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40183,"byte_end":40232,"line_start":552,"line_end":552,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40237,"byte_end":40240,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count, 100);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40245,"byte_end":40272,"line_start":554,"line_end":554,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40277,"byte_end":40284,"line_start":555,"line_end":555,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40806,"byte_end":40809,"line_start":578,"line_end":578,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::ParallelIterator::map","value":"fn <F, R> (self, map_op: F) -> Map<Self, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator, producing a new\n iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator, producing a new","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40414,"byte_end":40481,"line_start":564,"line_end":564,"column_start":5,"column_end":72}},{"value":"/ iterator with the results.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40486,"byte_end":40516,"line_start":565,"line_end":565,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40521,"byte_end":40524,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40529,"byte_end":40543,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40548,"byte_end":40551,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40556,"byte_end":40563,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40568,"byte_end":40594,"line_start":570,"line_end":570,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40599,"byte_end":40602,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..5).into_par_iter().map(|x| x * 2);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40607,"byte_end":40668,"line_start":572,"line_end":572,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40673,"byte_end":40676,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40681,"byte_end":40726,"line_start":574,"line_end":574,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40731,"byte_end":40734,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40739,"byte_end":40786,"line_start":576,"line_end":576,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40791,"byte_end":40798,"line_start":577,"line_end":577,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42152,"byte_end":42160,"line_start":615,"line_end":615,"column_start":8,"column_end":16},"name":"map_with","qualname":"::iter::ParallelIterator::map_with","value":"fn <F, T, R> (self, init: T, map_op: F) -> MapWith<Self, T, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to the given `init` value with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to the given `init` value with each item of this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":40970,"byte_end":41039,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41044,"byte_end":41100,"line_start":587,"line_end":587,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41105,"byte_end":41108,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41113,"byte_end":41181,"line_start":589,"line_end":589,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41186,"byte_end":41257,"line_start":590,"line_end":590,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41262,"byte_end":41279,"line_start":591,"line_end":591,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41284,"byte_end":41287,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41292,"byte_end":41306,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41311,"byte_end":41314,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41319,"byte_end":41326,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41331,"byte_end":41364,"line_start":596,"line_end":596,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41369,"byte_end":41395,"line_start":597,"line_end":597,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41400,"byte_end":41403,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41408,"byte_end":41447,"line_start":599,"line_end":599,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41452,"byte_end":41455,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (0..5)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41460,"byte_end":41486,"line_start":601,"line_end":601,"column_start":5,"column_end":31}},{"value":"/                 .into_par_iter()            // iterating over i32","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41491,"byte_end":41560,"line_start":602,"line_end":602,"column_start":5,"column_end":74}},{"value":"/                 .map_with(sender, |s, x| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41565,"byte_end":41611,"line_start":603,"line_end":603,"column_start":5,"column_end":51}},{"value":"/                     s.send(x).unwrap();     // sending i32 values through the channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41616,"byte_end":41705,"line_start":604,"line_end":604,"column_start":5,"column_end":94}},{"value":"/                     x                       // returning i32","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41710,"byte_end":41774,"line_start":605,"line_end":605,"column_start":5,"column_end":69}},{"value":"/                 })","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41779,"byte_end":41801,"line_start":606,"line_end":606,"column_start":5,"column_end":27}},{"value":"/                 .collect();                 // collecting the returned values into a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41806,"byte_end":41901,"line_start":607,"line_end":607,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41906,"byte_end":41909,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let mut b: Vec<_> = receiver.iter()         // iterating over the values in the channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":41914,"byte_end":42005,"line_start":609,"line_end":609,"column_start":5,"column_end":96}},{"value":"/                             .collect();     // and collecting them","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42010,"byte_end":42080,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/ b.sort();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42085,"byte_end":42098,"line_start":611,"line_end":611,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42103,"byte_end":42106,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42111,"byte_end":42132,"line_start":613,"line_end":613,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42137,"byte_end":42144,"line_start":614,"line_end":614,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3760},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43343,"byte_end":43351,"line_start":652,"line_end":652,"column_start":8,"column_end":16},"name":"map_init","qualname":"::iter::ParallelIterator::map_init","value":"fn <F, INIT, T, R> (self, init: INIT, map_op: F) -> MapInit<Self, INIT, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to a value returned by `init` with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to a value returned by `init` with each item of this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42383,"byte_end":42456,"line_start":624,"line_end":624,"column_start":5,"column_end":78}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42461,"byte_end":42517,"line_start":625,"line_end":625,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42522,"byte_end":42525,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42530,"byte_end":42601,"line_start":627,"line_end":627,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42606,"byte_end":42672,"line_start":628,"line_end":628,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42677,"byte_end":42721,"line_start":629,"line_end":629,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42726,"byte_end":42729,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42734,"byte_end":42748,"line_start":631,"line_end":631,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42753,"byte_end":42756,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42761,"byte_end":42768,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42773,"byte_end":42791,"line_start":634,"line_end":634,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42796,"byte_end":42822,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42827,"byte_end":42830,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (1i32..1_000_000)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42835,"byte_end":42872,"line_start":637,"line_end":637,"column_start":5,"column_end":42}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42877,"byte_end":42901,"line_start":638,"line_end":638,"column_start":5,"column_end":29}},{"value":"/     .map_init(","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42906,"byte_end":42924,"line_start":639,"line_end":639,"column_start":5,"column_end":23}},{"value":"/         || rand::thread_rng(),  // get the thread-local RNG","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42929,"byte_end":42992,"line_start":640,"line_end":640,"column_start":5,"column_end":68}},{"value":"/         |rng, x| if rng.gen() { // randomly negate items","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":42997,"byte_end":43057,"line_start":641,"line_end":641,"column_start":5,"column_end":65}},{"value":"/             -x","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43062,"byte_end":43080,"line_start":642,"line_end":642,"column_start":5,"column_end":23}},{"value":"/         } else {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43085,"byte_end":43105,"line_start":643,"line_end":643,"column_start":5,"column_end":25}},{"value":"/             x","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43110,"byte_end":43127,"line_start":644,"line_end":644,"column_start":5,"column_end":22}},{"value":"/         },","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43132,"byte_end":43146,"line_start":645,"line_end":645,"column_start":5,"column_end":19}},{"value":"/     ).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43151,"byte_end":43171,"line_start":646,"line_end":646,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43176,"byte_end":43179,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43184,"byte_end":43237,"line_start":648,"line_end":648,"column_start":5,"column_end":58}},{"value":"/ assert!(a.iter().any(|&x| x < 0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43242,"byte_end":43280,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ assert!(a.iter().any(|&x| x > 0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43285,"byte_end":43323,"line_start":650,"line_end":650,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43328,"byte_end":43335,"line_start":651,"line_end":651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44282,"byte_end":44288,"line_start":682,"line_end":682,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::ParallelIterator::cloned","value":"fn <'a, T> (self) -> Cloned<Self>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates an iterator which clones all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Clone`. See also [`copied()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which clones all of its elements.  This may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43600,"byte_end":43670,"line_start":661,"line_end":661,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43675,"byte_end":43744,"line_start":662,"line_end":662,"column_start":5,"column_end":74}},{"value":"/ that type implements `Clone`. See also [`copied()`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43749,"byte_end":43805,"line_start":663,"line_end":663,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43810,"byte_end":43813,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ [`copied()`]: #method.copied","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43818,"byte_end":43850,"line_start":665,"line_end":665,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43855,"byte_end":43858,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43863,"byte_end":43877,"line_start":667,"line_end":667,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43882,"byte_end":43885,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43890,"byte_end":43897,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43902,"byte_end":43928,"line_start":670,"line_end":670,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43933,"byte_end":43936,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43941,"byte_end":43963,"line_start":672,"line_end":672,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43968,"byte_end":43971,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let v_cloned: Vec<_> = a.par_iter().cloned().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":43976,"byte_end":44035,"line_start":674,"line_end":674,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44040,"byte_end":44043,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ // cloned is the same as .map(|&x| x), for integers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44048,"byte_end":44103,"line_start":676,"line_end":676,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44108,"byte_end":44167,"line_start":677,"line_end":677,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44172,"byte_end":44175,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_cloned, vec![1, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44180,"byte_end":44220,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44225,"byte_end":44262,"line_start":680,"line_end":680,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44267,"byte_end":44274,"line_start":681,"line_end":681,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3768},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45128,"byte_end":45134,"line_start":711,"line_end":711,"column_start":8,"column_end":14},"name":"copied","qualname":"::iter::ParallelIterator::copied","value":"fn <'a, T> (self) -> Copied<Self>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates an iterator which copies all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Copy`. See also [`cloned()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which copies all of its elements.  This may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44447,"byte_end":44517,"line_start":690,"line_end":690,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44522,"byte_end":44591,"line_start":691,"line_end":691,"column_start":5,"column_end":74}},{"value":"/ that type implements `Copy`. See also [`cloned()`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44596,"byte_end":44651,"line_start":692,"line_end":692,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44656,"byte_end":44659,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ [`cloned()`]: #method.cloned","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44664,"byte_end":44696,"line_start":694,"line_end":694,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44701,"byte_end":44704,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44709,"byte_end":44723,"line_start":696,"line_end":696,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44728,"byte_end":44731,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44736,"byte_end":44743,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44748,"byte_end":44774,"line_start":699,"line_end":699,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44779,"byte_end":44782,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44787,"byte_end":44809,"line_start":701,"line_end":701,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44814,"byte_end":44817,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ let v_copied: Vec<_> = a.par_iter().copied().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44822,"byte_end":44881,"line_start":703,"line_end":703,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44886,"byte_end":44889,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ // copied is the same as .map(|&x| x), for integers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44894,"byte_end":44949,"line_start":705,"line_end":705,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":44954,"byte_end":45013,"line_start":706,"line_end":706,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45018,"byte_end":45021,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_copied, vec![1, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45026,"byte_end":45066,"line_start":708,"line_end":708,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45071,"byte_end":45108,"line_start":709,"line_end":709,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45113,"byte_end":45120,"line_start":710,"line_end":710,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46328,"byte_end":46335,"line_start":748,"line_end":748,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::ParallelIterator::inspect","value":"fn <OP> (self, inspect_op: OP) -> Inspect<Self, OP>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `inspect_op` to a reference to each item of this iterator,\n producing a new iterator passing through the original items.  This is\n often useful for debugging to see what's happening in iterator stages.","sig":null,"attributes":[{"value":"/ Applies `inspect_op` to a reference to each item of this iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45292,"byte_end":45362,"line_start":719,"line_end":719,"column_start":5,"column_end":75}},{"value":"/ producing a new iterator passing through the original items.  This is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45367,"byte_end":45440,"line_start":720,"line_end":720,"column_start":5,"column_end":78}},{"value":"/ often useful for debugging to see what's happening in iterator stages.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45445,"byte_end":45519,"line_start":721,"line_end":721,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45524,"byte_end":45527,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45532,"byte_end":45546,"line_start":723,"line_end":723,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45551,"byte_end":45554,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45559,"byte_end":45566,"line_start":725,"line_end":725,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45571,"byte_end":45597,"line_start":726,"line_end":726,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45602,"byte_end":45605,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 4, 2, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45610,"byte_end":45635,"line_start":728,"line_end":728,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45640,"byte_end":45643,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ // this iterator sequence is complex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45648,"byte_end":45689,"line_start":730,"line_end":730,"column_start":5,"column_end":46}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45694,"byte_end":45720,"line_start":731,"line_end":731,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45725,"byte_end":45750,"line_start":732,"line_end":732,"column_start":5,"column_end":30}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45755,"byte_end":45795,"line_start":733,"line_end":733,"column_start":5,"column_end":45}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45800,"byte_end":45848,"line_start":734,"line_end":734,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45853,"byte_end":45856,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45861,"byte_end":45885,"line_start":736,"line_end":736,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45890,"byte_end":45893,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ // let's add some inspect() calls to investigate what's happening","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45898,"byte_end":45967,"line_start":738,"line_end":738,"column_start":5,"column_end":74}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":45972,"byte_end":45998,"line_start":739,"line_end":739,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46003,"byte_end":46028,"line_start":740,"line_end":740,"column_start":5,"column_end":30}},{"value":"/             .inspect(|x| println!(\"about to filter: {}\", x))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46033,"byte_end":46097,"line_start":741,"line_end":741,"column_start":5,"column_end":69}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46102,"byte_end":46142,"line_start":742,"line_end":742,"column_start":5,"column_end":45}},{"value":"/             .inspect(|x| println!(\"made it through filter: {}\", x))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46147,"byte_end":46218,"line_start":743,"line_end":743,"column_start":5,"column_end":76}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46223,"byte_end":46271,"line_start":744,"line_end":744,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46276,"byte_end":46279,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46284,"byte_end":46308,"line_start":746,"line_end":746,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46313,"byte_end":46320,"line_start":747,"line_end":747,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3773},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46844,"byte_end":46850,"line_start":768,"line_end":768,"column_start":8,"column_end":14},"name":"update","qualname":"::iter::ParallelIterator::update","value":"fn <F> (self, update_op: F) -> Update<Self, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Mutates each item of this iterator before yielding it.","sig":null,"attributes":[{"value":"/ Mutates each item of this iterator before yielding it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46492,"byte_end":46550,"line_start":755,"line_end":755,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46555,"byte_end":46558,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46563,"byte_end":46577,"line_start":757,"line_end":757,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46582,"byte_end":46585,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46590,"byte_end":46597,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46602,"byte_end":46628,"line_start":760,"line_end":760,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46633,"byte_end":46636,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..5).into_par_iter().update(|x| {*x *= 2;});","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46641,"byte_end":46706,"line_start":762,"line_end":762,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46711,"byte_end":46714,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46719,"byte_end":46764,"line_start":764,"line_end":764,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46769,"byte_end":46772,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46777,"byte_end":46824,"line_start":766,"line_end":766,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":46829,"byte_end":46836,"line_start":767,"line_end":767,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47445,"byte_end":47451,"line_start":789,"line_end":789,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::ParallelIterator::filter","value":"fn <P> (self, filter_op: P) -> Filter<Self, P>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator, producing a new\n iterator with only the items that gave `true` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator, producing a new","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47003,"byte_end":47073,"line_start":775,"line_end":775,"column_start":5,"column_end":75}},{"value":"/ iterator with only the items that gave `true` results.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47078,"byte_end":47136,"line_start":776,"line_end":776,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47141,"byte_end":47144,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47149,"byte_end":47163,"line_start":778,"line_end":778,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47168,"byte_end":47171,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47176,"byte_end":47183,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47188,"byte_end":47214,"line_start":781,"line_end":781,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47219,"byte_end":47222,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter().filter(|x| x % 2 == 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47227,"byte_end":47297,"line_start":783,"line_end":783,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47302,"byte_end":47305,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47310,"byte_end":47360,"line_start":785,"line_end":785,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47365,"byte_end":47368,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47373,"byte_end":47425,"line_start":787,"line_end":787,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47430,"byte_end":47437,"line_start":788,"line_end":788,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3777},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48245,"byte_end":48255,"line_start":814,"line_end":814,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::ParallelIterator::filter_map","value":"fn <P, R> (self, filter_op: P) -> FilterMap<Self, P>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator to get an `Option`,\n producing a new iterator with only the items from `Some` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator to get an `Option`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47608,"byte_end":47681,"line_start":796,"line_end":796,"column_start":5,"column_end":78}},{"value":"/ producing a new iterator with only the items from `Some` results.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47686,"byte_end":47755,"line_start":797,"line_end":797,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47760,"byte_end":47763,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47768,"byte_end":47782,"line_start":799,"line_end":799,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47787,"byte_end":47790,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47795,"byte_end":47802,"line_start":801,"line_end":801,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47807,"byte_end":47833,"line_start":802,"line_end":802,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47838,"byte_end":47841,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47846,"byte_end":47892,"line_start":804,"line_end":804,"column_start":5,"column_end":51}},{"value":"/                         .filter_map(|x| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47897,"byte_end":47942,"line_start":805,"line_end":805,"column_start":5,"column_end":50}},{"value":"/                             if x % 2 == 0 { Some(x * 3) }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":47947,"byte_end":48008,"line_start":806,"line_end":806,"column_start":5,"column_end":66}},{"value":"/                             else { None }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48013,"byte_end":48058,"line_start":807,"line_end":807,"column_start":5,"column_end":50}},{"value":"/                         });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48063,"byte_end":48094,"line_start":808,"line_end":808,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48099,"byte_end":48102,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48107,"byte_end":48157,"line_start":810,"line_end":810,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48162,"byte_end":48165,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 6, 12, 18, 24]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48170,"byte_end":48225,"line_start":812,"line_end":812,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48230,"byte_end":48237,"line_start":813,"line_end":813,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3780},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48939,"byte_end":48947,"line_start":838,"line_end":838,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::ParallelIterator::flat_map","value":"fn <F, PI> (self, map_op: F) -> FlatMap<Self, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested iterators,\n producing a new iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested iterators,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48442,"byte_end":48517,"line_start":822,"line_end":822,"column_start":5,"column_end":80}},{"value":"/ producing a new iterator that flattens these back into one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48522,"byte_end":48585,"line_start":823,"line_end":823,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48590,"byte_end":48593,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48598,"byte_end":48612,"line_start":825,"line_end":825,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48617,"byte_end":48620,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48625,"byte_end":48632,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48637,"byte_end":48663,"line_start":828,"line_end":828,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48668,"byte_end":48671,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48676,"byte_end":48721,"line_start":830,"line_end":830,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48726,"byte_end":48729,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().cloned().flat_map(|a| a.to_vec());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48734,"byte_end":48800,"line_start":832,"line_end":832,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48805,"byte_end":48808,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48813,"byte_end":48854,"line_start":834,"line_end":834,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48859,"byte_end":48862,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48867,"byte_end":48919,"line_start":836,"line_end":836,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":48924,"byte_end":48931,"line_start":837,"line_end":837,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3783},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49481,"byte_end":49488,"line_start":858,"line_end":858,"column_start":8,"column_end":15},"name":"flatten","qualname":"::iter::ParallelIterator::flatten","value":"fn (self) -> Flatten<Self>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" An adaptor that flattens iterable `Item`s into one large iterator","sig":null,"attributes":[{"value":"/ An adaptor that flattens iterable `Item`s into one large iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49135,"byte_end":49204,"line_start":846,"line_end":846,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49209,"byte_end":49212,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49217,"byte_end":49231,"line_start":848,"line_end":848,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49236,"byte_end":49239,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49244,"byte_end":49251,"line_start":850,"line_end":850,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49256,"byte_end":49282,"line_start":851,"line_end":851,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49287,"byte_end":49290,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49295,"byte_end":49349,"line_start":853,"line_end":853,"column_start":5,"column_end":59}},{"value":"/ let y: Vec<_> = x.into_par_iter().flatten().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49354,"byte_end":49412,"line_start":854,"line_end":854,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49417,"byte_end":49420,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49425,"byte_end":49461,"line_start":856,"line_end":856,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49466,"byte_end":49473,"line_start":857,"line_end":857,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51173,"byte_end":51179,"line_start":895,"line_end":895,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::ParallelIterator::reduce","value":"fn <OP, ID> (self, identity: ID, op: OP) -> Self::Item","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n The argument `identity` should be a closure that can produce\n \"identity\" value which may be inserted into the sequence as\n needed to create opportunities for parallel execution. So, for\n example, if you are doing a summation, then `identity()` ought\n to produce something that represents the zero for your type\n (but consider just calling `sum()` in that case).","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49608,"byte_end":49671,"line_start":865,"line_end":865,"column_start":5,"column_end":68}},{"value":"/ The argument `identity` should be a closure that can produce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49676,"byte_end":49740,"line_start":866,"line_end":866,"column_start":5,"column_end":69}},{"value":"/ \"identity\" value which may be inserted into the sequence as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49745,"byte_end":49808,"line_start":867,"line_end":867,"column_start":5,"column_end":68}},{"value":"/ needed to create opportunities for parallel execution. So, for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49813,"byte_end":49879,"line_start":868,"line_end":868,"column_start":5,"column_end":71}},{"value":"/ example, if you are doing a summation, then `identity()` ought","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49884,"byte_end":49950,"line_start":869,"line_end":869,"column_start":5,"column_end":71}},{"value":"/ to produce something that represents the zero for your type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":49955,"byte_end":50018,"line_start":870,"line_end":870,"column_start":5,"column_end":68}},{"value":"/ (but consider just calling `sum()` in that case).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50023,"byte_end":50076,"line_start":871,"line_end":871,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50081,"byte_end":50084,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50089,"byte_end":50103,"line_start":873,"line_end":873,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50108,"byte_end":50111,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50116,"byte_end":50123,"line_start":875,"line_end":875,"column_start":5,"column_end":12}},{"value":"/ // Iterate over a sequence of pairs `(x0, y0), ..., (xN, yN)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50128,"byte_end":50193,"line_start":876,"line_end":876,"column_start":5,"column_end":70}},{"value":"/ // and use reduce to compute one pair `(x0 + ... + xN, y0 + ... + yN)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50198,"byte_end":50272,"line_start":877,"line_end":877,"column_start":5,"column_end":79}},{"value":"/ // where the first/second elements are summed separately.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50277,"byte_end":50338,"line_start":878,"line_end":878,"column_start":5,"column_end":66}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50343,"byte_end":50369,"line_start":879,"line_end":879,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50374,"byte_end":50422,"line_start":880,"line_end":880,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50427,"byte_end":50490,"line_start":881,"line_end":881,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50495,"byte_end":50557,"line_start":882,"line_end":882,"column_start":5,"column_end":67}},{"value":"/            .reduce(|| (0, 0), // the \"identity\" is 0 in both columns","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50562,"byte_end":50634,"line_start":883,"line_end":883,"column_start":5,"column_end":77}},{"value":"/                    |a, b| (a.0 + b.0, a.1 + b.1));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50639,"byte_end":50693,"line_start":884,"line_end":884,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50698,"byte_end":50752,"line_start":885,"line_end":885,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50757,"byte_end":50764,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50769,"byte_end":50772,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50777,"byte_end":50841,"line_start":888,"line_end":888,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50846,"byte_end":50910,"line_start":889,"line_end":889,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50915,"byte_end":50981,"line_start":890,"line_end":890,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic. And of course `identity()` should","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":50986,"byte_end":51050,"line_start":891,"line_end":891,"column_start":5,"column_end":69}},{"value":"/ produce a true identity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51055,"byte_end":51083,"line_start":892,"line_end":892,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51088,"byte_end":51091,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51096,"byte_end":51165,"line_start":894,"line_end":894,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52520,"byte_end":52531,"line_start":929,"line_end":929,"column_start":8,"column_end":19},"name":"reduce_with","qualname":"::iter::ParallelIterator::reduce_with","value":"fn <OP> (self, op: OP) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n If the iterator is empty, `None` is returned; otherwise,\n `Some` is returned.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51414,"byte_end":51477,"line_start":903,"line_end":903,"column_start":5,"column_end":68}},{"value":"/ If the iterator is empty, `None` is returned; otherwise,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51482,"byte_end":51542,"line_start":904,"line_end":904,"column_start":5,"column_end":65}},{"value":"/ `Some` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51547,"byte_end":51570,"line_start":905,"line_end":905,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51575,"byte_end":51578,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ This version of `reduce` is simple but somewhat less","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51583,"byte_end":51639,"line_start":907,"line_end":907,"column_start":5,"column_end":61}},{"value":"/ efficient. If possible, it is better to call `reduce()`, which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51644,"byte_end":51710,"line_start":908,"line_end":908,"column_start":5,"column_end":71}},{"value":"/ requires an identity element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51715,"byte_end":51748,"line_start":909,"line_end":909,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51753,"byte_end":51756,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51761,"byte_end":51775,"line_start":911,"line_end":911,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51780,"byte_end":51783,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51788,"byte_end":51795,"line_start":913,"line_end":913,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51800,"byte_end":51826,"line_start":914,"line_end":914,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51831,"byte_end":51879,"line_start":915,"line_end":915,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51884,"byte_end":51947,"line_start":916,"line_end":916,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":51952,"byte_end":52014,"line_start":917,"line_end":917,"column_start":5,"column_end":67}},{"value":"/            .reduce_with(|a, b| (a.0 + b.0, a.1 + b.1))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52019,"byte_end":52077,"line_start":918,"line_end":918,"column_start":5,"column_end":63}},{"value":"/            .unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52082,"byte_end":52107,"line_start":919,"line_end":919,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52112,"byte_end":52166,"line_start":920,"line_end":920,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52171,"byte_end":52178,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52183,"byte_end":52186,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52191,"byte_end":52255,"line_start":923,"line_end":923,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52260,"byte_end":52324,"line_start":924,"line_end":924,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52329,"byte_end":52395,"line_start":925,"line_end":925,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52400,"byte_end":52430,"line_start":926,"line_end":926,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52435,"byte_end":52438,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":52443,"byte_end":52512,"line_start":928,"line_end":928,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3799},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54715,"byte_end":54725,"line_start":983,"line_end":983,"column_start":8,"column_end":18},"name":"try_reduce","qualname":"::iter::ParallelIterator::try_reduce","value":"fn <T, OP, ID> (self, identity: ID, op: OP) -> Self::Item","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.\n The `identity` argument is used the same way as in [`reduce()`].","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53326,"byte_end":53400,"line_start":952,"line_end":952,"column_start":5,"column_end":79}},{"value":"/ The `identity` argument is used the same way as in [`reduce()`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53405,"byte_end":53473,"line_start":953,"line_end":953,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53478,"byte_end":53481,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ [`reduce()`]: #method.reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53486,"byte_end":53518,"line_start":955,"line_end":955,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53523,"byte_end":53526,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ If a `Result::Err` or `Option::None` item is found, or if `op` reduces","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53531,"byte_end":53605,"line_start":957,"line_end":957,"column_start":5,"column_end":79}},{"value":"/ to one, we will attempt to stop processing the rest of the items in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53610,"byte_end":53685,"line_start":958,"line_end":958,"column_start":5,"column_end":80}},{"value":"/ iterator as soon as possible, and we will return that terminating value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53690,"byte_end":53766,"line_start":959,"line_end":959,"column_start":5,"column_end":81}},{"value":"/ Otherwise, we will return the final reduced `Result::Ok(T)` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53771,"byte_end":53837,"line_start":960,"line_end":960,"column_start":5,"column_end":71}},{"value":"/ `Option::Some(T)`.  If there are multiple errors in parallel, it is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53842,"byte_end":53917,"line_start":961,"line_end":961,"column_start":5,"column_end":80}},{"value":"/ specified which will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53922,"byte_end":53959,"line_start":962,"line_end":962,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53964,"byte_end":53967,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53972,"byte_end":53986,"line_start":964,"line_end":964,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53991,"byte_end":53994,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":53999,"byte_end":54006,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54011,"byte_end":54037,"line_start":967,"line_end":967,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54042,"byte_end":54045,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ // Compute the sum of squares, being careful about overflow.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54050,"byte_end":54114,"line_start":969,"line_end":969,"column_start":5,"column_end":69}},{"value":"/ fn sum_squares<I: IntoParallelIterator<Item = i32>>(iter: I) -> Option<i32> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54119,"byte_end":54200,"line_start":970,"line_end":970,"column_start":5,"column_end":86}},{"value":"/     iter.into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54205,"byte_end":54233,"line_start":971,"line_end":971,"column_start":5,"column_end":33}},{"value":"/         .map(|i| i.checked_mul(i))            // square each item,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54238,"byte_end":54308,"line_start":972,"line_end":972,"column_start":5,"column_end":75}},{"value":"/         .try_reduce(|| 0, i32::checked_add)   // and add them up!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54313,"byte_end":54382,"line_start":973,"line_end":973,"column_start":5,"column_end":74}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54387,"byte_end":54392,"line_start":974,"line_end":974,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(sum_squares(0..5), Some(0 + 1 + 4 + 9 + 16));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54397,"byte_end":54457,"line_start":975,"line_end":975,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54462,"byte_end":54465,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ // The sum might overflow","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54470,"byte_end":54499,"line_start":977,"line_end":977,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(sum_squares(0..10_000), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54504,"byte_end":54549,"line_start":978,"line_end":978,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54554,"byte_end":54557,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ // Or the squares might overflow before it even reaches `try_reduce`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54562,"byte_end":54634,"line_start":980,"line_end":980,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(sum_squares(1_000_000..1_000_001), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54639,"byte_end":54695,"line_start":981,"line_end":981,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54700,"byte_end":54707,"line_start":982,"line_end":982,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56352,"byte_end":56367,"line_start":1027,"line_end":1027,"column_start":8,"column_end":23},"name":"try_reduce_with","qualname":"::iter::ParallelIterator::try_reduce_with","value":"fn <T, OP> (self, op: OP) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":54977,"byte_end":55051,"line_start":992,"line_end":992,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55056,"byte_end":55059,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ Like [`reduce_with()`], if the iterator is empty, `None` is returned;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55064,"byte_end":55137,"line_start":994,"line_end":994,"column_start":5,"column_end":78}},{"value":"/ otherwise, `Some` is returned.  Beyond that, it behaves like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55142,"byte_end":55206,"line_start":995,"line_end":995,"column_start":5,"column_end":69}},{"value":"/ [`try_reduce()`] for handling `Err`/`None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55211,"byte_end":55258,"line_start":996,"line_end":996,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55263,"byte_end":55266,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ [`reduce_with()`]: #method.reduce_with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55271,"byte_end":55313,"line_start":998,"line_end":998,"column_start":5,"column_end":47}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55318,"byte_end":55358,"line_start":999,"line_end":999,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55363,"byte_end":55366,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ For instance, with `Option` items, the return value may be:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55371,"byte_end":55434,"line_start":1001,"line_end":1001,"column_start":5,"column_end":68}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55439,"byte_end":55475,"line_start":1002,"line_end":1002,"column_start":5,"column_end":41}},{"value":"/ - `Some(None)`, we stopped after encountering `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55480,"byte_end":55537,"line_start":1003,"line_end":1003,"column_start":5,"column_end":62}},{"value":"/ - `Some(Some(x))`, the entire iterator reduced to `x`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55542,"byte_end":55600,"line_start":1004,"line_end":1004,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55605,"byte_end":55608,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ With `Result` items, the nesting is more obvious:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55613,"byte_end":55666,"line_start":1006,"line_end":1006,"column_start":5,"column_end":58}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55671,"byte_end":55707,"line_start":1007,"line_end":1007,"column_start":5,"column_end":41}},{"value":"/ - `Some(Err(e))`, we stopped after encountering an error `e`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55712,"byte_end":55777,"line_start":1008,"line_end":1008,"column_start":5,"column_end":70}},{"value":"/ - `Some(Ok(x))`, the entire iterator reduced to `x`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55782,"byte_end":55838,"line_start":1009,"line_end":1009,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55843,"byte_end":55846,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55851,"byte_end":55865,"line_start":1011,"line_end":1011,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55870,"byte_end":55873,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55878,"byte_end":55885,"line_start":1013,"line_end":1013,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55890,"byte_end":55916,"line_start":1014,"line_end":1014,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55921,"byte_end":55924,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ let files = [\"/dev/null\", \"/does/not/exist\"];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55929,"byte_end":55978,"line_start":1016,"line_end":1016,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55983,"byte_end":55986,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ // Find the biggest file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":55991,"byte_end":56019,"line_start":1018,"line_end":1018,"column_start":5,"column_end":33}},{"value":"/ files.into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56024,"byte_end":56049,"line_start":1019,"line_end":1019,"column_start":5,"column_end":30}},{"value":"/     .map(|path| std::fs::metadata(path).map(|m| (path, m.len())))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56054,"byte_end":56123,"line_start":1020,"line_end":1020,"column_start":5,"column_end":74}},{"value":"/     .try_reduce_with(|a, b| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56128,"byte_end":56161,"line_start":1021,"line_end":1021,"column_start":5,"column_end":38}},{"value":"/         Ok(if a.1 >= b.1 { a } else { b })","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56166,"byte_end":56212,"line_start":1022,"line_end":1022,"column_start":5,"column_end":51}},{"value":"/     })","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56217,"byte_end":56227,"line_start":1023,"line_end":1023,"column_start":5,"column_end":15}},{"value":"/     .expect(\"Some value, since the iterator is not empty\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56232,"byte_end":56294,"line_start":1024,"line_end":1024,"column_start":5,"column_end":67}},{"value":"/     .expect_err(\"not found\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56299,"byte_end":56332,"line_start":1025,"line_end":1025,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56337,"byte_end":56344,"line_start":1026,"line_end":1026,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3806},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62145,"byte_end":62149,"line_start":1168,"line_end":1168,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::ParallelIterator::fold","value":"fn <T, ID, F> (self, identity: ID, fold_op: F) -> Fold<Self, ID, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Parallel fold is similar to sequential fold except that the\n sequence of items may be subdivided before it is\n folded. Consider a list of numbers like `22 3 77 89 46`. If\n you used sequential fold to add them (`fold(0, |a,b| a+b)`,\n you would wind up first adding 0 + 22, then 22 + 3, then 25 +\n 77, and so forth. The **parallel fold** works similarly except\n that it first breaks up your list into sublists, and hence\n instead of yielding up a single sum at the end, it yields up\n multiple sums. The number of results is nondeterministic, as\n is the point where the breaks occur.","sig":null,"attributes":[{"value":"/ Parallel fold is similar to sequential fold except that the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56572,"byte_end":56635,"line_start":1035,"line_end":1035,"column_start":5,"column_end":68}},{"value":"/ sequence of items may be subdivided before it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56640,"byte_end":56692,"line_start":1036,"line_end":1036,"column_start":5,"column_end":57}},{"value":"/ folded. Consider a list of numbers like `22 3 77 89 46`. If","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56697,"byte_end":56760,"line_start":1037,"line_end":1037,"column_start":5,"column_end":68}},{"value":"/ you used sequential fold to add them (`fold(0, |a,b| a+b)`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56765,"byte_end":56828,"line_start":1038,"line_end":1038,"column_start":5,"column_end":68}},{"value":"/ you would wind up first adding 0 + 22, then 22 + 3, then 25 +","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56833,"byte_end":56898,"line_start":1039,"line_end":1039,"column_start":5,"column_end":70}},{"value":"/ 77, and so forth. The **parallel fold** works similarly except","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56903,"byte_end":56969,"line_start":1040,"line_end":1040,"column_start":5,"column_end":71}},{"value":"/ that it first breaks up your list into sublists, and hence","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":56974,"byte_end":57036,"line_start":1041,"line_end":1041,"column_start":5,"column_end":67}},{"value":"/ instead of yielding up a single sum at the end, it yields up","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57041,"byte_end":57105,"line_start":1042,"line_end":1042,"column_start":5,"column_end":69}},{"value":"/ multiple sums. The number of results is nondeterministic, as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57110,"byte_end":57174,"line_start":1043,"line_end":1043,"column_start":5,"column_end":69}},{"value":"/ is the point where the breaks occur.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57179,"byte_end":57219,"line_start":1044,"line_end":1044,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57224,"byte_end":57227,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ So if did the same parallel fold (`fold(0, |a,b| a+b)`) on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57232,"byte_end":57294,"line_start":1046,"line_end":1046,"column_start":5,"column_end":67}},{"value":"/ our example list, we might wind up with a sequence of two numbers,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57299,"byte_end":57369,"line_start":1047,"line_end":1047,"column_start":5,"column_end":75}},{"value":"/ like so:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57374,"byte_end":57386,"line_start":1048,"line_end":1048,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57391,"byte_end":57394,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57399,"byte_end":57413,"line_start":1050,"line_end":1050,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57418,"byte_end":57435,"line_start":1051,"line_end":1051,"column_start":5,"column_end":22}},{"value":"/       |     |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57440,"byte_end":57457,"line_start":1052,"line_end":1052,"column_start":5,"column_end":22}},{"value":"/     102   135","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57462,"byte_end":57479,"line_start":1053,"line_end":1053,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57484,"byte_end":57491,"line_start":1054,"line_end":1054,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57496,"byte_end":57499,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ Or perhaps these three numbers:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57504,"byte_end":57539,"line_start":1056,"line_end":1056,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57544,"byte_end":57547,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57552,"byte_end":57566,"line_start":1058,"line_end":1058,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57571,"byte_end":57588,"line_start":1059,"line_end":1059,"column_start":5,"column_end":22}},{"value":"/       |  |  |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57593,"byte_end":57610,"line_start":1060,"line_end":1060,"column_start":5,"column_end":22}},{"value":"/     102 89 46","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57615,"byte_end":57632,"line_start":1061,"line_end":1061,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57637,"byte_end":57644,"line_start":1062,"line_end":1062,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57649,"byte_end":57652,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ In general, Rayon will attempt to find good breaking points","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57657,"byte_end":57720,"line_start":1064,"line_end":1064,"column_start":5,"column_end":68}},{"value":"/ that keep all of your cores busy.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57725,"byte_end":57762,"line_start":1065,"line_end":1065,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57767,"byte_end":57770,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ ### Fold versus reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57775,"byte_end":57801,"line_start":1067,"line_end":1067,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57806,"byte_end":57809,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ The `fold()` and `reduce()` methods each take an identity element","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57814,"byte_end":57883,"line_start":1069,"line_end":1069,"column_start":5,"column_end":74}},{"value":"/ and a combining function, but they operate rather differently.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57888,"byte_end":57954,"line_start":1070,"line_end":1070,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57959,"byte_end":57962,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ `reduce()` requires that the identity function has the same","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":57967,"byte_end":58030,"line_start":1072,"line_end":1072,"column_start":5,"column_end":68}},{"value":"/ type as the things you are iterating over, and it fully","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58035,"byte_end":58094,"line_start":1073,"line_end":1073,"column_start":5,"column_end":64}},{"value":"/ reduces the list of items into a single item. So, for example,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58099,"byte_end":58165,"line_start":1074,"line_end":1074,"column_start":5,"column_end":71}},{"value":"/ imagine we are iterating over a list of bytes `bytes: [128_u8,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58170,"byte_end":58236,"line_start":1075,"line_end":1075,"column_start":5,"column_end":71}},{"value":"/ 64_u8, 64_u8]`. If we used `bytes.reduce(|| 0_u8, |a: u8, b:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58241,"byte_end":58305,"line_start":1076,"line_end":1076,"column_start":5,"column_end":69}},{"value":"/ u8| a + b)`, we would get an overflow. This is because `0`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58310,"byte_end":58373,"line_start":1077,"line_end":1077,"column_start":5,"column_end":68}},{"value":"/ `a`, and `b` here are all bytes, just like the numbers in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58378,"byte_end":58443,"line_start":1078,"line_end":1078,"column_start":5,"column_end":70}},{"value":"/ list (I wrote the types explicitly above, but those are the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58448,"byte_end":58511,"line_start":1079,"line_end":1079,"column_start":5,"column_end":68}},{"value":"/ only types you can use). To avoid the overflow, we would need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58516,"byte_end":58581,"line_start":1080,"line_end":1080,"column_start":5,"column_end":70}},{"value":"/ to do something like `bytes.map(|b| b as u32).reduce(|| 0, |a,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58586,"byte_end":58652,"line_start":1081,"line_end":1081,"column_start":5,"column_end":71}},{"value":"/ b| a + b)`, in which case our result would be `256`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58657,"byte_end":58713,"line_start":1082,"line_end":1082,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58718,"byte_end":58721,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ In contrast, with `fold()`, the identity function does not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58726,"byte_end":58788,"line_start":1084,"line_end":1084,"column_start":5,"column_end":67}},{"value":"/ have to have the same type as the things you are iterating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58793,"byte_end":58855,"line_start":1085,"line_end":1085,"column_start":5,"column_end":67}},{"value":"/ over, and you potentially get back many results. So, if we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58860,"byte_end":58922,"line_start":1086,"line_end":1086,"column_start":5,"column_end":67}},{"value":"/ continue with the `bytes` example from the previous paragraph,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58927,"byte_end":58993,"line_start":1087,"line_end":1087,"column_start":5,"column_end":71}},{"value":"/ we could do `bytes.fold(|| 0_u32, |a, b| a + (b as u32))` to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":58998,"byte_end":59062,"line_start":1088,"line_end":1088,"column_start":5,"column_end":69}},{"value":"/ convert our bytes into `u32`. And of course we might not get","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59067,"byte_end":59131,"line_start":1089,"line_end":1089,"column_start":5,"column_end":69}},{"value":"/ back a single sum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59136,"byte_end":59158,"line_start":1090,"line_end":1090,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59163,"byte_end":59166,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ There is a more subtle distinction as well, though it's","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59171,"byte_end":59230,"line_start":1092,"line_end":1092,"column_start":5,"column_end":64}},{"value":"/ actually implied by the above points. When you use `reduce()`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59235,"byte_end":59301,"line_start":1093,"line_end":1093,"column_start":5,"column_end":71}},{"value":"/ your reduction function is sometimes called with values that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59306,"byte_end":59370,"line_start":1094,"line_end":1094,"column_start":5,"column_end":69}},{"value":"/ were never part of your original parallel iterator (for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59375,"byte_end":59434,"line_start":1095,"line_end":1095,"column_start":5,"column_end":64}},{"value":"/ example, both the left and right might be a partial sum). With","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59439,"byte_end":59505,"line_start":1096,"line_end":1096,"column_start":5,"column_end":71}},{"value":"/ `fold()`, in contrast, the left value in the fold function is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59510,"byte_end":59575,"line_start":1097,"line_end":1097,"column_start":5,"column_end":70}},{"value":"/ always the accumulator, and the right value is always from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59580,"byte_end":59642,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/ your original sequence.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59647,"byte_end":59674,"line_start":1099,"line_end":1099,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59679,"byte_end":59682,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ ### Fold vs Map/Reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59687,"byte_end":59713,"line_start":1101,"line_end":1101,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59718,"byte_end":59721,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ Fold makes sense if you have some operation where it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59726,"byte_end":59785,"line_start":1103,"line_end":1103,"column_start":5,"column_end":64}},{"value":"/ cheaper to create groups of elements at a time. For example,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59790,"byte_end":59854,"line_start":1104,"line_end":1104,"column_start":5,"column_end":69}},{"value":"/ imagine collecting characters into a string. If you were going","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59859,"byte_end":59925,"line_start":1105,"line_end":1105,"column_start":5,"column_end":71}},{"value":"/ to use map/reduce, you might try this:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59930,"byte_end":59972,"line_start":1106,"line_end":1106,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59977,"byte_end":59980,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59985,"byte_end":59992,"line_start":1108,"line_end":1108,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":59997,"byte_end":60023,"line_start":1109,"line_end":1109,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60028,"byte_end":60031,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60036,"byte_end":60047,"line_start":1111,"line_end":1111,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60052,"byte_end":60085,"line_start":1112,"line_end":1112,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60090,"byte_end":60109,"line_start":1113,"line_end":1113,"column_start":5,"column_end":24}},{"value":"/     .map(|c: &char| format!(\"{}\", c))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60114,"byte_end":60155,"line_start":1114,"line_end":1114,"column_start":5,"column_end":46}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60160,"byte_end":60193,"line_start":1115,"line_end":1115,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60198,"byte_end":60264,"line_start":1116,"line_end":1116,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60269,"byte_end":60272,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60277,"byte_end":60304,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60309,"byte_end":60316,"line_start":1119,"line_end":1119,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60321,"byte_end":60324,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ Because reduce produces the same type of element as its input,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60329,"byte_end":60395,"line_start":1121,"line_end":1121,"column_start":5,"column_end":71}},{"value":"/ you have to first map each character into a string, and then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60400,"byte_end":60464,"line_start":1122,"line_end":1122,"column_start":5,"column_end":69}},{"value":"/ you can reduce them. This means we create one string per","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60469,"byte_end":60529,"line_start":1123,"line_end":1123,"column_start":5,"column_end":65}},{"value":"/ element in our iterator -- not so great. Using `fold`, we can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60534,"byte_end":60599,"line_start":1124,"line_end":1124,"column_start":5,"column_end":70}},{"value":"/ do this instead:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60604,"byte_end":60624,"line_start":1125,"line_end":1125,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60629,"byte_end":60632,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60637,"byte_end":60644,"line_start":1127,"line_end":1127,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60649,"byte_end":60675,"line_start":1128,"line_end":1128,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60680,"byte_end":60683,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60688,"byte_end":60699,"line_start":1130,"line_end":1130,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60704,"byte_end":60737,"line_start":1131,"line_end":1131,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60742,"byte_end":60761,"line_start":1132,"line_end":1132,"column_start":5,"column_end":24}},{"value":"/     .fold(|| String::new(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60766,"byte_end":60797,"line_start":1133,"line_end":1133,"column_start":5,"column_end":36}},{"value":"/             |mut s: String, c: &char| { s.push(*c); s })","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60802,"byte_end":60862,"line_start":1134,"line_end":1134,"column_start":5,"column_end":65}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60867,"byte_end":60900,"line_start":1135,"line_end":1135,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60905,"byte_end":60971,"line_start":1136,"line_end":1136,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60976,"byte_end":60979,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":60984,"byte_end":61011,"line_start":1138,"line_end":1138,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61016,"byte_end":61023,"line_start":1139,"line_end":1139,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61028,"byte_end":61031,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ Now `fold` will process groups of our characters at a time,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61036,"byte_end":61099,"line_start":1141,"line_end":1141,"column_start":5,"column_end":68}},{"value":"/ and we only make one string per group. We should wind up with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61104,"byte_end":61169,"line_start":1142,"line_end":1142,"column_start":5,"column_end":70}},{"value":"/ some small-ish number of strings roughly proportional to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61174,"byte_end":61238,"line_start":1143,"line_end":1143,"column_start":5,"column_end":69}},{"value":"/ number of CPUs you have (it will ultimately depend on how busy","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61243,"byte_end":61309,"line_start":1144,"line_end":1144,"column_start":5,"column_end":71}},{"value":"/ your processors are). Note that we still need to do a reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61314,"byte_end":61378,"line_start":1145,"line_end":1145,"column_start":5,"column_end":69}},{"value":"/ afterwards to combine those groups of strings into a single","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61383,"byte_end":61446,"line_start":1146,"line_end":1146,"column_start":5,"column_end":68}},{"value":"/ string.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61451,"byte_end":61462,"line_start":1147,"line_end":1147,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61467,"byte_end":61470,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ You could use a similar trick to save partial results (e.g., a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61475,"byte_end":61541,"line_start":1149,"line_end":1149,"column_start":5,"column_end":71}},{"value":"/ cache) or something similar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61546,"byte_end":61578,"line_start":1150,"line_end":1150,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61583,"byte_end":61586,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ ### Combining fold with other operations","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61591,"byte_end":61635,"line_start":1152,"line_end":1152,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61640,"byte_end":61643,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ You can combine `fold` with `reduce` if you want to produce a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61648,"byte_end":61713,"line_start":1154,"line_end":1154,"column_start":5,"column_end":70}},{"value":"/ single value. This is then roughly equivalent to a map/reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61718,"byte_end":61783,"line_start":1155,"line_end":1155,"column_start":5,"column_end":70}},{"value":"/ combination in effect:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61788,"byte_end":61814,"line_start":1156,"line_end":1156,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61819,"byte_end":61822,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61827,"byte_end":61834,"line_start":1158,"line_end":1158,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61839,"byte_end":61865,"line_start":1159,"line_end":1159,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61870,"byte_end":61873,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61878,"byte_end":61903,"line_start":1161,"line_end":1161,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61908,"byte_end":61943,"line_start":1162,"line_end":1162,"column_start":5,"column_end":40}},{"value":"/                .fold(|| 0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":61948,"byte_end":62014,"line_start":1163,"line_end":1163,"column_start":5,"column_end":71}},{"value":"/                .sum::<u32>();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62019,"byte_end":62052,"line_start":1164,"line_end":1164,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62057,"byte_end":62060,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62065,"byte_end":62125,"line_start":1166,"line_end":1166,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62130,"byte_end":62137,"line_start":1167,"line_end":1167,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63074,"byte_end":63083,"line_start":1196,"line_end":1196,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::ParallelIterator::fold_with","value":"fn <F, T> (self, init: T, fold_op: F) -> FoldWith<Self, T, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `fold_op` to the given `init` value with each item of this\n iterator, finally producing the value for further use.","sig":null,"attributes":[{"value":"/ Applies `fold_op` to the given `init` value with each item of this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62386,"byte_end":62456,"line_start":1177,"line_end":1177,"column_start":5,"column_end":75}},{"value":"/ iterator, finally producing the value for further use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62461,"byte_end":62519,"line_start":1178,"line_end":1178,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62524,"byte_end":62527,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ This works essentially like `fold(|| init.clone(), fold_op)`, except","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62532,"byte_end":62604,"line_start":1180,"line_end":1180,"column_start":5,"column_end":77}},{"value":"/ it doesn't require the `init` type to be `Sync`, nor any other form","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62609,"byte_end":62680,"line_start":1181,"line_end":1181,"column_start":5,"column_end":76}},{"value":"/ of added synchronization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62685,"byte_end":62714,"line_start":1182,"line_end":1182,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62719,"byte_end":62722,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62727,"byte_end":62741,"line_start":1184,"line_end":1184,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62746,"byte_end":62749,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62754,"byte_end":62761,"line_start":1186,"line_end":1186,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62766,"byte_end":62792,"line_start":1187,"line_end":1187,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62797,"byte_end":62800,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62805,"byte_end":62830,"line_start":1189,"line_end":1189,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62835,"byte_end":62870,"line_start":1190,"line_end":1190,"column_start":5,"column_end":40}},{"value":"/                .fold_with(0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62875,"byte_end":62943,"line_start":1191,"line_end":1191,"column_start":5,"column_end":73}},{"value":"/                .sum::<u32>();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62948,"byte_end":62981,"line_start":1192,"line_end":1192,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62986,"byte_end":62989,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":62994,"byte_end":63054,"line_start":1194,"line_end":1194,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63059,"byte_end":63066,"line_start":1195,"line_end":1195,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64216,"byte_end":64224,"line_start":1229,"line_end":1229,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::iter::ParallelIterator::try_fold","value":"fn <T, R, ID, F> (self, identity: ID, fold_op: F) -> TryFold<Self, R, ID, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63285,"byte_end":63323,"line_start":1204,"line_end":1204,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63328,"byte_end":63331,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ This is a variation of [`fold()`] for operations which can fail with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63336,"byte_end":63408,"line_start":1206,"line_end":1206,"column_start":5,"column_end":77}},{"value":"/ `Option::None` or `Result::Err`.  The first such failure stops","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63413,"byte_end":63479,"line_start":1207,"line_end":1207,"column_start":5,"column_end":71}},{"value":"/ processing the local set of items, without affecting other folds in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63484,"byte_end":63559,"line_start":1208,"line_end":1208,"column_start":5,"column_end":80}},{"value":"/ iterator's subdivisions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63564,"byte_end":63592,"line_start":1209,"line_end":1209,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63597,"byte_end":63600,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ Often, `try_fold()` will be followed by [`try_reduce()`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63605,"byte_end":63665,"line_start":1211,"line_end":1211,"column_start":5,"column_end":65}},{"value":"/ for a final reduction and global short-circuiting effect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63670,"byte_end":63731,"line_start":1212,"line_end":1212,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63736,"byte_end":63739,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ [`fold()`]: #method.fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63744,"byte_end":63772,"line_start":1214,"line_end":1214,"column_start":5,"column_end":33}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63777,"byte_end":63817,"line_start":1215,"line_end":1215,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63822,"byte_end":63825,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63830,"byte_end":63844,"line_start":1217,"line_end":1217,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63849,"byte_end":63852,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63857,"byte_end":63864,"line_start":1219,"line_end":1219,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63869,"byte_end":63895,"line_start":1220,"line_end":1220,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63900,"byte_end":63903,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63908,"byte_end":63933,"line_start":1222,"line_end":1222,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63938,"byte_end":63973,"line_start":1223,"line_end":1223,"column_start":5,"column_end":40}},{"value":"/                .try_fold(|| 0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":63978,"byte_end":64057,"line_start":1224,"line_end":1224,"column_start":5,"column_end":84}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64062,"byte_end":64117,"line_start":1225,"line_end":1225,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64122,"byte_end":64125,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64130,"byte_end":64196,"line_start":1227,"line_end":1227,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64201,"byte_end":64208,"line_start":1228,"line_end":1228,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3818},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65144,"byte_end":65157,"line_start":1256,"line_end":1256,"column_start":8,"column_end":21},"name":"try_fold_with","qualname":"::iter::ParallelIterator::try_fold_with","value":"fn <F, T, R> (self, init: T, fold_op: F) -> TryFoldWith<Self, R, F>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold with a cloneable `init` value.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold with a cloneable `init` value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64487,"byte_end":64555,"line_start":1238,"line_end":1238,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64560,"byte_end":64563,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`fold_with()`] and the failure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64568,"byte_end":64641,"line_start":1240,"line_end":1240,"column_start":5,"column_end":78}},{"value":"/ semantics of [`try_fold()`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64646,"byte_end":64678,"line_start":1241,"line_end":1241,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64683,"byte_end":64686,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ [`fold_with()`]: #method.fold_with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64691,"byte_end":64729,"line_start":1243,"line_end":1243,"column_start":5,"column_end":43}},{"value":"/ [`try_fold()`]: #method.try_fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64734,"byte_end":64770,"line_start":1244,"line_end":1244,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64775,"byte_end":64778,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64783,"byte_end":64790,"line_start":1246,"line_end":1246,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64795,"byte_end":64821,"line_start":1247,"line_end":1247,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64826,"byte_end":64829,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64834,"byte_end":64859,"line_start":1249,"line_end":1249,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64864,"byte_end":64899,"line_start":1250,"line_end":1250,"column_start":5,"column_end":40}},{"value":"/                .try_fold_with(0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64904,"byte_end":64985,"line_start":1251,"line_end":1251,"column_start":5,"column_end":86}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":64990,"byte_end":65045,"line_start":1252,"line_end":1252,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65050,"byte_end":65053,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65058,"byte_end":65124,"line_start":1254,"line_end":1254,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65129,"byte_end":65136,"line_start":1255,"line_end":1255,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66182,"byte_end":66185,"line_start":1289,"line_end":1289,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::ParallelIterator::sum","value":"fn <S> (self) -> S","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Sums up the items in the iterator.","sig":null,"attributes":[{"value":"/ Sums up the items in the iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65399,"byte_end":65437,"line_start":1265,"line_end":1265,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65442,"byte_end":65445,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65450,"byte_end":65516,"line_start":1267,"line_end":1267,"column_start":5,"column_end":71}},{"value":"/ so if the `+` operator is not truly [associative] \\(as is the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65521,"byte_end":65586,"line_start":1268,"line_end":1268,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65591,"byte_end":65653,"line_start":1269,"line_end":1269,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65658,"byte_end":65682,"line_start":1270,"line_end":1270,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65687,"byte_end":65690,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65695,"byte_end":65764,"line_start":1272,"line_end":1272,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65769,"byte_end":65772,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 0, |a, b| a + b)`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65777,"byte_end":65839,"line_start":1274,"line_end":1274,"column_start":5,"column_end":67}},{"value":"/ except that the type of `0` and the `+` operation may vary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65844,"byte_end":65906,"line_start":1275,"line_end":1275,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65911,"byte_end":65961,"line_start":1276,"line_end":1276,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65966,"byte_end":65969,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65974,"byte_end":65988,"line_start":1278,"line_end":1278,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":65993,"byte_end":65996,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66001,"byte_end":66008,"line_start":1280,"line_end":1280,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66013,"byte_end":66039,"line_start":1281,"line_end":1281,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66044,"byte_end":66047,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 5, 7];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66052,"byte_end":66074,"line_start":1283,"line_end":1283,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66079,"byte_end":66082,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ let sum: i32 = a.par_iter().sum();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66087,"byte_end":66125,"line_start":1285,"line_end":1285,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66130,"byte_end":66133,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, 13);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66138,"byte_end":66162,"line_start":1287,"line_end":1287,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66167,"byte_end":66174,"line_start":1288,"line_end":1288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3824},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67184,"byte_end":67191,"line_start":1322,"line_end":1322,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::ParallelIterator::product","value":"fn <P> (self) -> P","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Multiplies all the items in the iterator.","sig":null,"attributes":[{"value":"/ Multiplies all the items in the iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66294,"byte_end":66339,"line_start":1296,"line_end":1296,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66344,"byte_end":66347,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66352,"byte_end":66418,"line_start":1298,"line_end":1298,"column_start":5,"column_end":71}},{"value":"/ so if the `*` operator is not truly [associative] \\(as is the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66423,"byte_end":66488,"line_start":1299,"line_end":1299,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66493,"byte_end":66555,"line_start":1300,"line_end":1300,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66560,"byte_end":66584,"line_start":1301,"line_end":1301,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66589,"byte_end":66592,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66597,"byte_end":66666,"line_start":1303,"line_end":1303,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66671,"byte_end":66674,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 1, |a, b| a * b)`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66679,"byte_end":66741,"line_start":1305,"line_end":1305,"column_start":5,"column_end":67}},{"value":"/ except that the type of `1` and the `*` operation may vary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66746,"byte_end":66808,"line_start":1306,"line_end":1306,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66813,"byte_end":66863,"line_start":1307,"line_end":1307,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66868,"byte_end":66871,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66876,"byte_end":66890,"line_start":1309,"line_end":1309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66895,"byte_end":66898,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66903,"byte_end":66910,"line_start":1311,"line_end":1311,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66915,"byte_end":66941,"line_start":1312,"line_end":1312,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66946,"byte_end":66949,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ fn factorial(n: u32) -> u32 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66954,"byte_end":66987,"line_start":1314,"line_end":1314,"column_start":5,"column_end":38}},{"value":"/    (1..n+1).into_par_iter().product()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":66992,"byte_end":67033,"line_start":1315,"line_end":1315,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67038,"byte_end":67043,"line_start":1316,"line_end":1316,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67048,"byte_end":67051,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(factorial(0), 1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67056,"byte_end":67088,"line_start":1318,"line_end":1318,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(1), 1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67093,"byte_end":67125,"line_start":1319,"line_end":1319,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(5), 120);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67130,"byte_end":67164,"line_start":1320,"line_end":1320,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67169,"byte_end":67176,"line_start":1321,"line_end":1321,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3826},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68034,"byte_end":68037,"line_start":1352,"line_end":1352,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::ParallelIterator::min","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(min)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator. If the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67316,"byte_end":67381,"line_start":1329,"line_end":1329,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(min)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67386,"byte_end":67451,"line_start":1330,"line_end":1330,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67456,"byte_end":67472,"line_start":1331,"line_end":1331,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67477,"byte_end":67480,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67485,"byte_end":67550,"line_start":1333,"line_end":1333,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67555,"byte_end":67621,"line_start":1334,"line_end":1334,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67626,"byte_end":67664,"line_start":1335,"line_end":1335,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67669,"byte_end":67672,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::min(a, b))`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67677,"byte_end":67747,"line_start":1337,"line_end":1337,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67752,"byte_end":67755,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67760,"byte_end":67774,"line_start":1339,"line_end":1339,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67779,"byte_end":67782,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67787,"byte_end":67794,"line_start":1341,"line_end":1341,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67799,"byte_end":67825,"line_start":1342,"line_end":1342,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67830,"byte_end":67833,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67838,"byte_end":67863,"line_start":1344,"line_end":1344,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67868,"byte_end":67871,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min(), Some(&32));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67876,"byte_end":67922,"line_start":1346,"line_end":1346,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67927,"byte_end":67930,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67935,"byte_end":67960,"line_start":1348,"line_end":1348,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67965,"byte_end":67968,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().min(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":67973,"byte_end":68014,"line_start":1350,"line_end":1350,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68019,"byte_end":68026,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3827},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68776,"byte_end":68782,"line_start":1376,"line_end":1376,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::ParallelIterator::min_by","value":"fn <F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator with respect to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68153,"byte_end":68226,"line_start":1359,"line_end":1359,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68231,"byte_end":68301,"line_start":1360,"line_end":1360,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68306,"byte_end":68355,"line_start":1361,"line_end":1361,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68360,"byte_end":68363,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68368,"byte_end":68433,"line_start":1363,"line_end":1363,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68438,"byte_end":68507,"line_start":1364,"line_end":1364,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68512,"byte_end":68550,"line_start":1365,"line_end":1365,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68555,"byte_end":68558,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68563,"byte_end":68577,"line_start":1367,"line_end":1367,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68582,"byte_end":68585,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68590,"byte_end":68597,"line_start":1369,"line_end":1369,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68602,"byte_end":68628,"line_start":1370,"line_end":1370,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68633,"byte_end":68636,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68641,"byte_end":68679,"line_start":1372,"line_end":1372,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68684,"byte_end":68687,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by(|x, y| x.cmp(y)), Some(&-3));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68692,"byte_end":68756,"line_start":1374,"line_end":1374,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":68761,"byte_end":68768,"line_start":1375,"line_end":1375,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69750,"byte_end":69760,"line_start":1407,"line_end":1407,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::ParallelIterator::min_by_key","value":"fn <K, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the item that yields the minimum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the minimum value for the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69152,"byte_end":69217,"line_start":1390,"line_end":1390,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69222,"byte_end":69281,"line_start":1391,"line_end":1391,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69286,"byte_end":69326,"line_start":1392,"line_end":1392,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69331,"byte_end":69334,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69339,"byte_end":69404,"line_start":1394,"line_end":1394,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69409,"byte_end":69475,"line_start":1395,"line_end":1395,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69480,"byte_end":69518,"line_start":1396,"line_end":1396,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69523,"byte_end":69526,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69531,"byte_end":69545,"line_start":1398,"line_end":1398,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69550,"byte_end":69553,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69558,"byte_end":69565,"line_start":1400,"line_end":1400,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69570,"byte_end":69596,"line_start":1401,"line_end":1401,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69601,"byte_end":69604,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69609,"byte_end":69654,"line_start":1403,"line_end":1403,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69659,"byte_end":69662,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by_key(|x| x.abs()), Some(&2));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69667,"byte_end":69730,"line_start":1405,"line_end":1405,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":69735,"byte_end":69742,"line_start":1406,"line_end":1406,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3846},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70993,"byte_end":70996,"line_start":1450,"line_end":1450,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::ParallelIterator::max","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(max)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator. If the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70275,"byte_end":70340,"line_start":1427,"line_end":1427,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(max)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70345,"byte_end":70410,"line_start":1428,"line_end":1428,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70415,"byte_end":70431,"line_start":1429,"line_end":1429,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70436,"byte_end":70439,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70444,"byte_end":70509,"line_start":1431,"line_end":1431,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70514,"byte_end":70580,"line_start":1432,"line_end":1432,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70585,"byte_end":70623,"line_start":1433,"line_end":1433,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70628,"byte_end":70631,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::max(a, b))`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70636,"byte_end":70706,"line_start":1435,"line_end":1435,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70711,"byte_end":70714,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70719,"byte_end":70733,"line_start":1437,"line_end":1437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70738,"byte_end":70741,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70746,"byte_end":70753,"line_start":1439,"line_end":1439,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70758,"byte_end":70784,"line_start":1440,"line_end":1440,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70789,"byte_end":70792,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70797,"byte_end":70822,"line_start":1442,"line_end":1442,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70827,"byte_end":70830,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max(), Some(&74));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70835,"byte_end":70881,"line_start":1444,"line_end":1444,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70886,"byte_end":70889,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70894,"byte_end":70919,"line_start":1446,"line_end":1446,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70924,"byte_end":70927,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().max(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70932,"byte_end":70973,"line_start":1448,"line_end":1448,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":70978,"byte_end":70985,"line_start":1449,"line_end":1449,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71749,"byte_end":71755,"line_start":1474,"line_end":1474,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::ParallelIterator::max_by","value":"fn <F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator with respect to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71112,"byte_end":71185,"line_start":1457,"line_end":1457,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71190,"byte_end":71260,"line_start":1458,"line_end":1458,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71265,"byte_end":71314,"line_start":1459,"line_end":1459,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71319,"byte_end":71322,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71327,"byte_end":71392,"line_start":1461,"line_end":1461,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71397,"byte_end":71466,"line_start":1462,"line_end":1462,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71471,"byte_end":71509,"line_start":1463,"line_end":1463,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71514,"byte_end":71517,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71522,"byte_end":71536,"line_start":1465,"line_end":1465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71541,"byte_end":71544,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71549,"byte_end":71556,"line_start":1467,"line_end":1467,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71561,"byte_end":71587,"line_start":1468,"line_end":1468,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71592,"byte_end":71595,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71600,"byte_end":71638,"line_start":1470,"line_end":1470,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71643,"byte_end":71646,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by(|x, y| x.abs().cmp(&y.abs())), Some(&240));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71651,"byte_end":71729,"line_start":1472,"line_end":1472,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":71734,"byte_end":71741,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3854},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72724,"byte_end":72734,"line_start":1505,"line_end":1505,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::ParallelIterator::max_by_key","value":"fn <K, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the item that yields the maximum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the maximum value for the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72125,"byte_end":72190,"line_start":1488,"line_end":1488,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72195,"byte_end":72254,"line_start":1489,"line_end":1489,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72259,"byte_end":72299,"line_start":1490,"line_end":1490,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72304,"byte_end":72307,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72312,"byte_end":72377,"line_start":1492,"line_end":1492,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72382,"byte_end":72448,"line_start":1493,"line_end":1493,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72453,"byte_end":72491,"line_start":1494,"line_end":1494,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72496,"byte_end":72499,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72504,"byte_end":72518,"line_start":1496,"line_end":1496,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72523,"byte_end":72526,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72531,"byte_end":72538,"line_start":1498,"line_end":1498,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72543,"byte_end":72569,"line_start":1499,"line_end":1499,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72574,"byte_end":72577,"line_start":1500,"line_end":1500,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72582,"byte_end":72627,"line_start":1501,"line_end":1501,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72632,"byte_end":72635,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by_key(|x| x.abs()), Some(&34));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72640,"byte_end":72704,"line_start":1503,"line_end":1503,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":72709,"byte_end":72716,"line_start":1504,"line_end":1504,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3866},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73665,"byte_end":73670,"line_start":1541,"line_end":1541,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::ParallelIterator::chain","value":"fn <C> (self, chain: C) -> Chain<Self, C::Iter>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Takes two iterators and creates a new iterator over both.","sig":null,"attributes":[{"value":"/ Takes two iterators and creates a new iterator over both.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73249,"byte_end":73310,"line_start":1525,"line_end":1525,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73315,"byte_end":73318,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73323,"byte_end":73337,"line_start":1527,"line_end":1527,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73342,"byte_end":73345,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73350,"byte_end":73357,"line_start":1529,"line_end":1529,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73362,"byte_end":73388,"line_start":1530,"line_end":1530,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73393,"byte_end":73396,"line_start":1531,"line_end":1531,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 1, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73401,"byte_end":73423,"line_start":1532,"line_end":1532,"column_start":5,"column_end":27}},{"value":"/ let b = [9, 8, 7];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73428,"byte_end":73450,"line_start":1533,"line_end":1533,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73455,"byte_end":73458,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().chain(b.par_iter());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73463,"byte_end":73515,"line_start":1535,"line_end":1535,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73520,"byte_end":73523,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ let chained: Vec<_> = par_iter.cloned().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73528,"byte_end":73582,"line_start":1537,"line_end":1537,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73587,"byte_end":73590,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&chained[..], &[0, 1, 2, 9, 8, 7]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73595,"byte_end":73645,"line_start":1539,"line_end":1539,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73650,"byte_end":73657,"line_start":1540,"line_end":1540,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3868},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74764,"byte_end":74772,"line_start":1571,"line_end":1571,"column_start":8,"column_end":16},"name":"find_any","qualname":"::iter::ParallelIterator::find_any","value":"fn <P> (self, predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate and returns it. This operation\n is similar to [`find` on sequential iterators][find] but\n the item returned may not be the **first** one in the parallel\n sequence which matches, since we search the entire sequence in parallel.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73841,"byte_end":73901,"line_start":1548,"line_end":1548,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate and returns it. This operation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73906,"byte_end":73968,"line_start":1549,"line_end":1549,"column_start":5,"column_end":67}},{"value":"/ is similar to [`find` on sequential iterators][find] but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":73973,"byte_end":74033,"line_start":1550,"line_end":1550,"column_start":5,"column_end":65}},{"value":"/ the item returned may not be the **first** one in the parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74038,"byte_end":74104,"line_start":1551,"line_end":1551,"column_start":5,"column_end":71}},{"value":"/ sequence which matches, since we search the entire sequence in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74109,"byte_end":74185,"line_start":1552,"line_end":1552,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74190,"byte_end":74193,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, we will attempt to stop processing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74198,"byte_end":74259,"line_start":1554,"line_end":1554,"column_start":5,"column_end":66}},{"value":"/ the rest of the items in the iterator as soon as possible","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74264,"byte_end":74325,"line_start":1555,"line_end":1555,"column_start":5,"column_end":66}},{"value":"/ (just as `find` stops iterating once a match is found).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74330,"byte_end":74389,"line_start":1556,"line_end":1556,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74394,"byte_end":74397,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ [find]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74402,"byte_end":74480,"line_start":1558,"line_end":1558,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74485,"byte_end":74488,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74493,"byte_end":74507,"line_start":1560,"line_end":1560,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74512,"byte_end":74515,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74520,"byte_end":74527,"line_start":1562,"line_end":1562,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74532,"byte_end":74558,"line_start":1563,"line_end":1563,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74563,"byte_end":74566,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74571,"byte_end":74596,"line_start":1565,"line_end":1565,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74601,"byte_end":74604,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74609,"byte_end":74671,"line_start":1567,"line_end":1567,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74676,"byte_end":74679,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 100), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74684,"byte_end":74744,"line_start":1569,"line_end":1569,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74749,"byte_end":74756,"line_start":1570,"line_end":1570,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75811,"byte_end":75821,"line_start":1601,"line_end":1601,"column_start":8,"column_end":18},"name":"find_first","qualname":"::iter::ParallelIterator::find_first","value":"fn <P> (self, predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":74931,"byte_end":75004,"line_start":1578,"line_end":1578,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75009,"byte_end":75061,"line_start":1579,"line_end":1579,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75066,"byte_end":75069,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the right of the match","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75074,"byte_end":75139,"line_start":1581,"line_end":1581,"column_start":5,"column_end":70}},{"value":"/ will be stopped, while attempts to the left must continue in case","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75144,"byte_end":75213,"line_start":1582,"line_end":1582,"column_start":5,"column_end":74}},{"value":"/ an earlier match is found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75218,"byte_end":75248,"line_start":1583,"line_end":1583,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75253,"byte_end":75256,"line_start":1584,"line_end":1584,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75261,"byte_end":75332,"line_start":1585,"line_end":1585,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75337,"byte_end":75408,"line_start":1586,"line_end":1586,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75413,"byte_end":75484,"line_start":1587,"line_end":1587,"column_start":5,"column_end":76}},{"value":"/ `find_any` is a better choice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75489,"byte_end":75523,"line_start":1588,"line_end":1588,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75528,"byte_end":75531,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75536,"byte_end":75550,"line_start":1590,"line_end":1590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75555,"byte_end":75558,"line_start":1591,"line_end":1591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75563,"byte_end":75570,"line_start":1592,"line_end":1592,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75575,"byte_end":75601,"line_start":1593,"line_end":1593,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75606,"byte_end":75609,"line_start":1594,"line_end":1594,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75614,"byte_end":75639,"line_start":1595,"line_end":1595,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75644,"byte_end":75647,"line_start":1596,"line_end":1596,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75652,"byte_end":75716,"line_start":1597,"line_end":1597,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75721,"byte_end":75724,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 100), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75729,"byte_end":75791,"line_start":1599,"line_end":1599,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75796,"byte_end":75803,"line_start":1600,"line_end":1600,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76834,"byte_end":76843,"line_start":1630,"line_end":1630,"column_start":8,"column_end":17},"name":"find_last","qualname":"::iter::ParallelIterator::find_last","value":"fn <P> (self, predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":75997,"byte_end":76069,"line_start":1608,"line_end":1608,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76074,"byte_end":76126,"line_start":1609,"line_end":1609,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76131,"byte_end":76134,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the left of the match","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76139,"byte_end":76203,"line_start":1611,"line_end":1611,"column_start":5,"column_end":69}},{"value":"/ will be stopped, while attempts to the right must continue in case","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76208,"byte_end":76278,"line_start":1612,"line_end":1612,"column_start":5,"column_end":75}},{"value":"/ a later match is found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76283,"byte_end":76310,"line_start":1613,"line_end":1613,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76315,"byte_end":76318,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76323,"byte_end":76394,"line_start":1615,"line_end":1615,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76399,"byte_end":76471,"line_start":1616,"line_end":1616,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `find_any` is a better choice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76476,"byte_end":76548,"line_start":1617,"line_end":1617,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76553,"byte_end":76556,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76561,"byte_end":76575,"line_start":1619,"line_end":1619,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76580,"byte_end":76583,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76588,"byte_end":76595,"line_start":1621,"line_end":1621,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76600,"byte_end":76626,"line_start":1622,"line_end":1622,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76631,"byte_end":76634,"line_start":1623,"line_end":1623,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76639,"byte_end":76664,"line_start":1624,"line_end":1624,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76669,"byte_end":76672,"line_start":1625,"line_end":1625,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76677,"byte_end":76740,"line_start":1626,"line_end":1626,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76745,"byte_end":76748,"line_start":1627,"line_end":1627,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 100), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76753,"byte_end":76814,"line_start":1628,"line_end":1628,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":76819,"byte_end":76826,"line_start":1629,"line_end":1629,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77920,"byte_end":77932,"line_start":1660,"line_end":1660,"column_start":8,"column_end":20},"name":"find_map_any","qualname":"::iter::ParallelIterator::find_map_any","value":"fn <P, R> (self, predicate: P) -> Option<R>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator\n and returns **any** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77018,"byte_end":77087,"line_start":1637,"line_end":1637,"column_start":5,"column_end":74}},{"value":"/ and returns **any** non-None result of the map operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77092,"byte_end":77153,"line_start":1638,"line_end":1638,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77158,"byte_end":77161,"line_start":1639,"line_end":1639,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, we will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77166,"byte_end":77235,"line_start":1640,"line_end":1640,"column_start":5,"column_end":74}},{"value":"/ attempt to stop processing the rest of the items in the iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77240,"byte_end":77308,"line_start":1641,"line_end":1641,"column_start":5,"column_end":73}},{"value":"/ as soon as possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77313,"byte_end":77337,"line_start":1642,"line_end":1642,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77342,"byte_end":77345,"line_start":1643,"line_end":1643,"column_start":5,"column_end":8}},{"value":"/ Note that this method only returns **some** item in the parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77350,"byte_end":77418,"line_start":1644,"line_end":1644,"column_start":5,"column_end":73}},{"value":"/ iterator that is not None from the map predicate. The item returned","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77423,"byte_end":77494,"line_start":1645,"line_end":1645,"column_start":5,"column_end":76}},{"value":"/ may not be the **first** non-None value produced in the parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77499,"byte_end":77567,"line_start":1646,"line_end":1646,"column_start":5,"column_end":73}},{"value":"/ sequence, since the entire sequence is mapped over in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77572,"byte_end":77639,"line_start":1647,"line_end":1647,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77644,"byte_end":77647,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77652,"byte_end":77666,"line_start":1649,"line_end":1649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77671,"byte_end":77674,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77679,"byte_end":77686,"line_start":1651,"line_end":1651,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77691,"byte_end":77717,"line_start":1652,"line_end":1652,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77722,"byte_end":77725,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"5\", \"5\"];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77730,"byte_end":77767,"line_start":1654,"line_end":1654,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77772,"byte_end":77775,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ let found_number = c.par_iter().find_map_any(|s| s.parse().ok());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77780,"byte_end":77849,"line_start":1656,"line_end":1656,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77854,"byte_end":77857,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(found_number, Some(5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77862,"byte_end":77900,"line_start":1658,"line_end":1658,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":77905,"byte_end":77912,"line_start":1659,"line_end":1659,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79122,"byte_end":79136,"line_start":1694,"line_end":1694,"column_start":8,"column_end":22},"name":"find_map_first","qualname":"::iter::ParallelIterator::find_map_first","value":"fn <P, R> (self, predicate: P) -> Option<R>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **first** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78181,"byte_end":78254,"line_start":1671,"line_end":1671,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **first** non-None result of the map operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78259,"byte_end":78335,"line_start":1672,"line_end":1672,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78340,"byte_end":78343,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78348,"byte_end":78422,"line_start":1674,"line_end":1674,"column_start":5,"column_end":79}},{"value":"/ to the right of the match will be stopped, while attempts to the left","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78427,"byte_end":78500,"line_start":1675,"line_end":1675,"column_start":5,"column_end":78}},{"value":"/ must continue in case an earlier match is found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78505,"byte_end":78557,"line_start":1676,"line_end":1676,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78562,"byte_end":78565,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78570,"byte_end":78641,"line_start":1678,"line_end":1678,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78646,"byte_end":78716,"line_start":1679,"line_end":1679,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78721,"byte_end":78796,"line_start":1680,"line_end":1680,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78801,"byte_end":78839,"line_start":1681,"line_end":1681,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78844,"byte_end":78847,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78852,"byte_end":78866,"line_start":1683,"line_end":1683,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78871,"byte_end":78874,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78879,"byte_end":78886,"line_start":1685,"line_end":1685,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78891,"byte_end":78917,"line_start":1686,"line_end":1686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78922,"byte_end":78925,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78930,"byte_end":78967,"line_start":1688,"line_end":1688,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78972,"byte_end":78975,"line_start":1689,"line_end":1689,"column_start":5,"column_end":8}},{"value":"/ let first_number = c.par_iter().find_map_first(|s| s.parse().ok());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":78980,"byte_end":79051,"line_start":1690,"line_end":1690,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79056,"byte_end":79059,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first_number, Some(2));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79064,"byte_end":79102,"line_start":1692,"line_end":1692,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79107,"byte_end":79114,"line_start":1693,"line_end":1693,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80321,"byte_end":80334,"line_start":1728,"line_end":1728,"column_start":8,"column_end":21},"name":"find_map_last","qualname":"::iter::ParallelIterator::find_map_last","value":"fn <P, R> (self, predicate: P) -> Option<R>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **last** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79387,"byte_end":79460,"line_start":1705,"line_end":1705,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **last** non-None result of the map operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79465,"byte_end":79540,"line_start":1706,"line_end":1706,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79545,"byte_end":79548,"line_start":1707,"line_end":1707,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79553,"byte_end":79627,"line_start":1708,"line_end":1708,"column_start":5,"column_end":79}},{"value":"/ to the left of the match will be stopped, while attempts to the right","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79632,"byte_end":79705,"line_start":1709,"line_end":1709,"column_start":5,"column_end":78}},{"value":"/ must continue in case a later match is found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79710,"byte_end":79759,"line_start":1710,"line_end":1710,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79764,"byte_end":79767,"line_start":1711,"line_end":1711,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79772,"byte_end":79843,"line_start":1712,"line_end":1712,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79848,"byte_end":79918,"line_start":1713,"line_end":1713,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":79923,"byte_end":79998,"line_start":1714,"line_end":1714,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80003,"byte_end":80041,"line_start":1715,"line_end":1715,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80046,"byte_end":80049,"line_start":1716,"line_end":1716,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80054,"byte_end":80068,"line_start":1717,"line_end":1717,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80073,"byte_end":80076,"line_start":1718,"line_end":1718,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80081,"byte_end":80088,"line_start":1719,"line_end":1719,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80093,"byte_end":80119,"line_start":1720,"line_end":1720,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80124,"byte_end":80127,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80132,"byte_end":80169,"line_start":1722,"line_end":1722,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80174,"byte_end":80177,"line_start":1723,"line_end":1723,"column_start":5,"column_end":8}},{"value":"/ let last_number = c.par_iter().find_map_last(|s| s.parse().ok());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80182,"byte_end":80251,"line_start":1724,"line_end":1724,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80256,"byte_end":80259,"line_start":1725,"line_end":1725,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(last_number, Some(5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80264,"byte_end":80301,"line_start":1726,"line_end":1726,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80306,"byte_end":80313,"line_start":1727,"line_end":1727,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3889},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80751,"byte_end":80755,"line_start":1742,"line_end":1742,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::ParallelIterator::find","value":"fn <P> (self, predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `find` does not search in order -- use `find_any`, \\\\\n                         `find_first`, or `find_last`\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80603,"byte_end":80743,"line_start":1740,"line_end":1741,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3891},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81460,"byte_end":81463,"line_start":1766,"line_end":1766,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::ParallelIterator::any","value":"fn <P> (self, predicate: P) -> bool","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and if so returns true.  Once\n a match is found, we'll attempt to stop process the rest\n of the items.  Proving that there's no match, returning false,\n does require visiting every item.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80911,"byte_end":80971,"line_start":1749,"line_end":1749,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and if so returns true.  Once","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":80976,"byte_end":81038,"line_start":1750,"line_end":1750,"column_start":5,"column_end":67}},{"value":"/ a match is found, we'll attempt to stop process the rest","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81043,"byte_end":81103,"line_start":1751,"line_end":1751,"column_start":5,"column_end":65}},{"value":"/ of the items.  Proving that there's no match, returning false,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81108,"byte_end":81174,"line_start":1752,"line_end":1752,"column_start":5,"column_end":71}},{"value":"/ does require visiting every item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81179,"byte_end":81216,"line_start":1753,"line_end":1753,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81221,"byte_end":81224,"line_start":1754,"line_end":1754,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81229,"byte_end":81243,"line_start":1755,"line_end":1755,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81248,"byte_end":81251,"line_start":1756,"line_end":1756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81256,"byte_end":81263,"line_start":1757,"line_end":1757,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81268,"byte_end":81294,"line_start":1758,"line_end":1758,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81299,"byte_end":81302,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81307,"byte_end":81343,"line_start":1760,"line_end":1760,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81348,"byte_end":81351,"line_start":1761,"line_end":1761,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().any(|&x| x > 10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81356,"byte_end":81405,"line_start":1762,"line_end":1762,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81410,"byte_end":81413,"line_start":1763,"line_end":1763,"column_start":5,"column_end":8}},{"value":"/ assert!(is_valid);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81418,"byte_end":81440,"line_start":1764,"line_end":1764,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81445,"byte_end":81452,"line_start":1765,"line_end":1765,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3893},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82091,"byte_end":82094,"line_start":1788,"line_end":1788,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::ParallelIterator::all","value":"fn <P> (self, predicate: P) -> bool","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Tests that every item in the parallel iterator matches the given\n predicate, and if so returns true.  If a counter-example is found,\n we'll attempt to stop processing more items, then return false.","sig":null,"attributes":[{"value":"/ Tests that every item in the parallel iterator matches the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81631,"byte_end":81699,"line_start":1773,"line_end":1773,"column_start":5,"column_end":73}},{"value":"/ predicate, and if so returns true.  If a counter-example is found,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81704,"byte_end":81774,"line_start":1774,"line_end":1774,"column_start":5,"column_end":75}},{"value":"/ we'll attempt to stop processing more items, then return false.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81779,"byte_end":81846,"line_start":1775,"line_end":1775,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81851,"byte_end":81854,"line_start":1776,"line_end":1776,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81859,"byte_end":81873,"line_start":1777,"line_end":1777,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81878,"byte_end":81881,"line_start":1778,"line_end":1778,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81886,"byte_end":81893,"line_start":1779,"line_end":1779,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81898,"byte_end":81924,"line_start":1780,"line_end":1780,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81929,"byte_end":81932,"line_start":1781,"line_end":1781,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81937,"byte_end":81973,"line_start":1782,"line_end":1782,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81978,"byte_end":81981,"line_start":1783,"line_end":1783,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().all(|&x| x > 10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":81986,"byte_end":82035,"line_start":1784,"line_end":1784,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82040,"byte_end":82043,"line_start":1785,"line_end":1785,"column_start":5,"column_end":8}},{"value":"/ assert!(!is_valid);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82048,"byte_end":82071,"line_start":1786,"line_end":1786,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82076,"byte_end":82083,"line_start":1787,"line_end":1787,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83076,"byte_end":83086,"line_start":1822,"line_end":1822,"column_start":8,"column_end":18},"name":"while_some","qualname":"::iter::ParallelIterator::while_some","value":"fn <T> (self) -> WhileSome<Self>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates an iterator over the `Some` items of this iterator, halting\n as soon as any `None` is found.","sig":null,"attributes":[{"value":"/ Creates an iterator over the `Some` items of this iterator, halting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82343,"byte_end":82414,"line_start":1800,"line_end":1800,"column_start":5,"column_end":76}},{"value":"/ as soon as any `None` is found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82419,"byte_end":82454,"line_start":1801,"line_end":1801,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82459,"byte_end":82462,"line_start":1802,"line_end":1802,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82467,"byte_end":82481,"line_start":1803,"line_end":1803,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82486,"byte_end":82489,"line_start":1804,"line_end":1804,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82494,"byte_end":82501,"line_start":1805,"line_end":1805,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82506,"byte_end":82532,"line_start":1806,"line_end":1806,"column_start":5,"column_end":31}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82537,"byte_end":82588,"line_start":1807,"line_end":1807,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82593,"byte_end":82596,"line_start":1808,"line_end":1808,"column_start":5,"column_end":8}},{"value":"/ let counter = AtomicUsize::new(0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82601,"byte_end":82639,"line_start":1809,"line_end":1809,"column_start":5,"column_end":43}},{"value":"/ let value = (0_i32..2048)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82644,"byte_end":82673,"line_start":1810,"line_end":1810,"column_start":5,"column_end":34}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82678,"byte_end":82702,"line_start":1811,"line_end":1811,"column_start":5,"column_end":29}},{"value":"/     .map(|x| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82707,"byte_end":82725,"line_start":1812,"line_end":1812,"column_start":5,"column_end":23}},{"value":"/              counter.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82730,"byte_end":82786,"line_start":1813,"line_end":1813,"column_start":5,"column_end":61}},{"value":"/              if x < 1024 { Some(x) } else { None }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82791,"byte_end":82845,"line_start":1814,"line_end":1814,"column_start":5,"column_end":59}},{"value":"/          })","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82850,"byte_end":82865,"line_start":1815,"line_end":1815,"column_start":5,"column_end":20}},{"value":"/     .while_some()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82870,"byte_end":82891,"line_start":1816,"line_end":1816,"column_start":5,"column_end":26}},{"value":"/     .max();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82896,"byte_end":82911,"line_start":1817,"line_end":1817,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82916,"byte_end":82919,"line_start":1818,"line_end":1818,"column_start":5,"column_end":8}},{"value":"/ assert!(value < Some(1024));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82924,"byte_end":82956,"line_start":1819,"line_end":1819,"column_start":5,"column_end":37}},{"value":"/ assert!(counter.load(Ordering::SeqCst) < 2048); // should not have visited every single one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":82961,"byte_end":83056,"line_start":1820,"line_end":1820,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83061,"byte_end":83068,"line_start":1821,"line_end":1821,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84397,"byte_end":84407,"line_start":1860,"line_end":1860,"column_start":8,"column_end":18},"name":"panic_fuse","qualname":"::iter::ParallelIterator::panic_fuse","value":"fn (self) -> PanicFuse<Self>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Wraps an iterator with a fuse in case of panics, to halt all threads\n as soon as possible.","sig":null,"attributes":[{"value":"/ Wraps an iterator with a fuse in case of panics, to halt all threads","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83238,"byte_end":83310,"line_start":1830,"line_end":1830,"column_start":5,"column_end":77}},{"value":"/ as soon as possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83315,"byte_end":83339,"line_start":1831,"line_end":1831,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83344,"byte_end":83347,"line_start":1832,"line_end":1832,"column_start":5,"column_end":8}},{"value":"/ Panics within parallel iterators are always propagated to the caller,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83352,"byte_end":83425,"line_start":1833,"line_end":1833,"column_start":5,"column_end":78}},{"value":"/ but they don't always halt the rest of the iterator right away, due to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83430,"byte_end":83504,"line_start":1834,"line_end":1834,"column_start":5,"column_end":79}},{"value":"/ the internal semantics of [`join`]. This adaptor makes a greater effort","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83509,"byte_end":83584,"line_start":1835,"line_end":1835,"column_start":5,"column_end":80}},{"value":"/ to stop processing other items sooner, with the cost of additional","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83589,"byte_end":83659,"line_start":1836,"line_end":1836,"column_start":5,"column_end":75}},{"value":"/ synchronization overhead, which may also inhibit some optimizations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83664,"byte_end":83736,"line_start":1837,"line_end":1837,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83741,"byte_end":83744,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8}},{"value":"/ [`join`]: ../fn.join.html#panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83749,"byte_end":83785,"line_start":1839,"line_end":1839,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83790,"byte_end":83793,"line_start":1840,"line_end":1840,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83798,"byte_end":83812,"line_start":1841,"line_end":1841,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83817,"byte_end":83820,"line_start":1842,"line_end":1842,"column_start":5,"column_end":8}},{"value":"/ If this code didn't use `panic_fuse()`, it would continue processing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83825,"byte_end":83897,"line_start":1843,"line_end":1843,"column_start":5,"column_end":77}},{"value":"/ many more items in other threads (with long sleep delays) before the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83902,"byte_end":83974,"line_start":1844,"line_end":1844,"column_start":5,"column_end":77}},{"value":"/ panic is finally propagated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":83979,"byte_end":84011,"line_start":1845,"line_end":1845,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84016,"byte_end":84019,"line_start":1846,"line_end":1846,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84024,"byte_end":84043,"line_start":1847,"line_end":1847,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84048,"byte_end":84074,"line_start":1848,"line_end":1848,"column_start":5,"column_end":31}},{"value":"/ use std::{thread, time};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84079,"byte_end":84107,"line_start":1849,"line_end":1849,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84112,"byte_end":84115,"line_start":1850,"line_end":1850,"column_start":5,"column_end":8}},{"value":"/ (0..1_000_000)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84120,"byte_end":84138,"line_start":1851,"line_end":1851,"column_start":5,"column_end":23}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84143,"byte_end":84167,"line_start":1852,"line_end":1852,"column_start":5,"column_end":29}},{"value":"/     .panic_fuse()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84172,"byte_end":84193,"line_start":1853,"line_end":1853,"column_start":5,"column_end":26}},{"value":"/     .for_each(|i| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84198,"byte_end":84221,"line_start":1854,"line_end":1854,"column_start":5,"column_end":28}},{"value":"/         // simulate some work","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84226,"byte_end":84259,"line_start":1855,"line_end":1855,"column_start":5,"column_end":38}},{"value":"/         thread::sleep(time::Duration::from_secs(1));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84264,"byte_end":84320,"line_start":1856,"line_end":1856,"column_start":5,"column_end":61}},{"value":"/         assert!(i > 0); // oops!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84325,"byte_end":84361,"line_start":1857,"line_end":1857,"column_start":5,"column_end":41}},{"value":"/     });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84366,"byte_end":84377,"line_start":1858,"line_end":1858,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84382,"byte_end":84389,"line_start":1859,"line_end":1859,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85447,"byte_end":85454,"line_start":1888,"line_end":1888,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::ParallelIterator::collect","value":"fn <C> (self) -> C","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates a fresh collection containing all the elements produced\n by this parallel iterator.","sig":null,"attributes":[{"value":"/ Creates a fresh collection containing all the elements produced","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84475,"byte_end":84542,"line_start":1864,"line_end":1864,"column_start":5,"column_end":72}},{"value":"/ by this parallel iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84547,"byte_end":84577,"line_start":1865,"line_end":1865,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84582,"byte_end":84585,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ You may prefer [`collect_into_vec()`] implemented on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84590,"byte_end":84646,"line_start":1867,"line_end":1867,"column_start":5,"column_end":61}},{"value":"/ [`IndexedParallelIterator`], if your underlying iterator also implements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84651,"byte_end":84727,"line_start":1868,"line_end":1868,"column_start":5,"column_end":81}},{"value":"/ it. [`collect_into_vec()`] allocates efficiently with precise knowledge","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84732,"byte_end":84807,"line_start":1869,"line_end":1869,"column_start":5,"column_end":80}},{"value":"/ of how many elements the iterator contains, and even allows you to reuse","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84812,"byte_end":84888,"line_start":1870,"line_end":1870,"column_start":5,"column_end":81}},{"value":"/ an existing vector's backing store rather than allocating a fresh vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84893,"byte_end":84970,"line_start":1871,"line_end":1871,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84975,"byte_end":84978,"line_start":1872,"line_end":1872,"column_start":5,"column_end":8}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":84983,"byte_end":85050,"line_start":1873,"line_end":1873,"column_start":5,"column_end":72}},{"value":"/ [`collect_into_vec()`]:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85055,"byte_end":85082,"line_start":1874,"line_end":1874,"column_start":5,"column_end":32}},{"value":"/     trait.IndexedParallelIterator.html#method.collect_into_vec","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85087,"byte_end":85153,"line_start":1875,"line_end":1875,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85158,"byte_end":85161,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85166,"byte_end":85180,"line_start":1877,"line_end":1877,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85185,"byte_end":85188,"line_start":1878,"line_end":1878,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85193,"byte_end":85200,"line_start":1879,"line_end":1879,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85205,"byte_end":85231,"line_start":1880,"line_end":1880,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85236,"byte_end":85239,"line_start":1881,"line_end":1881,"column_start":5,"column_end":8}},{"value":"/ let sync_vec: Vec<_> = (0..100).into_iter().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85244,"byte_end":85302,"line_start":1882,"line_end":1882,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85307,"byte_end":85310,"line_start":1883,"line_end":1883,"column_start":5,"column_end":8}},{"value":"/ let async_vec: Vec<_> = (0..100).into_par_iter().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85315,"byte_end":85378,"line_start":1884,"line_end":1884,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85383,"byte_end":85386,"line_start":1885,"line_end":1885,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sync_vec, async_vec);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85391,"byte_end":85427,"line_start":1886,"line_end":1886,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85432,"byte_end":85439,"line_start":1887,"line_end":1887,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86706,"byte_end":86711,"line_start":1929,"line_end":1929,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::ParallelIterator::unzip","value":"fn <A, B, FromA, FromB> (self) -> (FromA, FromB)","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Unzips the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.","sig":null,"attributes":[{"value":"/ Unzips the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85572,"byte_end":85640,"line_start":1895,"line_end":1895,"column_start":5,"column_end":73}},{"value":"/ `ParallelExtend` containers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85645,"byte_end":85677,"line_start":1896,"line_end":1896,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85682,"byte_end":85685,"line_start":1897,"line_end":1897,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `unzip_into_vecs()`, which allocates more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85690,"byte_end":85757,"line_start":1898,"line_end":1898,"column_start":5,"column_end":72}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85762,"byte_end":85825,"line_start":1899,"line_end":1899,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse existing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85830,"byte_end":85890,"line_start":1900,"line_end":1900,"column_start":5,"column_end":65}},{"value":"/ vectors' backing stores rather than allocating fresh vectors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85895,"byte_end":85960,"line_start":1901,"line_end":1901,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85965,"byte_end":85968,"line_start":1902,"line_end":1902,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85973,"byte_end":85987,"line_start":1903,"line_end":1903,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":85992,"byte_end":85995,"line_start":1904,"line_end":1904,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86000,"byte_end":86007,"line_start":1905,"line_end":1905,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86012,"byte_end":86038,"line_start":1906,"line_end":1906,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86043,"byte_end":86046,"line_start":1907,"line_end":1907,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86051,"byte_end":86096,"line_start":1908,"line_end":1908,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86101,"byte_end":86104,"line_start":1909,"line_end":1909,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = a.par_iter().cloned().unzip();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86109,"byte_end":86181,"line_start":1910,"line_end":1910,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86186,"byte_end":86189,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86194,"byte_end":86229,"line_start":1912,"line_end":1912,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 2, 3, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86234,"byte_end":86270,"line_start":1913,"line_end":1913,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86275,"byte_end":86282,"line_start":1914,"line_end":1914,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86287,"byte_end":86290,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ Nested pairs can be unzipped too.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86295,"byte_end":86332,"line_start":1916,"line_end":1916,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86337,"byte_end":86340,"line_start":1917,"line_end":1917,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86345,"byte_end":86352,"line_start":1918,"line_end":1918,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86357,"byte_end":86383,"line_start":1919,"line_end":1919,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86388,"byte_end":86391,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ let (values, (squares, cubes)): (Vec<_>, (Vec<_>, Vec<_>)) = (0..4).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86396,"byte_end":86483,"line_start":1921,"line_end":1921,"column_start":5,"column_end":92}},{"value":"/     .map(|i| (i, (i * i, i * i * i)))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86488,"byte_end":86529,"line_start":1922,"line_end":1922,"column_start":5,"column_end":46}},{"value":"/     .unzip();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86534,"byte_end":86551,"line_start":1923,"line_end":1923,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86556,"byte_end":86559,"line_start":1924,"line_end":1924,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(values, [0, 1, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86564,"byte_end":86601,"line_start":1925,"line_end":1925,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(squares, [0, 1, 4, 9]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86606,"byte_end":86644,"line_start":1926,"line_end":1926,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(cubes, [0, 1, 8, 27]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86649,"byte_end":86686,"line_start":1927,"line_end":1927,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86691,"byte_end":86698,"line_start":1928,"line_end":1928,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87817,"byte_end":87826,"line_start":1959,"line_end":1959,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::ParallelIterator::partition","value":"fn <A, B, P> (self, predicate: P) -> (A, B)","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Partitions the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.  Items for which the `predicate` returns\n true go into the first container, and the rest go into the second.","sig":null,"attributes":[{"value":"/ Partitions the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":86993,"byte_end":87065,"line_start":1940,"line_end":1940,"column_start":5,"column_end":77}},{"value":"/ `ParallelExtend` containers.  Items for which the `predicate` returns","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87070,"byte_end":87143,"line_start":1941,"line_end":1941,"column_start":5,"column_end":78}},{"value":"/ true go into the first container, and the rest go into the second.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87148,"byte_end":87218,"line_start":1942,"line_end":1942,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87223,"byte_end":87226,"line_start":1943,"line_end":1943,"column_start":5,"column_end":8}},{"value":"/ Note: unlike the standard `Iterator::partition`, this allows distinct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87231,"byte_end":87304,"line_start":1944,"line_end":1944,"column_start":5,"column_end":78}},{"value":"/ collection types for the left and right items.  This is more flexible,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87309,"byte_end":87383,"line_start":1945,"line_end":1945,"column_start":5,"column_end":79}},{"value":"/ but may require new type annotations when converting sequential code","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87388,"byte_end":87460,"line_start":1946,"line_end":1946,"column_start":5,"column_end":77}},{"value":"/ that used type inferrence assuming the two were the same.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87465,"byte_end":87526,"line_start":1947,"line_end":1947,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87531,"byte_end":87534,"line_start":1948,"line_end":1948,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87539,"byte_end":87553,"line_start":1949,"line_end":1949,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87558,"byte_end":87561,"line_start":1950,"line_end":1950,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87566,"byte_end":87573,"line_start":1951,"line_end":1951,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87578,"byte_end":87604,"line_start":1952,"line_end":1952,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87609,"byte_end":87612,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().partition(|x| x % 2 == 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87617,"byte_end":87708,"line_start":1954,"line_end":1954,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87713,"byte_end":87716,"line_start":1955,"line_end":1955,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 2, 4, 6]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87721,"byte_end":87756,"line_start":1956,"line_end":1956,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 3, 5, 7]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87761,"byte_end":87797,"line_start":1957,"line_end":1957,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":87802,"byte_end":87809,"line_start":1958,"line_end":1958,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89546,"byte_end":89559,"line_start":2011,"line_end":2011,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::iter::ParallelIterator::partition_map","value":"fn <A, B, P, L, R> (self, predicate: P) -> (A, B)","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Partitions and maps the items of a parallel iterator into a pair of\n arbitrary `ParallelExtend` containers.  `Either::Left` items go into\n the first container, and `Either::Right` items go into the second.","sig":null,"attributes":[{"value":"/ Partitions and maps the items of a parallel iterator into a pair of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88097,"byte_end":88168,"line_start":1968,"line_end":1968,"column_start":5,"column_end":76}},{"value":"/ arbitrary `ParallelExtend` containers.  `Either::Left` items go into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88173,"byte_end":88245,"line_start":1969,"line_end":1969,"column_start":5,"column_end":77}},{"value":"/ the first container, and `Either::Right` items go into the second.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88250,"byte_end":88320,"line_start":1970,"line_end":1970,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88325,"byte_end":88328,"line_start":1971,"line_end":1971,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88333,"byte_end":88347,"line_start":1972,"line_end":1972,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88352,"byte_end":88355,"line_start":1973,"line_end":1973,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88360,"byte_end":88367,"line_start":1974,"line_end":1974,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88372,"byte_end":88398,"line_start":1975,"line_end":1975,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88403,"byte_end":88431,"line_start":1976,"line_end":1976,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88436,"byte_end":88439,"line_start":1977,"line_end":1977,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88444,"byte_end":88508,"line_start":1978,"line_end":1978,"column_start":5,"column_end":69}},{"value":"/     .partition_map(|x| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88513,"byte_end":88541,"line_start":1979,"line_end":1979,"column_start":5,"column_end":33}},{"value":"/         if x % 2 == 0 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88546,"byte_end":88573,"line_start":1980,"line_end":1980,"column_start":5,"column_end":32}},{"value":"/             Either::Left(x * 4)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88578,"byte_end":88613,"line_start":1981,"line_end":1981,"column_start":5,"column_end":40}},{"value":"/         } else {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88618,"byte_end":88638,"line_start":1982,"line_end":1982,"column_start":5,"column_end":25}},{"value":"/             Either::Right(x * 3)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88643,"byte_end":88679,"line_start":1983,"line_end":1983,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88684,"byte_end":88697,"line_start":1984,"line_end":1984,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88702,"byte_end":88713,"line_start":1985,"line_end":1985,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88718,"byte_end":88721,"line_start":1986,"line_end":1986,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88726,"byte_end":88763,"line_start":1987,"line_end":1987,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88768,"byte_end":88806,"line_start":1988,"line_end":1988,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88811,"byte_end":88818,"line_start":1989,"line_end":1989,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88823,"byte_end":88826,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ Nested `Either` enums can be split as well.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88831,"byte_end":88878,"line_start":1991,"line_end":1991,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88883,"byte_end":88886,"line_start":1992,"line_end":1992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88891,"byte_end":88898,"line_start":1993,"line_end":1993,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88903,"byte_end":88929,"line_start":1994,"line_end":1994,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88934,"byte_end":88965,"line_start":1995,"line_end":1995,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88970,"byte_end":88973,"line_start":1996,"line_end":1996,"column_start":5,"column_end":8}},{"value":"/ let ((fizzbuzz, fizz), (buzz, other)): ((Vec<_>, Vec<_>), (Vec<_>, Vec<_>)) = (1..20)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":88978,"byte_end":89067,"line_start":1997,"line_end":1997,"column_start":5,"column_end":94}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89072,"byte_end":89096,"line_start":1998,"line_end":1998,"column_start":5,"column_end":29}},{"value":"/     .partition_map(|x| match (x % 3, x % 5) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89101,"byte_end":89150,"line_start":1999,"line_end":1999,"column_start":5,"column_end":54}},{"value":"/         (0, 0) => Left(Left(x)),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89155,"byte_end":89191,"line_start":2000,"line_end":2000,"column_start":5,"column_end":41}},{"value":"/         (0, _) => Left(Right(x)),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89196,"byte_end":89233,"line_start":2001,"line_end":2001,"column_start":5,"column_end":42}},{"value":"/         (_, 0) => Right(Left(x)),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89238,"byte_end":89275,"line_start":2002,"line_end":2002,"column_start":5,"column_end":42}},{"value":"/         (_, _) => Right(Right(x)),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89280,"byte_end":89318,"line_start":2003,"line_end":2003,"column_start":5,"column_end":43}},{"value":"/     });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89323,"byte_end":89334,"line_start":2004,"line_end":2004,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89339,"byte_end":89342,"line_start":2005,"line_end":2005,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(fizzbuzz, [15]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89347,"byte_end":89378,"line_start":2006,"line_end":2006,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(fizz, [3, 6, 9, 12, 18]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89383,"byte_end":89423,"line_start":2007,"line_end":2007,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(buzz, [5, 10]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89428,"byte_end":89458,"line_start":2008,"line_end":2008,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(other, [1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89463,"byte_end":89526,"line_start":2009,"line_end":2009,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89531,"byte_end":89538,"line_start":2010,"line_end":2010,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3916},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90192,"byte_end":90203,"line_start":2034,"line_end":2034,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::iter::ParallelIterator::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Intersperses clones of an element between items of this iterator.","sig":null,"attributes":[{"value":"/ Intersperses clones of an element between items of this iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89863,"byte_end":89932,"line_start":2022,"line_end":2022,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89937,"byte_end":89940,"line_start":2023,"line_end":2023,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89945,"byte_end":89959,"line_start":2024,"line_end":2024,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89964,"byte_end":89967,"line_start":2025,"line_end":2025,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89972,"byte_end":89979,"line_start":2026,"line_end":2026,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":89984,"byte_end":90010,"line_start":2027,"line_end":2027,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90015,"byte_end":90018,"line_start":2028,"line_end":2028,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90023,"byte_end":90049,"line_start":2029,"line_end":2029,"column_start":5,"column_end":31}},{"value":"/ let r: Vec<_> = x.into_par_iter().intersperse(-1).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90054,"byte_end":90118,"line_start":2030,"line_end":2030,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90123,"byte_end":90126,"line_start":2031,"line_end":2031,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(r, vec![1, -1, 2, -1, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90131,"byte_end":90172,"line_start":2032,"line_end":2032,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90177,"byte_end":90184,"line_start":2033,"line_end":2033,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90865,"byte_end":90880,"line_start":2053,"line_end":2053,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"::iter::ParallelIterator::drive_unindexed","value":"fn <C> (self, consumer: C) -> C::Result","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90346,"byte_end":90410,"line_start":2041,"line_end":2041,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90415,"byte_end":90471,"line_start":2042,"line_end":2042,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90476,"byte_end":90479,"line_start":2043,"line_end":2043,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90484,"byte_end":90545,"line_start":2044,"line_end":2044,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90550,"byte_end":90615,"line_start":2045,"line_end":2045,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90620,"byte_end":90679,"line_start":2046,"line_end":2046,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90684,"byte_end":90723,"line_start":2047,"line_end":2047,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90728,"byte_end":90731,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90736,"byte_end":90802,"line_start":2049,"line_end":2049,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90807,"byte_end":90821,"line_start":2050,"line_end":2050,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90826,"byte_end":90829,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90834,"byte_end":90857,"line_start":2052,"line_end":2052,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91767,"byte_end":91774,"line_start":2071,"line_end":2071,"column_start":8,"column_end":15},"name":"opt_len","qualname":"::iter::ParallelIterator::opt_len","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":90973,"byte_end":91037,"line_start":2057,"line_end":2057,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91042,"byte_end":91098,"line_start":2058,"line_end":2058,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91103,"byte_end":91106,"line_start":2059,"line_end":2059,"column_start":5,"column_end":8}},{"value":"/ Returns the number of items produced by this iterator, if known","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91111,"byte_end":91178,"line_start":2060,"line_end":2060,"column_start":5,"column_end":72}},{"value":"/ statically. This can be used by consumers to trigger special fast","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91183,"byte_end":91252,"line_start":2061,"line_end":2061,"column_start":5,"column_end":74}},{"value":"/ paths. Therefore, if `Some(_)` is returned, this iterator must only","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91257,"byte_end":91328,"line_start":2062,"line_end":2062,"column_start":5,"column_end":76}},{"value":"/ use the (indexed) `Consumer` methods when driving a consumer, such","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91333,"byte_end":91403,"line_start":2063,"line_end":2063,"column_start":5,"column_end":75}},{"value":"/ as `split_at()`. Calling `UnindexedConsumer::split_off_left()` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91408,"byte_end":91477,"line_start":2064,"line_end":2064,"column_start":5,"column_end":74}},{"value":"/ other `UnindexedConsumer` methods -- or returning an inaccurate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91482,"byte_end":91549,"line_start":2065,"line_end":2065,"column_start":5,"column_end":72}},{"value":"/ value -- may result in panics.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91554,"byte_end":91588,"line_start":2066,"line_end":2066,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91593,"byte_end":91596,"line_start":2067,"line_end":2067,"column_start":5,"column_end":8}},{"value":"/ This method is currently used to optimize `collect` for want","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91601,"byte_end":91665,"line_start":2068,"line_end":2068,"column_start":5,"column_end":69}},{"value":"/ of true Rust specialization; it may be removed when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91670,"byte_end":91725,"line_start":2069,"line_end":2069,"column_start":5,"column_end":60}},{"value":"/ specialization is stable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91730,"byte_end":91759,"line_start":2070,"line_end":2070,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":3925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92217,"byte_end":92240,"line_start":2090,"line_end":2090,"column_start":11,"column_end":34},"name":"IndexedParallelIterator","qualname":"::iter::IndexedParallelIterator","value":"IndexedParallelIterator: ParallelIterator","parent":null,"children":[{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3930},{"krate":0,"index":3932},{"krate":0,"index":3934},{"krate":0,"index":3936},{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3944},{"krate":0,"index":3950},{"krate":0,"index":3955},{"krate":0,"index":3957},{"krate":0,"index":3959},{"krate":0,"index":3961},{"krate":0,"index":3963},{"krate":0,"index":3965},{"krate":0,"index":3966},{"krate":0,"index":3967},{"krate":0,"index":3968},{"krate":0,"index":3969},{"krate":0,"index":3972},{"krate":0,"index":3975},{"krate":0,"index":3978},{"krate":0,"index":3980},{"krate":0,"index":3981},{"krate":0,"index":3982},{"krate":0,"index":3983},{"krate":0,"index":3984},{"krate":0,"index":3986}],"decl_id":null,"docs":" An iterator that supports \"random access\" to its data, meaning\n that you can split it at arbitrary indices and draw data from\n those points.","sig":null,"attributes":[{"value":"/ An iterator that supports \"random access\" to its data, meaning","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91979,"byte_end":92045,"line_start":2085,"line_end":2085,"column_start":1,"column_end":67}},{"value":"/ that you can split it at arbitrary indices and draw data from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92046,"byte_end":92111,"line_start":2086,"line_end":2086,"column_start":1,"column_end":66}},{"value":"/ those points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92112,"byte_end":92129,"line_start":2087,"line_end":2087,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92130,"byte_end":92133,"line_start":2088,"line_end":2088,"column_start":1,"column_end":4}},{"value":"/ **Note:** Not implemented for `u64`, `i64`, `u128`, or `i128` ranges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92134,"byte_end":92206,"line_start":2089,"line_end":2089,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92849,"byte_end":92865,"line_start":2109,"line_end":2109,"column_start":8,"column_end":24},"name":"collect_into_vec","qualname":"::iter::IndexedParallelIterator::collect_into_vec","value":"fn (self, target: &mut Vec<Self::Item>) -> ()","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Collects the results of the iterator into the specified\n vector. The vector is always truncated before execution\n begins. If possible, reusing the vector across calls can lead\n to better performance since it reuses the same backing buffer.","sig":null,"attributes":[{"value":"/ Collects the results of the iterator into the specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92265,"byte_end":92324,"line_start":2091,"line_end":2091,"column_start":5,"column_end":64}},{"value":"/ vector. The vector is always truncated before execution","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92329,"byte_end":92388,"line_start":2092,"line_end":2092,"column_start":5,"column_end":64}},{"value":"/ begins. If possible, reusing the vector across calls can lead","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92393,"byte_end":92458,"line_start":2093,"line_end":2093,"column_start":5,"column_end":70}},{"value":"/ to better performance since it reuses the same backing buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92463,"byte_end":92529,"line_start":2094,"line_end":2094,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92534,"byte_end":92537,"line_start":2095,"line_end":2095,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92542,"byte_end":92556,"line_start":2096,"line_end":2096,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92561,"byte_end":92564,"line_start":2097,"line_end":2097,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92569,"byte_end":92576,"line_start":2098,"line_end":2098,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92581,"byte_end":92607,"line_start":2099,"line_end":2099,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92612,"byte_end":92615,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92620,"byte_end":92659,"line_start":2101,"line_end":2101,"column_start":5,"column_end":44}},{"value":"/ let mut vec = vec![-1, -2, -3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92664,"byte_end":92699,"line_start":2102,"line_end":2102,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92704,"byte_end":92707,"line_start":2103,"line_end":2103,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92712,"byte_end":92738,"line_start":2104,"line_end":2104,"column_start":5,"column_end":31}},{"value":"/     .collect_into_vec(&mut vec);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92743,"byte_end":92779,"line_start":2105,"line_end":2105,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92784,"byte_end":92787,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92792,"byte_end":92829,"line_start":2107,"line_end":2107,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92834,"byte_end":92841,"line_start":2108,"line_end":2108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3927},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93675,"byte_end":93690,"line_start":2134,"line_end":2134,"column_start":8,"column_end":23},"name":"unzip_into_vecs","qualname":"::iter::IndexedParallelIterator::unzip_into_vecs","value":"fn <A, B> (self, left: &mut Vec<A>, right: &mut Vec<B>) -> ()","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Unzips the results of the iterator into the specified\n vectors. The vectors are always truncated before execution\n begins. If possible, reusing the vectors across calls can lead\n to better performance since they reuse the same backing buffer.","sig":null,"attributes":[{"value":"/ Unzips the results of the iterator into the specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92964,"byte_end":93021,"line_start":2113,"line_end":2113,"column_start":5,"column_end":62}},{"value":"/ vectors. The vectors are always truncated before execution","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93026,"byte_end":93088,"line_start":2114,"line_end":2114,"column_start":5,"column_end":67}},{"value":"/ begins. If possible, reusing the vectors across calls can lead","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93093,"byte_end":93159,"line_start":2115,"line_end":2115,"column_start":5,"column_end":71}},{"value":"/ to better performance since they reuse the same backing buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93164,"byte_end":93231,"line_start":2116,"line_end":2116,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93236,"byte_end":93239,"line_start":2117,"line_end":2117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93244,"byte_end":93258,"line_start":2118,"line_end":2118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93263,"byte_end":93266,"line_start":2119,"line_end":2119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93271,"byte_end":93278,"line_start":2120,"line_end":2120,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93283,"byte_end":93309,"line_start":2121,"line_end":2121,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93314,"byte_end":93317,"line_start":2122,"line_end":2122,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93322,"byte_end":93361,"line_start":2123,"line_end":2123,"column_start":5,"column_end":44}},{"value":"/ let mut left = vec![42; 10];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93366,"byte_end":93398,"line_start":2124,"line_end":2124,"column_start":5,"column_end":37}},{"value":"/ let mut right = vec![-1; 10];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93403,"byte_end":93436,"line_start":2125,"line_end":2125,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93441,"byte_end":93444,"line_start":2126,"line_end":2126,"column_start":5,"column_end":8}},{"value":"/ (10..15).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93449,"byte_end":93477,"line_start":2127,"line_end":2127,"column_start":5,"column_end":33}},{"value":"/     .enumerate()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93482,"byte_end":93502,"line_start":2128,"line_end":2128,"column_start":5,"column_end":25}},{"value":"/     .unzip_into_vecs(&mut left, &mut right);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93507,"byte_end":93555,"line_start":2129,"line_end":2129,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93560,"byte_end":93563,"line_start":2130,"line_end":2130,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93568,"byte_end":93606,"line_start":2131,"line_end":2131,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(right, [10, 11, 12, 13, 14]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93611,"byte_end":93655,"line_start":2132,"line_end":2132,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93660,"byte_end":93667,"line_start":2133,"line_end":2133,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94502,"byte_end":94505,"line_start":2161,"line_end":2161,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::IndexedParallelIterator::zip","value":"fn <Z> (self, zip_op: Z) -> Zip<Self, Z::Iter>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Iterates over tuples `(A, B)`, where the items `A` are from\n this iterator and `B` are from the iterator given as argument.\n Like the `zip` method on ordinary iterators, if the two\n iterators are of unequal length, you only get the items they\n have in common.","sig":null,"attributes":[{"value":"/ Iterates over tuples `(A, B)`, where the items `A` are from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93910,"byte_end":93973,"line_start":2143,"line_end":2143,"column_start":5,"column_end":68}},{"value":"/ this iterator and `B` are from the iterator given as argument.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":93978,"byte_end":94044,"line_start":2144,"line_end":2144,"column_start":5,"column_end":71}},{"value":"/ Like the `zip` method on ordinary iterators, if the two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94049,"byte_end":94108,"line_start":2145,"line_end":2145,"column_start":5,"column_end":64}},{"value":"/ iterators are of unequal length, you only get the items they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94113,"byte_end":94177,"line_start":2146,"line_end":2146,"column_start":5,"column_end":69}},{"value":"/ have in common.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94182,"byte_end":94201,"line_start":2147,"line_end":2147,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94206,"byte_end":94209,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94214,"byte_end":94228,"line_start":2149,"line_end":2149,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94233,"byte_end":94236,"line_start":2150,"line_end":2150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94241,"byte_end":94248,"line_start":2151,"line_end":2151,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94253,"byte_end":94279,"line_start":2152,"line_end":2152,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94284,"byte_end":94287,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (1..4)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94292,"byte_end":94323,"line_start":2154,"line_end":2154,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94328,"byte_end":94352,"line_start":2155,"line_end":2155,"column_start":5,"column_end":29}},{"value":"/     .zip(vec!['a', 'b', 'c'])","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94357,"byte_end":94390,"line_start":2156,"line_end":2156,"column_start":5,"column_end":38}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94395,"byte_end":94414,"line_start":2157,"line_end":2157,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94419,"byte_end":94422,"line_start":2158,"line_end":2158,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(1, 'a'), (2, 'b'), (3, 'c')]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94427,"byte_end":94482,"line_start":2159,"line_end":2159,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94487,"byte_end":94494,"line_start":2160,"line_end":2160,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3932},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95279,"byte_end":95285,"line_start":2188,"line_end":2188,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::iter::IndexedParallelIterator::zip_eq","value":"fn <Z> (self, zip_op: Z) -> ZipEq<Self, Z::Iter>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" The same as `Zip`, but requires that both iterators have the same length.","sig":null,"attributes":[{"value":"/ The same as `Zip`, but requires that both iterators have the same length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94697,"byte_end":94774,"line_start":2169,"line_end":2169,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94779,"byte_end":94782,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94787,"byte_end":94799,"line_start":2171,"line_end":2171,"column_start":5,"column_end":17}},{"value":"/ Will panic if `self` and `zip_op` are not the same length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94804,"byte_end":94866,"line_start":2172,"line_end":2172,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94871,"byte_end":94874,"line_start":2173,"line_end":2173,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94879,"byte_end":94898,"line_start":2174,"line_end":2174,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94903,"byte_end":94929,"line_start":2175,"line_end":2175,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94934,"byte_end":94937,"line_start":2176,"line_end":2176,"column_start":5,"column_end":8}},{"value":"/ let one = [1u8];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94942,"byte_end":94962,"line_start":2177,"line_end":2177,"column_start":5,"column_end":25}},{"value":"/ let two = [2u8, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94967,"byte_end":94990,"line_start":2178,"line_end":2178,"column_start":5,"column_end":28}},{"value":"/ let one_iter = one.par_iter();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":94995,"byte_end":95029,"line_start":2179,"line_end":2179,"column_start":5,"column_end":39}},{"value":"/ let two_iter = two.par_iter();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95034,"byte_end":95068,"line_start":2180,"line_end":2180,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95073,"byte_end":95076,"line_start":2181,"line_end":2181,"column_start":5,"column_end":8}},{"value":"/ // this will panic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95081,"byte_end":95103,"line_start":2182,"line_end":2182,"column_start":5,"column_end":27}},{"value":"/ let zipped: Vec<(&u8, &u8)> = one_iter.zip_eq(two_iter).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95108,"byte_end":95178,"line_start":2183,"line_end":2183,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95183,"byte_end":95186,"line_start":2184,"line_end":2184,"column_start":5,"column_end":8}},{"value":"/ // we should never get here","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95191,"byte_end":95222,"line_start":2185,"line_end":2185,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(1, zipped.len());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95227,"byte_end":95259,"line_start":2186,"line_end":2186,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95264,"byte_end":95271,"line_start":2187,"line_end":2187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96132,"byte_end":96142,"line_start":2212,"line_end":2212,"column_start":8,"column_end":18},"name":"interleave","qualname":"::iter::IndexedParallelIterator::interleave","value":"fn <I> (self, other: I) -> Interleave<Self, I::Iter>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator. Alternately yields elements from this iterator and\n the given iterator, until both are exhausted. If one iterator\n is exhausted before the other, the last elements are provided\n from the other.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95571,"byte_end":95632,"line_start":2198,"line_end":2198,"column_start":5,"column_end":66}},{"value":"/ iterator. Alternately yields elements from this iterator and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95637,"byte_end":95701,"line_start":2199,"line_end":2199,"column_start":5,"column_end":69}},{"value":"/ the given iterator, until both are exhausted. If one iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95706,"byte_end":95771,"line_start":2200,"line_end":2200,"column_start":5,"column_end":70}},{"value":"/ is exhausted before the other, the last elements are provided","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95776,"byte_end":95841,"line_start":2201,"line_end":2201,"column_start":5,"column_end":70}},{"value":"/ from the other.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95846,"byte_end":95865,"line_start":2202,"line_end":2202,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95870,"byte_end":95873,"line_start":2203,"line_end":2203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95878,"byte_end":95892,"line_start":2204,"line_end":2204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95897,"byte_end":95900,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95905,"byte_end":95912,"line_start":2206,"line_end":2206,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95917,"byte_end":95943,"line_start":2207,"line_end":2207,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2], vec![3, 4, 5, 6]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":95948,"byte_end":95996,"line_start":2208,"line_end":2208,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave(y).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96001,"byte_end":96065,"line_start":2209,"line_end":2209,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(r, vec![1, 3, 2, 4, 5, 6]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96070,"byte_end":96112,"line_start":2210,"line_end":2210,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96117,"byte_end":96124,"line_start":2211,"line_end":2211,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3936},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96760,"byte_end":96779,"line_start":2231,"line_end":2231,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::iter::IndexedParallelIterator::interleave_shortest","value":"fn <I> (self, other: I) -> InterleaveShortest<Self, I::Iter>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator, until one is exhausted.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96384,"byte_end":96445,"line_start":2220,"line_end":2220,"column_start":5,"column_end":66}},{"value":"/ iterator, until one is exhausted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96450,"byte_end":96487,"line_start":2221,"line_end":2221,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96492,"byte_end":96495,"line_start":2222,"line_end":2222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96500,"byte_end":96514,"line_start":2223,"line_end":2223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96519,"byte_end":96522,"line_start":2224,"line_end":2224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96527,"byte_end":96534,"line_start":2225,"line_end":2225,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96539,"byte_end":96565,"line_start":2226,"line_end":2226,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2, 3, 4], vec![5, 6]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96570,"byte_end":96618,"line_start":2227,"line_end":2227,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave_shortest(y).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96623,"byte_end":96696,"line_start":2228,"line_end":2228,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(r, vec![1, 5, 2, 6, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96701,"byte_end":96740,"line_start":2229,"line_end":2229,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":96745,"byte_end":96752,"line_start":2230,"line_end":2230,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3938},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97960,"byte_end":97966,"line_start":2259,"line_end":2259,"column_start":8,"column_end":14},"name":"chunks","qualname":"::iter::IndexedParallelIterator::chunks","value":"fn (self, chunk_size: usize) -> Chunks<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Splits an iterator up into fixed-size chunks.","sig":null,"attributes":[{"value":"/ Splits an iterator up into fixed-size chunks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97037,"byte_end":97086,"line_start":2239,"line_end":2239,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97091,"byte_end":97094,"line_start":2240,"line_end":2240,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that returns `Vec`s of the given number of elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97099,"byte_end":97175,"line_start":2241,"line_end":2241,"column_start":5,"column_end":81}},{"value":"/ If the number of elements in the iterator is not divisible by `chunk_size`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97180,"byte_end":97259,"line_start":2242,"line_end":2242,"column_start":5,"column_end":84}},{"value":"/ the last chunk may be shorter than `chunk_size`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97264,"byte_end":97316,"line_start":2243,"line_end":2243,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97321,"byte_end":97324,"line_start":2244,"line_end":2244,"column_start":5,"column_end":8}},{"value":"/ See also [`par_chunks()`] and [`par_chunks_mut()`] for similar behavior on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97329,"byte_end":97407,"line_start":2245,"line_end":2245,"column_start":5,"column_end":83}},{"value":"/ slices, without having to allocate intermediate `Vec`s for the chunks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97412,"byte_end":97486,"line_start":2246,"line_end":2246,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97491,"byte_end":97494,"line_start":2247,"line_end":2247,"column_start":5,"column_end":8}},{"value":"/ [`par_chunks()`]: ../slice/trait.ParallelSlice.html#method.par_chunks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97499,"byte_end":97572,"line_start":2248,"line_end":2248,"column_start":5,"column_end":78}},{"value":"/ [`par_chunks_mut()`]: ../slice/trait.ParallelSliceMut.html#method.par_chunks_mut","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97577,"byte_end":97661,"line_start":2249,"line_end":2249,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97666,"byte_end":97669,"line_start":2250,"line_end":2250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97674,"byte_end":97688,"line_start":2251,"line_end":2251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97693,"byte_end":97696,"line_start":2252,"line_end":2252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97701,"byte_end":97708,"line_start":2253,"line_end":2253,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97713,"byte_end":97739,"line_start":2254,"line_end":2254,"column_start":5,"column_end":31}},{"value":"/ let a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97744,"byte_end":97792,"line_start":2255,"line_end":2255,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<Vec<i32>> = a.into_par_iter().chunks(3).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97797,"byte_end":97862,"line_start":2256,"line_end":2256,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(r, vec![vec![1,2,3], vec![4,5,6], vec![7,8,9], vec![10]]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97867,"byte_end":97940,"line_start":2257,"line_end":2257,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":97945,"byte_end":97952,"line_start":2258,"line_end":2258,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98578,"byte_end":98581,"line_start":2278,"line_end":2278,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::IndexedParallelIterator::cmp","value":"fn <I> (self, other: I) -> Ordering","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98124,"byte_end":98208,"line_start":2264,"line_end":2264,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98213,"byte_end":98225,"line_start":2265,"line_end":2265,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98230,"byte_end":98233,"line_start":2266,"line_end":2266,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98238,"byte_end":98252,"line_start":2267,"line_end":2267,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98257,"byte_end":98260,"line_start":2268,"line_end":2268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98265,"byte_end":98272,"line_start":2269,"line_end":2269,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98277,"byte_end":98303,"line_start":2270,"line_end":2270,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98308,"byte_end":98338,"line_start":2271,"line_end":2271,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98343,"byte_end":98346,"line_start":2272,"line_end":2272,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98351,"byte_end":98377,"line_start":2273,"line_end":2273,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 3, 0]), Less);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98382,"byte_end":98437,"line_start":2274,"line_end":2274,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2, 3]), Equal);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98442,"byte_end":98498,"line_start":2275,"line_end":2275,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2]), Greater);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98503,"byte_end":98558,"line_start":2276,"line_end":2276,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":98563,"byte_end":98570,"line_start":2277,"line_end":2277,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3944},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99810,"byte_end":99821,"line_start":2318,"line_end":2318,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::IndexedParallelIterator::partial_cmp","value":"fn <I> (self, other: I) -> Option<Ordering>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99196,"byte_end":99280,"line_start":2302,"line_end":2302,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99285,"byte_end":99297,"line_start":2303,"line_end":2303,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99302,"byte_end":99305,"line_start":2304,"line_end":2304,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99310,"byte_end":99324,"line_start":2305,"line_end":2305,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99329,"byte_end":99332,"line_start":2306,"line_end":2306,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99337,"byte_end":99344,"line_start":2307,"line_end":2307,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99349,"byte_end":99375,"line_start":2308,"line_end":2308,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99380,"byte_end":99410,"line_start":2309,"line_end":2309,"column_start":5,"column_end":35}},{"value":"/ use std::f64::NAN;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99415,"byte_end":99437,"line_start":2310,"line_end":2310,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99442,"byte_end":99445,"line_start":2311,"line_end":2311,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1.0, 2.0, 3.0];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99450,"byte_end":99482,"line_start":2312,"line_end":2312,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 3.0, 0.0]), Some(Less));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99487,"byte_end":99562,"line_start":2313,"line_end":2313,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0, 3.0]), Some(Equal));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99567,"byte_end":99643,"line_start":2314,"line_end":2314,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0]), Some(Greater));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99648,"byte_end":99721,"line_start":2315,"line_end":2315,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, NAN]), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99726,"byte_end":99790,"line_start":2316,"line_end":2316,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":99795,"byte_end":99802,"line_start":2317,"line_end":2317,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3950},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":100600,"byte_end":100602,"line_start":2344,"line_end":2344,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::IndexedParallelIterator::eq","value":"fn <I> (self, other: I) -> bool","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are equal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":100497,"byte_end":100554,"line_start":2342,"line_end":2342,"column_start":5,"column_end":62}},{"value":"/ are equal to those of another","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":100559,"byte_end":100592,"line_start":2343,"line_end":2343,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3955},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101104,"byte_end":101106,"line_start":2361,"line_end":2361,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::IndexedParallelIterator::ne","value":"fn <I> (self, other: I) -> bool","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are unequal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":100999,"byte_end":101056,"line_start":2359,"line_end":2359,"column_start":5,"column_end":62}},{"value":"/ are unequal to those of another","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101061,"byte_end":101096,"line_start":2360,"line_end":2360,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3957},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101423,"byte_end":101425,"line_start":2372,"line_end":2372,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::IndexedParallelIterator::lt","value":"fn <I> (self, other: I) -> bool","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically less than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101300,"byte_end":101357,"line_start":2370,"line_end":2370,"column_start":5,"column_end":62}},{"value":"/ are lexicographically less than those of another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101362,"byte_end":101415,"line_start":2371,"line_end":2371,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3959},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101764,"byte_end":101766,"line_start":2383,"line_end":2383,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::IndexedParallelIterator::le","value":"fn <I> (self, other: I) -> bool","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101652,"byte_end":101709,"line_start":2381,"line_end":2381,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":101714,"byte_end":101756,"line_start":2382,"line_end":2382,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102174,"byte_end":102176,"line_start":2395,"line_end":2395,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::IndexedParallelIterator::gt","value":"fn <I> (self, other: I) -> bool","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically greater than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102048,"byte_end":102105,"line_start":2393,"line_end":2393,"column_start":5,"column_end":62}},{"value":"/ are lexicographically greater than those of another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102110,"byte_end":102166,"line_start":2394,"line_end":2394,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3963},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102518,"byte_end":102520,"line_start":2406,"line_end":2406,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::IndexedParallelIterator::ge","value":"fn <I> (self, other: I) -> bool","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102406,"byte_end":102463,"line_start":2404,"line_end":2404,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102468,"byte_end":102510,"line_start":2405,"line_end":2405,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3965},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103174,"byte_end":103183,"line_start":2431,"line_end":2431,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::IndexedParallelIterator::enumerate","value":"fn (self) -> Enumerate<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Yields an index along with each item.","sig":null,"attributes":[{"value":"/ Yields an index along with each item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102805,"byte_end":102846,"line_start":2416,"line_end":2416,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102851,"byte_end":102854,"line_start":2417,"line_end":2417,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102859,"byte_end":102873,"line_start":2418,"line_end":2418,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102878,"byte_end":102881,"line_start":2419,"line_end":2419,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102886,"byte_end":102893,"line_start":2420,"line_end":2420,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102898,"byte_end":102924,"line_start":2421,"line_end":2421,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102929,"byte_end":102932,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ let chars = vec!['a', 'b', 'c'];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102937,"byte_end":102973,"line_start":2423,"line_end":2423,"column_start":5,"column_end":41}},{"value":"/ let result: Vec<_> = chars","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":102978,"byte_end":103008,"line_start":2424,"line_end":2424,"column_start":5,"column_end":35}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103013,"byte_end":103037,"line_start":2425,"line_end":2425,"column_start":5,"column_end":29}},{"value":"/     .enumerate()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103042,"byte_end":103062,"line_start":2426,"line_end":2426,"column_start":5,"column_end":25}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103067,"byte_end":103086,"line_start":2427,"line_end":2427,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103091,"byte_end":103094,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(0, 'a'), (1, 'b'), (2, 'c')]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103099,"byte_end":103154,"line_start":2429,"line_end":2429,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103159,"byte_end":103166,"line_start":2430,"line_end":2430,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3966},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103719,"byte_end":103726,"line_start":2455,"line_end":2455,"column_start":8,"column_end":15},"name":"step_by","qualname":"::iter::IndexedParallelIterator::step_by","value":"fn (self, step: usize) -> StepBy<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Creates an iterator that steps by the given amount","sig":null,"attributes":[{"value":"/ Creates an iterator that steps by the given amount","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103251,"byte_end":103305,"line_start":2435,"line_end":2435,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103310,"byte_end":103313,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103318,"byte_end":103332,"line_start":2437,"line_end":2437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103337,"byte_end":103340,"line_start":2438,"line_end":2438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103345,"byte_end":103352,"line_start":2439,"line_end":2439,"column_start":5,"column_end":12}},{"value":"/use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103357,"byte_end":103382,"line_start":2440,"line_end":2440,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103387,"byte_end":103390,"line_start":2441,"line_end":2441,"column_start":5,"column_end":8}},{"value":"/ let range = (3..10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103395,"byte_end":103419,"line_start":2442,"line_end":2442,"column_start":5,"column_end":29}},{"value":"/ let result: Vec<i32> = range","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103424,"byte_end":103456,"line_start":2443,"line_end":2443,"column_start":5,"column_end":37}},{"value":"/    .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103461,"byte_end":103484,"line_start":2444,"line_end":2444,"column_start":5,"column_end":28}},{"value":"/    .step_by(3)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103489,"byte_end":103507,"line_start":2445,"line_end":2445,"column_start":5,"column_end":23}},{"value":"/    .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103512,"byte_end":103530,"line_start":2446,"line_end":2446,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103535,"byte_end":103538,"line_start":2447,"line_end":2447,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [3, 6, 9])","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103543,"byte_end":103576,"line_start":2448,"line_end":2448,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103581,"byte_end":103588,"line_start":2449,"line_end":2449,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103593,"byte_end":103596,"line_start":2450,"line_end":2450,"column_start":5,"column_end":8}},{"value":"/ # Compatibility","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103601,"byte_end":103620,"line_start":2451,"line_end":2451,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103625,"byte_end":103628,"line_start":2452,"line_end":2452,"column_start":5,"column_end":8}},{"value":"/ This method is only available on Rust 1.38 or greater.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103633,"byte_end":103691,"line_start":2453,"line_end":2453,"column_start":5,"column_end":63}},{"value":"cfg(step_by)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103696,"byte_end":103711,"line_start":2454,"line_end":2454,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104142,"byte_end":104146,"line_start":2473,"line_end":2473,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::IndexedParallelIterator::skip","value":"fn (self, n: usize) -> Skip<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Creates an iterator that skips the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that skips the first `n` elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103807,"byte_end":103865,"line_start":2459,"line_end":2459,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103870,"byte_end":103873,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103878,"byte_end":103892,"line_start":2461,"line_end":2461,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103897,"byte_end":103900,"line_start":2462,"line_end":2462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103905,"byte_end":103912,"line_start":2463,"line_end":2463,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103917,"byte_end":103943,"line_start":2464,"line_end":2464,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103948,"byte_end":103951,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103956,"byte_end":103989,"line_start":2466,"line_end":2466,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":103994,"byte_end":104018,"line_start":2467,"line_end":2467,"column_start":5,"column_end":29}},{"value":"/     .skip(95)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104023,"byte_end":104040,"line_start":2468,"line_end":2468,"column_start":5,"column_end":22}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104045,"byte_end":104064,"line_start":2469,"line_end":2469,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104069,"byte_end":104072,"line_start":2470,"line_end":2470,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [95, 96, 97, 98, 99]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104077,"byte_end":104122,"line_start":2471,"line_end":2471,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104127,"byte_end":104134,"line_start":2472,"line_end":2472,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3968},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104547,"byte_end":104551,"line_start":2491,"line_end":2491,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::IndexedParallelIterator::take","value":"fn (self, n: usize) -> Take<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Creates an iterator that yields the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that yields the first `n` elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104217,"byte_end":104276,"line_start":2477,"line_end":2477,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104281,"byte_end":104284,"line_start":2478,"line_end":2478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104289,"byte_end":104303,"line_start":2479,"line_end":2479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104308,"byte_end":104311,"line_start":2480,"line_end":2480,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104316,"byte_end":104323,"line_start":2481,"line_end":2481,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104328,"byte_end":104354,"line_start":2482,"line_end":2482,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104359,"byte_end":104362,"line_start":2483,"line_end":2483,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104367,"byte_end":104400,"line_start":2484,"line_end":2484,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104405,"byte_end":104429,"line_start":2485,"line_end":2485,"column_start":5,"column_end":29}},{"value":"/     .take(5)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104434,"byte_end":104450,"line_start":2486,"line_end":2486,"column_start":5,"column_end":21}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104455,"byte_end":104474,"line_start":2487,"line_end":2487,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104479,"byte_end":104482,"line_start":2488,"line_end":2488,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104487,"byte_end":104527,"line_start":2489,"line_end":2489,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104532,"byte_end":104539,"line_start":2490,"line_end":2490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3969},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105265,"byte_end":105277,"line_start":2513,"line_end":2513,"column_start":8,"column_end":20},"name":"position_any","qualname":"::iter::IndexedParallelIterator::position_any","value":"fn <P> (self, predicate: P) -> Option<usize>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and returns its index.  Like\n `ParallelIterator::find_any`, the parallel search will not\n necessarily find the **first** match, and once a match is\n found we'll attempt to stop processing any more.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104622,"byte_end":104682,"line_start":2495,"line_end":2495,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and returns its index.  Like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104687,"byte_end":104748,"line_start":2496,"line_end":2496,"column_start":5,"column_end":66}},{"value":"/ `ParallelIterator::find_any`, the parallel search will not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104753,"byte_end":104815,"line_start":2497,"line_end":2497,"column_start":5,"column_end":67}},{"value":"/ necessarily find the **first** match, and once a match is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104820,"byte_end":104881,"line_start":2498,"line_end":2498,"column_start":5,"column_end":66}},{"value":"/ found we'll attempt to stop processing any more.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104886,"byte_end":104938,"line_start":2499,"line_end":2499,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104943,"byte_end":104946,"line_start":2500,"line_end":2500,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104951,"byte_end":104965,"line_start":2501,"line_end":2501,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104970,"byte_end":104973,"line_start":2502,"line_end":2502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104978,"byte_end":104985,"line_start":2503,"line_end":2503,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":104990,"byte_end":105016,"line_start":2504,"line_end":2504,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105021,"byte_end":105024,"line_start":2505,"line_end":2505,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105029,"byte_end":105054,"line_start":2506,"line_end":2506,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105059,"byte_end":105062,"line_start":2507,"line_end":2507,"column_start":5,"column_end":8}},{"value":"/ let i = a.par_iter().position_any(|&x| x == 3).expect(\"found\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105067,"byte_end":105134,"line_start":2508,"line_end":2508,"column_start":5,"column_end":72}},{"value":"/ assert!(i == 2 || i == 3);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105139,"byte_end":105169,"line_start":2509,"line_end":2509,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105174,"byte_end":105177,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_any(|&x| x == 100), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105182,"byte_end":105245,"line_start":2511,"line_end":2511,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105250,"byte_end":105257,"line_start":2512,"line_end":2512,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3972},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106518,"byte_end":106532,"line_start":2550,"line_end":2550,"column_start":8,"column_end":22},"name":"position_first","qualname":"::iter::IndexedParallelIterator::position_first","value":"fn <P> (self, predicate: P) -> Option<usize>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105576,"byte_end":105649,"line_start":2526,"line_end":2526,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105654,"byte_end":105714,"line_start":2527,"line_end":2527,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105719,"byte_end":105722,"line_start":2528,"line_end":2528,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_first`, once a match is found,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105727,"byte_end":105790,"line_start":2529,"line_end":2529,"column_start":5,"column_end":68}},{"value":"/ all attempts to the right of the match will be stopped, while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105795,"byte_end":105860,"line_start":2530,"line_end":2530,"column_start":5,"column_end":70}},{"value":"/ attempts to the left must continue in case an earlier match","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105865,"byte_end":105928,"line_start":2531,"line_end":2531,"column_start":5,"column_end":68}},{"value":"/ is found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105933,"byte_end":105946,"line_start":2532,"line_end":2532,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105951,"byte_end":105954,"line_start":2533,"line_end":2533,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":105959,"byte_end":106030,"line_start":2534,"line_end":2534,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106035,"byte_end":106106,"line_start":2535,"line_end":2535,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106111,"byte_end":106182,"line_start":2536,"line_end":2536,"column_start":5,"column_end":76}},{"value":"/ `position_any` is a better choice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106187,"byte_end":106225,"line_start":2537,"line_end":2537,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106230,"byte_end":106233,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106238,"byte_end":106252,"line_start":2539,"line_end":2539,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106257,"byte_end":106260,"line_start":2540,"line_end":2540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106265,"byte_end":106272,"line_start":2541,"line_end":2541,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106277,"byte_end":106303,"line_start":2542,"line_end":2542,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106308,"byte_end":106311,"line_start":2543,"line_end":2543,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106316,"byte_end":106341,"line_start":2544,"line_end":2544,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106346,"byte_end":106349,"line_start":2545,"line_end":2545,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 3), Some(2));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106354,"byte_end":106420,"line_start":2546,"line_end":2546,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106425,"byte_end":106428,"line_start":2547,"line_end":2547,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 100), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106433,"byte_end":106498,"line_start":2548,"line_end":2548,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106503,"byte_end":106510,"line_start":2549,"line_end":2549,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107739,"byte_end":107752,"line_start":2587,"line_end":2587,"column_start":8,"column_end":21},"name":"position_last","qualname":"::iter::IndexedParallelIterator::position_last","value":"fn <P> (self, predicate: P) -> Option<usize>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106833,"byte_end":106905,"line_start":2563,"line_end":2563,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106910,"byte_end":106970,"line_start":2564,"line_end":2564,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106975,"byte_end":106978,"line_start":2565,"line_end":2565,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_last`, once a match is found,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":106983,"byte_end":107045,"line_start":2566,"line_end":2566,"column_start":5,"column_end":67}},{"value":"/ all attempts to the left of the match will be stopped, while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107050,"byte_end":107114,"line_start":2567,"line_end":2567,"column_start":5,"column_end":69}},{"value":"/ attempts to the right must continue in case a later match","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107119,"byte_end":107180,"line_start":2568,"line_end":2568,"column_start":5,"column_end":66}},{"value":"/ is found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107185,"byte_end":107198,"line_start":2569,"line_end":2569,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107203,"byte_end":107206,"line_start":2570,"line_end":2570,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107211,"byte_end":107282,"line_start":2571,"line_end":2571,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107287,"byte_end":107359,"line_start":2572,"line_end":2572,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `position_any` is a better","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107364,"byte_end":107432,"line_start":2573,"line_end":2573,"column_start":5,"column_end":73}},{"value":"/ choice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107437,"byte_end":107448,"line_start":2574,"line_end":2574,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107453,"byte_end":107456,"line_start":2575,"line_end":2575,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107461,"byte_end":107475,"line_start":2576,"line_end":2576,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107480,"byte_end":107483,"line_start":2577,"line_end":2577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107488,"byte_end":107495,"line_start":2578,"line_end":2578,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107500,"byte_end":107526,"line_start":2579,"line_end":2579,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107531,"byte_end":107534,"line_start":2580,"line_end":2580,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107539,"byte_end":107564,"line_start":2581,"line_end":2581,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107569,"byte_end":107572,"line_start":2582,"line_end":2582,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 3), Some(3));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107577,"byte_end":107642,"line_start":2583,"line_end":2583,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107647,"byte_end":107650,"line_start":2584,"line_end":2584,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 100), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107655,"byte_end":107719,"line_start":2585,"line_end":2585,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":107724,"byte_end":107731,"line_start":2586,"line_end":2586,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3978},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108240,"byte_end":108248,"line_start":2605,"line_end":2605,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::IndexedParallelIterator::position","value":"fn <P> (self, predicate: P) -> Option<usize>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `position` does not search in order -- use `position_any`, \\\\\n                `position_first`, or `position_last`\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108071,"byte_end":108232,"line_start":2601,"line_end":2604,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":3980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108757,"byte_end":108760,"line_start":2627,"line_end":2627,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::IndexedParallelIterator::rev","value":"fn (self) -> Rev<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Produces a new iterator with the elements of this iterator in\n reverse order.","sig":null,"attributes":[{"value":"/ Produces a new iterator with the elements of this iterator in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108402,"byte_end":108467,"line_start":2612,"line_end":2612,"column_start":5,"column_end":70}},{"value":"/ reverse order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108472,"byte_end":108490,"line_start":2613,"line_end":2613,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108495,"byte_end":108498,"line_start":2614,"line_end":2614,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108503,"byte_end":108517,"line_start":2615,"line_end":2615,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108522,"byte_end":108525,"line_start":2616,"line_end":2616,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108530,"byte_end":108537,"line_start":2617,"line_end":2617,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108542,"byte_end":108568,"line_start":2618,"line_end":2618,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108573,"byte_end":108576,"line_start":2619,"line_end":2619,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..5)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108581,"byte_end":108612,"line_start":2620,"line_end":2620,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108617,"byte_end":108641,"line_start":2621,"line_end":2621,"column_start":5,"column_end":29}},{"value":"/     .rev()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108646,"byte_end":108660,"line_start":2622,"line_end":2622,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108665,"byte_end":108684,"line_start":2623,"line_end":2623,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108689,"byte_end":108692,"line_start":2624,"line_end":2624,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [4, 3, 2, 1, 0]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108697,"byte_end":108737,"line_start":2625,"line_end":2625,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108742,"byte_end":108749,"line_start":2626,"line_end":2626,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3981},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109577,"byte_end":109589,"line_start":2653,"line_end":2653,"column_start":8,"column_end":20},"name":"with_min_len","qualname":"::iter::IndexedParallelIterator::with_min_len","value":"fn (self, min: usize) -> MinLen<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Sets the minimum length of iterators desired to process in each\n thread.  Rayon will not split any smaller than this length, but\n of course an iterator could already be smaller to begin with.","sig":null,"attributes":[{"value":"/ Sets the minimum length of iterators desired to process in each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108816,"byte_end":108883,"line_start":2631,"line_end":2631,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will not split any smaller than this length, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108888,"byte_end":108955,"line_start":2632,"line_end":2632,"column_start":5,"column_end":72}},{"value":"/ of course an iterator could already be smaller to begin with.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":108960,"byte_end":109025,"line_start":2633,"line_end":2633,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109030,"byte_end":109033,"line_start":2634,"line_end":2634,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use greater of the two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109038,"byte_end":109107,"line_start":2635,"line_end":2635,"column_start":5,"column_end":74}},{"value":"/ minimums.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109112,"byte_end":109125,"line_start":2636,"line_end":2636,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109130,"byte_end":109196,"line_start":2637,"line_end":2637,"column_start":5,"column_end":71}},{"value":"/ their own minimum length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109201,"byte_end":109230,"line_start":2638,"line_end":2638,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109235,"byte_end":109238,"line_start":2639,"line_end":2639,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109243,"byte_end":109257,"line_start":2640,"line_end":2640,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109262,"byte_end":109265,"line_start":2641,"line_end":2641,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109270,"byte_end":109277,"line_start":2642,"line_end":2642,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109282,"byte_end":109308,"line_start":2643,"line_end":2643,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109313,"byte_end":109316,"line_start":2644,"line_end":2644,"column_start":5,"column_end":8}},{"value":"/ let min = (0..1_000_000)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109321,"byte_end":109349,"line_start":2645,"line_end":2645,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109354,"byte_end":109378,"line_start":2646,"line_end":2646,"column_start":5,"column_end":29}},{"value":"/     .with_min_len(1234)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109383,"byte_end":109410,"line_start":2647,"line_end":2647,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109415,"byte_end":109490,"line_start":2648,"line_end":2648,"column_start":5,"column_end":80}},{"value":"/     .min().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109495,"byte_end":109519,"line_start":2649,"line_end":2649,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109524,"byte_end":109527,"line_start":2650,"line_end":2650,"column_start":5,"column_end":8}},{"value":"/ assert!(min >= 1234);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109532,"byte_end":109557,"line_start":2651,"line_end":2651,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109562,"byte_end":109569,"line_start":2652,"line_end":2652,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110528,"byte_end":110540,"line_start":2681,"line_end":2681,"column_start":8,"column_end":20},"name":"with_max_len","qualname":"::iter::IndexedParallelIterator::with_max_len","value":"fn (self, max: usize) -> MaxLen<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Sets the maximum length of iterators desired to process in each\n thread.  Rayon will try to split at least below this length,\n unless that would put it below the length from `with_min_len()`.\n For example, given min=10 and max=15, a length of 16 will not be\n split any further.","sig":null,"attributes":[{"value":"/ Sets the maximum length of iterators desired to process in each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109668,"byte_end":109735,"line_start":2657,"line_end":2657,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will try to split at least below this length,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109740,"byte_end":109804,"line_start":2658,"line_end":2658,"column_start":5,"column_end":69}},{"value":"/ unless that would put it below the length from `with_min_len()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109809,"byte_end":109877,"line_start":2659,"line_end":2659,"column_start":5,"column_end":73}},{"value":"/ For example, given min=10 and max=15, a length of 16 will not be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109882,"byte_end":109950,"line_start":2660,"line_end":2660,"column_start":5,"column_end":73}},{"value":"/ split any further.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109955,"byte_end":109977,"line_start":2661,"line_end":2661,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109982,"byte_end":109985,"line_start":2662,"line_end":2662,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use lesser of the two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":109990,"byte_end":110058,"line_start":2663,"line_end":2663,"column_start":5,"column_end":73}},{"value":"/ maximums.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110063,"byte_end":110076,"line_start":2664,"line_end":2664,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110081,"byte_end":110147,"line_start":2665,"line_end":2665,"column_start":5,"column_end":71}},{"value":"/ their own maximum length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110152,"byte_end":110181,"line_start":2666,"line_end":2666,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110186,"byte_end":110189,"line_start":2667,"line_end":2667,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110194,"byte_end":110208,"line_start":2668,"line_end":2668,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110213,"byte_end":110216,"line_start":2669,"line_end":2669,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110221,"byte_end":110228,"line_start":2670,"line_end":2670,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110233,"byte_end":110259,"line_start":2671,"line_end":2671,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110264,"byte_end":110267,"line_start":2672,"line_end":2672,"column_start":5,"column_end":8}},{"value":"/ let max = (0..1_000_000)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110272,"byte_end":110300,"line_start":2673,"line_end":2673,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110305,"byte_end":110329,"line_start":2674,"line_end":2674,"column_start":5,"column_end":29}},{"value":"/     .with_max_len(1234)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110334,"byte_end":110361,"line_start":2675,"line_end":2675,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110366,"byte_end":110441,"line_start":2676,"line_end":2676,"column_start":5,"column_end":80}},{"value":"/     .max().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110446,"byte_end":110470,"line_start":2677,"line_end":2677,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110475,"byte_end":110478,"line_start":2678,"line_end":2678,"column_start":5,"column_end":8}},{"value":"/ assert!(max <= 1234);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110483,"byte_end":110508,"line_start":2679,"line_end":2679,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110513,"byte_end":110520,"line_start":2680,"line_end":2680,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111028,"byte_end":111031,"line_start":2699,"line_end":2699,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::IndexedParallelIterator::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Produces an exact count of how many items this iterator will\n produce, presuming no panic occurs.","sig":null,"attributes":[{"value":"/ Produces an exact count of how many items this iterator will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110619,"byte_end":110683,"line_start":2685,"line_end":2685,"column_start":5,"column_end":69}},{"value":"/ produce, presuming no panic occurs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110688,"byte_end":110727,"line_start":2686,"line_end":2686,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110732,"byte_end":110735,"line_start":2687,"line_end":2687,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110740,"byte_end":110754,"line_start":2688,"line_end":2688,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110759,"byte_end":110762,"line_start":2689,"line_end":2689,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110767,"byte_end":110774,"line_start":2690,"line_end":2690,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110779,"byte_end":110805,"line_start":2691,"line_end":2691,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110810,"byte_end":110813,"line_start":2692,"line_end":2692,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..100).into_par_iter().zip(vec![0; 10]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110818,"byte_end":110879,"line_start":2693,"line_end":2693,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(par_iter.len(), 10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110884,"byte_end":110919,"line_start":2694,"line_end":2694,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110924,"byte_end":110927,"line_start":2695,"line_end":2695,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110932,"byte_end":110973,"line_start":2696,"line_end":2696,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec.len(), 10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":110978,"byte_end":111008,"line_start":2697,"line_end":2697,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111013,"byte_end":111020,"line_start":2698,"line_end":2698,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111731,"byte_end":111736,"line_start":2715,"line_end":2715,"column_start":8,"column_end":13},"name":"drive","qualname":"::iter::IndexedParallelIterator::drive","value":"fn <C> (self, consumer: C) -> C::Result","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111054,"byte_end":111118,"line_start":2701,"line_end":2701,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111123,"byte_end":111179,"line_start":2702,"line_end":2702,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111184,"byte_end":111187,"line_start":2703,"line_end":2703,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111192,"byte_end":111253,"line_start":2704,"line_end":2704,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111258,"byte_end":111323,"line_start":2705,"line_end":2705,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111328,"byte_end":111387,"line_start":2706,"line_end":2706,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel. If a split does happen, it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111392,"byte_end":111458,"line_start":2707,"line_end":2707,"column_start":5,"column_end":71}},{"value":"/ will inform the consumer of the index where the split should","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111463,"byte_end":111527,"line_start":2708,"line_end":2708,"column_start":5,"column_end":69}},{"value":"/ occur (unlike `ParallelIterator::drive_unindexed()`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111532,"byte_end":111589,"line_start":2709,"line_end":2709,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111594,"byte_end":111597,"line_start":2710,"line_end":2710,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111602,"byte_end":111668,"line_start":2711,"line_end":2711,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111673,"byte_end":111687,"line_start":2712,"line_end":2712,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111692,"byte_end":111695,"line_start":2713,"line_end":2713,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111700,"byte_end":111723,"line_start":2714,"line_end":2714,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3986},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112512,"byte_end":112525,"line_start":2732,"line_end":2732,"column_start":8,"column_end":21},"name":"with_producer","qualname":"::iter::IndexedParallelIterator::with_producer","value":"fn <CB> (self, callback: CB) -> CB::Output","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111800,"byte_end":111864,"line_start":2717,"line_end":2717,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111869,"byte_end":111925,"line_start":2718,"line_end":2718,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111930,"byte_end":111933,"line_start":2719,"line_end":2719,"column_start":5,"column_end":8}},{"value":"/ This method converts the iterator into a producer P and then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":111938,"byte_end":112002,"line_start":2720,"line_end":2720,"column_start":5,"column_end":69}},{"value":"/ invokes `callback.callback()` with P. Note that the type of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112007,"byte_end":112070,"line_start":2721,"line_end":2721,"column_start":5,"column_end":68}},{"value":"/ this producer is not defined as part of the API, since","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112075,"byte_end":112133,"line_start":2722,"line_end":2722,"column_start":5,"column_end":63}},{"value":"/ `callback` must be defined generically for all producers. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112138,"byte_end":112204,"line_start":2723,"line_end":2723,"column_start":5,"column_end":71}},{"value":"/ allows the producer type to contain references; it also means","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112209,"byte_end":112274,"line_start":2724,"line_end":2724,"column_start":5,"column_end":70}},{"value":"/ that parallel iterators can adjust that type without causing a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112279,"byte_end":112345,"line_start":2725,"line_end":2725,"column_start":5,"column_end":71}},{"value":"/ breaking change.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112350,"byte_end":112370,"line_start":2726,"line_end":2726,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112375,"byte_end":112378,"line_start":2727,"line_end":2727,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112383,"byte_end":112449,"line_start":2728,"line_end":2728,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112454,"byte_end":112468,"line_start":2729,"line_end":2729,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112473,"byte_end":112476,"line_start":2730,"line_end":2730,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112481,"byte_end":112504,"line_start":2731,"line_end":2731,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":3988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113675,"byte_end":113695,"line_start":2771,"line_end":2771,"column_start":11,"column_end":31},"name":"FromParallelIterator","qualname":"::iter::FromParallelIterator","value":"FromParallelIterator<T>","parent":null,"children":[{"krate":0,"index":3990}],"decl_id":null,"docs":" `FromParallelIterator` implements the creation of a collection\n from a [`ParallelIterator`]. By implementing\n `FromParallelIterator` for a given type, you define how it will be\n created from an iterator.","sig":null,"attributes":[{"value":"/ `FromParallelIterator` implements the creation of a collection","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112598,"byte_end":112664,"line_start":2735,"line_end":2735,"column_start":1,"column_end":67}},{"value":"/ from a [`ParallelIterator`]. By implementing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112665,"byte_end":112713,"line_start":2736,"line_end":2736,"column_start":1,"column_end":49}},{"value":"/ `FromParallelIterator` for a given type, you define how it will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112714,"byte_end":112784,"line_start":2737,"line_end":2737,"column_start":1,"column_end":71}},{"value":"/ created from an iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112785,"byte_end":112814,"line_start":2738,"line_end":2738,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112815,"byte_end":112818,"line_start":2739,"line_end":2739,"column_start":1,"column_end":4}},{"value":"/ `FromParallelIterator` is used through [`ParallelIterator`]'s [`collect()`] method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112819,"byte_end":112906,"line_start":2740,"line_end":2740,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112907,"byte_end":112910,"line_start":2741,"line_end":2741,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112911,"byte_end":112964,"line_start":2742,"line_end":2742,"column_start":1,"column_end":54}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":112965,"byte_end":113026,"line_start":2743,"line_end":2743,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113027,"byte_end":113030,"line_start":2744,"line_end":2744,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113031,"byte_end":113045,"line_start":2745,"line_end":2745,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113046,"byte_end":113049,"line_start":2746,"line_end":2746,"column_start":1,"column_end":4}},{"value":"/ Implementing `FromParallelIterator` for your type:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113050,"byte_end":113104,"line_start":2747,"line_end":2747,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113105,"byte_end":113108,"line_start":2748,"line_end":2748,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113109,"byte_end":113116,"line_start":2749,"line_end":2749,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113117,"byte_end":113143,"line_start":2750,"line_end":2750,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113144,"byte_end":113161,"line_start":2751,"line_end":2751,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113162,"byte_end":113165,"line_start":2752,"line_end":2752,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113166,"byte_end":113188,"line_start":2753,"line_end":2753,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113189,"byte_end":113209,"line_start":2754,"line_end":2754,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113210,"byte_end":113215,"line_start":2755,"line_end":2755,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113216,"byte_end":113219,"line_start":2756,"line_end":2756,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> FromParallelIterator<T> for BlackHole {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113220,"byte_end":113277,"line_start":2757,"line_end":2757,"column_start":1,"column_end":58}},{"value":"/     fn from_par_iter<I>(par_iter: I) -> Self","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113278,"byte_end":113326,"line_start":2758,"line_end":2758,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113327,"byte_end":113378,"line_start":2759,"line_end":2759,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113379,"byte_end":113388,"line_start":2760,"line_end":2760,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113389,"byte_end":113441,"line_start":2761,"line_end":2761,"column_start":1,"column_end":53}},{"value":"/         BlackHole {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113442,"byte_end":113465,"line_start":2762,"line_end":2762,"column_start":1,"column_end":24}},{"value":"/             mass: par_iter.count() * mem::size_of::<T>(),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113466,"byte_end":113527,"line_start":2763,"line_end":2763,"column_start":1,"column_end":62}},{"value":"/         }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113528,"byte_end":113541,"line_start":2764,"line_end":2764,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113542,"byte_end":113551,"line_start":2765,"line_end":2765,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113552,"byte_end":113557,"line_start":2766,"line_end":2766,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113558,"byte_end":113561,"line_start":2767,"line_end":2767,"column_start":1,"column_end":4}},{"value":"/ let bh: BlackHole = (0i32..1000).into_par_iter().collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113562,"byte_end":113625,"line_start":2768,"line_end":2768,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113626,"byte_end":113656,"line_start":2769,"line_end":2769,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113657,"byte_end":113664,"line_start":2770,"line_end":2770,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114673,"byte_end":114686,"line_start":2790,"line_end":2790,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"::iter::FromParallelIterator::from_par_iter","value":"fn <I> (par_iter: I) -> Self","parent":{"krate":0,"index":3988},"children":[],"decl_id":null,"docs":" Creates an instance of the collection from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Creates an instance of the collection from the parallel iterator `par_iter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113724,"byte_end":113804,"line_start":2775,"line_end":2775,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113809,"byte_end":113812,"line_start":2776,"line_end":2776,"column_start":5,"column_end":8}},{"value":"/ If your collection is not naturally parallel, the easiest (and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113817,"byte_end":113883,"line_start":2777,"line_end":2777,"column_start":5,"column_end":71}},{"value":"/ fastest) way to do this is often to collect `par_iter` into a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113888,"byte_end":113953,"line_start":2778,"line_end":2778,"column_start":5,"column_end":70}},{"value":"/ [`LinkedList`] or other intermediate data structure and then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":113958,"byte_end":114022,"line_start":2779,"line_end":2779,"column_start":5,"column_end":69}},{"value":"/ sequentially extend your collection. However, a more 'native'","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114027,"byte_end":114092,"line_start":2780,"line_end":2780,"column_start":5,"column_end":70}},{"value":"/ technique is to use the [`par_iter.fold`] or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114097,"byte_end":114145,"line_start":2781,"line_end":2781,"column_start":5,"column_end":53}},{"value":"/ [`par_iter.fold_with`] methods to create the collection.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114150,"byte_end":114210,"line_start":2782,"line_end":2782,"column_start":5,"column_end":65}},{"value":"/ Alternatively, if your collection is 'natively' parallel, you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114215,"byte_end":114280,"line_start":2783,"line_end":2783,"column_start":5,"column_end":70}},{"value":"/ can use `par_iter.for_each` to process each element in turn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114285,"byte_end":114349,"line_start":2784,"line_end":2784,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114354,"byte_end":114357,"line_start":2785,"line_end":2785,"column_start":5,"column_end":8}},{"value":"/ [`LinkedList`]: https://doc.rust-lang.org/std/collections/struct.LinkedList.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114362,"byte_end":114446,"line_start":2786,"line_end":2786,"column_start":5,"column_end":89}},{"value":"/ [`par_iter.fold`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114451,"byte_end":114513,"line_start":2787,"line_end":2787,"column_start":5,"column_end":67}},{"value":"/ [`par_iter.fold_with`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114518,"byte_end":114590,"line_start":2788,"line_end":2788,"column_start":5,"column_end":77}},{"value":"/ [`par_iter.for_each`]: trait.ParallelIterator.html#method.for_each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114595,"byte_end":114665,"line_start":2789,"line_end":2789,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":3992},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115585,"byte_end":115599,"line_start":2826,"line_end":2826,"column_start":11,"column_end":25},"name":"ParallelExtend","qualname":"::iter::ParallelExtend","value":"ParallelExtend<T>","parent":null,"children":[{"krate":0,"index":3994}],"decl_id":null,"docs":" `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114767,"byte_end":114858,"line_start":2795,"line_end":2795,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114859,"byte_end":114862,"line_start":2796,"line_end":2796,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114863,"byte_end":114916,"line_start":2797,"line_end":2797,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114917,"byte_end":114920,"line_start":2798,"line_end":2798,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114921,"byte_end":114935,"line_start":2799,"line_end":2799,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114936,"byte_end":114939,"line_start":2800,"line_end":2800,"column_start":1,"column_end":4}},{"value":"/ Implementing `ParallelExtend` for your type:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114940,"byte_end":114988,"line_start":2801,"line_end":2801,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114989,"byte_end":114992,"line_start":2802,"line_end":2802,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":114993,"byte_end":115000,"line_start":2803,"line_end":2803,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115001,"byte_end":115027,"line_start":2804,"line_end":2804,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115028,"byte_end":115045,"line_start":2805,"line_end":2805,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115046,"byte_end":115049,"line_start":2806,"line_end":2806,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115050,"byte_end":115072,"line_start":2807,"line_end":2807,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115073,"byte_end":115093,"line_start":2808,"line_end":2808,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115094,"byte_end":115099,"line_start":2809,"line_end":2809,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115100,"byte_end":115103,"line_start":2810,"line_end":2810,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> ParallelExtend<T> for BlackHole {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115104,"byte_end":115155,"line_start":2811,"line_end":2811,"column_start":1,"column_end":52}},{"value":"/     fn par_extend<I>(&mut self, par_iter: I)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115156,"byte_end":115204,"line_start":2812,"line_end":2812,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115205,"byte_end":115256,"line_start":2813,"line_end":2813,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115257,"byte_end":115266,"line_start":2814,"line_end":2814,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115267,"byte_end":115319,"line_start":2815,"line_end":2815,"column_start":1,"column_end":53}},{"value":"/         self.mass += par_iter.count() * mem::size_of::<T>();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115320,"byte_end":115384,"line_start":2816,"line_end":2816,"column_start":1,"column_end":65}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115385,"byte_end":115394,"line_start":2817,"line_end":2817,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115395,"byte_end":115400,"line_start":2818,"line_end":2818,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115401,"byte_end":115404,"line_start":2819,"line_end":2819,"column_start":1,"column_end":4}},{"value":"/ let mut bh = BlackHole { mass: 0 };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115405,"byte_end":115444,"line_start":2820,"line_end":2820,"column_start":1,"column_end":40}},{"value":"/ bh.par_extend(0i32..1000);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115445,"byte_end":115475,"line_start":2821,"line_end":2821,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115476,"byte_end":115506,"line_start":2822,"line_end":2822,"column_start":1,"column_end":31}},{"value":"/ bh.par_extend(0i64..10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115507,"byte_end":115535,"line_start":2823,"line_end":2823,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(bh.mass, 4080);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115536,"byte_end":115566,"line_start":2824,"line_end":2824,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115567,"byte_end":115574,"line_start":2825,"line_end":2825,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3994},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116027,"byte_end":116037,"line_start":2843,"line_end":2843,"column_start":8,"column_end":18},"name":"par_extend","qualname":"::iter::ParallelExtend::par_extend","value":"fn <I> (&mut self, par_iter: I) -> ()","parent":{"krate":0,"index":3992},"children":[],"decl_id":null,"docs":" Extends an instance of the collection with the elements drawn\n from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Extends an instance of the collection with the elements drawn","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115628,"byte_end":115693,"line_start":2830,"line_end":2830,"column_start":5,"column_end":70}},{"value":"/ from the parallel iterator `par_iter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115698,"byte_end":115740,"line_start":2831,"line_end":2831,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115745,"byte_end":115748,"line_start":2832,"line_end":2832,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115753,"byte_end":115767,"line_start":2833,"line_end":2833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115772,"byte_end":115775,"line_start":2834,"line_end":2834,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115780,"byte_end":115787,"line_start":2835,"line_end":2835,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115792,"byte_end":115818,"line_start":2836,"line_end":2836,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115823,"byte_end":115826,"line_start":2837,"line_end":2837,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115831,"byte_end":115856,"line_start":2838,"line_end":2838,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend(0..5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115861,"byte_end":115886,"line_start":2839,"line_end":2839,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend((0..5).into_par_iter().map(|i| i * i));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115891,"byte_end":115949,"line_start":2840,"line_end":2840,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4, 0, 1, 4, 9, 16]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":115954,"byte_end":116007,"line_start":2841,"line_end":2841,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116012,"byte_end":116019,"line_start":2842,"line_end":2842,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3997},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116409,"byte_end":116412,"line_start":2854,"line_end":2854,"column_start":15,"column_end":18},"name":"Try","qualname":"::iter::private::Try","value":"Try","parent":null,"children":[{"krate":0,"index":6766},{"krate":0,"index":3998},{"krate":0,"index":3999},{"krate":0,"index":4000},{"krate":0,"index":4001},{"krate":0,"index":4002}],"decl_id":null,"docs":" Clone of `std::ops::Try`.","sig":null,"attributes":[{"value":"/ Clone of `std::ops::Try`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116288,"byte_end":116317,"line_start":2851,"line_end":2851,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116322,"byte_end":116325,"line_start":2852,"line_end":2852,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116330,"byte_end":116394,"line_start":2853,"line_end":2853,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":3998},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116454,"byte_end":116456,"line_start":2857,"line_end":2857,"column_start":14,"column_end":16},"name":"Ok","qualname":"::iter::private::Try::Ok","value":"type Ok;","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3999},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116471,"byte_end":116476,"line_start":2858,"line_end":2858,"column_start":14,"column_end":19},"name":"Error","qualname":"::iter::private::Try::Error","value":"type Error;","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4000},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116489,"byte_end":116500,"line_start":2859,"line_end":2859,"column_start":12,"column_end":23},"name":"into_result","qualname":"::iter::private::Try::into_result","value":"fn (self) -> Result<Self::Ok, Self::Error>","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116552,"byte_end":116559,"line_start":2860,"line_end":2860,"column_start":12,"column_end":19},"name":"from_ok","qualname":"::iter::private::Try::from_ok","value":"fn (v: Self::Ok) -> Self","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116593,"byte_end":116603,"line_start":2861,"line_end":2861,"column_start":12,"column_end":22},"name":"from_error","qualname":"::iter::private::Try::from_error","value":"fn (v: Self::Error) -> Self","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4018},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","parent":null,"children":[{"krate":0,"index":4019},{"krate":0,"index":4020},{"krate":0,"index":4021},{"krate":0,"index":6769},{"krate":0,"index":6775},{"krate":0,"index":6772},{"krate":0,"index":4024},{"krate":0,"index":4029},{"krate":0,"index":4035},{"krate":0,"index":6778},{"krate":0,"index":6782},{"krate":0,"index":4042},{"krate":0,"index":4046},{"krate":0,"index":6794},{"krate":0,"index":6786},{"krate":0,"index":6801},{"krate":0,"index":6805},{"krate":0,"index":4052},{"krate":0,"index":6817},{"krate":0,"index":6809},{"krate":0,"index":4058},{"krate":0,"index":4061},{"krate":0,"index":4067}],"decl_id":null,"docs":" Parallel iterator types for [options][std::option]","sig":null,"attributes":[{"value":"! Parallel iterator types for [options][std::option]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387484,"byte_end":387538,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387539,"byte_end":387542,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387543,"byte_end":387621,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387622,"byte_end":387660,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387661,"byte_end":387664,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::option]: https://doc.rust-lang.org/stable/std/option/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387665,"byte_end":387728,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6769},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388336,"byte_end":388344,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6771}],"decl_id":null,"docs":" A parallel iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over the value in [`Some`] variant of an [`Option`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387828,"byte_end":387904,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387905,"byte_end":387908,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387909,"byte_end":387991,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387992,"byte_end":387995,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_par_iter`] function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":387996,"byte_end":388059,"line_start":16,"line_end":16,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388060,"byte_end":388063,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388064,"byte_end":388133,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388134,"byte_end":388214,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ [`into_par_iter`]: ../iter/trait.IntoParallelIterator.html#tymethod.into_par_iter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388215,"byte_end":388300,"line_start":20,"line_end":20,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6778},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389986,"byte_end":389990,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6781}],"decl_id":null,"docs":" A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389491,"byte_end":389573,"line_start":77,"line_end":77,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389574,"byte_end":389577,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389578,"byte_end":389660,"line_start":79,"line_end":79,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389661,"byte_end":389664,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter`] function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389665,"byte_end":389723,"line_start":81,"line_end":81,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389724,"byte_end":389727,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389728,"byte_end":389797,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389798,"byte_end":389878,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ [`par_iter`]: ../iter/trait.IntoParallelRefIterator.html#tymethod.par_iter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":389879,"byte_end":389957,"line_start":85,"line_end":85,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":6801},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":391024,"byte_end":391031,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6804}],"decl_id":null,"docs":" A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390506,"byte_end":390596,"line_start":115,"line_end":115,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390597,"byte_end":390600,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390601,"byte_end":390683,"line_start":117,"line_end":117,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390684,"byte_end":390687,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter_mut`] function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390688,"byte_end":390750,"line_start":119,"line_end":119,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390751,"byte_end":390754,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390755,"byte_end":390824,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390825,"byte_end":390905,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ [`par_iter_mut`]: ../iter/trait.IntoParallelRefMutIterator.html#tymethod.par_iter_mut","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390906,"byte_end":390995,"line_start":123,"line_end":123,"column_start":1,"column_end":90}}]},{"kind":"Mod","id":{"krate":0,"index":4076},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":4077},{"krate":0,"index":4078},{"krate":0,"index":4079},{"krate":0,"index":4080},{"krate":0,"index":4081},{"krate":0,"index":4082},{"krate":0,"index":4083},{"krate":0,"index":4084},{"krate":0,"index":4085},{"krate":0,"index":4086},{"krate":0,"index":4087}],"decl_id":null,"docs":" The rayon prelude imports the various `ParallelIterator` traits.\n The intention is that one can include `use rayon::prelude::*` and\n have easy access to the various traits and methods you will need.\n","sig":null,"attributes":[{"value":"! The rayon prelude imports the various `ParallelIterator` traits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":392923,"byte_end":392991,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"! The intention is that one can include `use rayon::prelude::*` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":392992,"byte_end":393061,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"! have easy access to the various traits and methods you will need.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/prelude.rs","byte_start":393062,"byte_end":393131,"line_start":3,"line_end":3,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":4088},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::range","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","parent":null,"children":[{"krate":0,"index":4089},{"krate":0,"index":4090},{"krate":0,"index":4091},{"krate":0,"index":4092},{"krate":0,"index":4093},{"krate":0,"index":6824},{"krate":0,"index":6830},{"krate":0,"index":6827},{"krate":0,"index":4094},{"krate":0,"index":4099},{"krate":0,"index":4102},{"krate":0,"index":4107},{"krate":0,"index":4108},{"krate":0,"index":4111},{"krate":0,"index":6833},{"krate":0,"index":6838},{"krate":0,"index":6844},{"krate":0,"index":6849},{"krate":0,"index":6854},{"krate":0,"index":6860},{"krate":0,"index":6865},{"krate":0,"index":6870},{"krate":0,"index":6876},{"krate":0,"index":6881},{"krate":0,"index":6886},{"krate":0,"index":6892},{"krate":0,"index":6897},{"krate":0,"index":6902},{"krate":0,"index":6908},{"krate":0,"index":6913},{"krate":0,"index":6918},{"krate":0,"index":6924},{"krate":0,"index":6929},{"krate":0,"index":6934},{"krate":0,"index":6940},{"krate":0,"index":6945},{"krate":0,"index":6950},{"krate":0,"index":6956},{"krate":0,"index":6961},{"krate":0,"index":6963},{"krate":0,"index":6971},{"krate":0,"index":6976},{"krate":0,"index":6978},{"krate":0,"index":6986},{"krate":0,"index":6991},{"krate":0,"index":6993},{"krate":0,"index":7001},{"krate":0,"index":7006},{"krate":0,"index":7008},{"krate":0,"index":7016},{"krate":0,"index":4112},{"krate":0,"index":4113},{"krate":0,"index":4118}],"decl_id":null,"docs":" Parallel iterator types for [ranges][std::range],\n the type for values created by `a..b` expressions","sig":null,"attributes":[{"value":"! Parallel iterator types for [ranges][std::range],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393587,"byte_end":393640,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"! the type for values created by `a..b` expressions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393641,"byte_end":393694,"line_start":2,"line_end":2,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393695,"byte_end":393698,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393699,"byte_end":393777,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"! need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393778,"byte_end":393821,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393822,"byte_end":393825,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393826,"byte_end":393833,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393834,"byte_end":393860,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393861,"byte_end":393864,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! let r = (0..100u64).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393865,"byte_end":393904,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"!                    .sum();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393905,"byte_end":393935,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393936,"byte_end":393939,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! // compare result with sequential calculation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393940,"byte_end":393989,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! assert_eq!((0..100).sum::<u64>(), r);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":393990,"byte_end":394031,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394032,"byte_end":394039,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394040,"byte_end":394043,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! [std::range]: https://doc.rust-lang.org/core/ops/struct.Range.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394044,"byte_end":394114,"line_start":17,"line_end":17,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":6824},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394948,"byte_end":394952,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6826}],"decl_id":null,"docs":" Parallel iterator over a range, implemented for all integer types.","sig":null,"attributes":[{"value":"/ Parallel iterator over a range, implemented for all integer types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394219,"byte_end":394289,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394290,"byte_end":394293,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394294,"byte_end":394362,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/ which is not implemented for `u64`, `i64`, `u128`, or `i128`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394363,"byte_end":394428,"line_start":28,"line_end":28,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394429,"byte_end":394432,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394433,"byte_end":394440,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394441,"byte_end":394467,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394468,"byte_end":394471,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let p = (0..25usize).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394472,"byte_end":394512,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/                   .zip(0..25usize)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394513,"byte_end":394551,"line_start":34,"line_end":34,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394552,"byte_end":394617,"line_start":35,"line_end":35,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394618,"byte_end":394660,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/                   .sum::<usize>();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394661,"byte_end":394699,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394700,"byte_end":394703,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let s = (0..25usize).zip(0..25)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394704,"byte_end":394739,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394740,"byte_end":394805,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394806,"byte_end":394848,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394849,"byte_end":394878,"line_start":42,"line_end":42,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394879,"byte_end":394882,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394883,"byte_end":394904,"line_start":44,"line_end":44,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":394905,"byte_end":394912,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":4124},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range_inclusive","qualname":"::range_inclusive","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","parent":null,"children":[{"krate":0,"index":4125},{"krate":0,"index":4126},{"krate":0,"index":4127},{"krate":0,"index":4128},{"krate":0,"index":7027},{"krate":0,"index":7033},{"krate":0,"index":7030},{"krate":0,"index":4129},{"krate":0,"index":4132},{"krate":0,"index":4137},{"krate":0,"index":4138},{"krate":0,"index":4139},{"krate":0,"index":7042},{"krate":0,"index":7036},{"krate":0,"index":7053},{"krate":0,"index":7047},{"krate":0,"index":7064},{"krate":0,"index":7058},{"krate":0,"index":7075},{"krate":0,"index":7069},{"krate":0,"index":7080},{"krate":0,"index":7085},{"krate":0,"index":7090},{"krate":0,"index":7095},{"krate":0,"index":7100},{"krate":0,"index":7105},{"krate":0,"index":7110},{"krate":0,"index":7115},{"krate":0,"index":4140},{"krate":0,"index":4141},{"krate":0,"index":4146}],"decl_id":null,"docs":" Parallel iterator types for [inclusive ranges][std::range],\n the type for values created by `a..=b` expressions","sig":null,"attributes":[{"value":"! Parallel iterator types for [inclusive ranges][std::range],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404325,"byte_end":404388,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"! the type for values created by `a..=b` expressions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404389,"byte_end":404443,"line_start":2,"line_end":2,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404444,"byte_end":404447,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404448,"byte_end":404526,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"! need to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404527,"byte_end":404570,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404571,"byte_end":404574,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404575,"byte_end":404582,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404583,"byte_end":404609,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404610,"byte_end":404613,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! let r = (0..=100u64).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404614,"byte_end":404654,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"!                     .sum();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404655,"byte_end":404686,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404687,"byte_end":404690,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! // compare result with sequential calculation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404691,"byte_end":404740,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! assert_eq!((0..=100).sum::<u64>(), r);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404741,"byte_end":404783,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404784,"byte_end":404791,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404792,"byte_end":404795,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! [std::range]: https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404796,"byte_end":404875,"line_start":17,"line_end":17,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":7027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405710,"byte_end":405714,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range_inclusive::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":7029}],"decl_id":null,"docs":" Parallel iterator over an inclusive range, implemented for all integer types.","sig":null,"attributes":[{"value":"/ Parallel iterator over an inclusive range, implemented for all integer types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":404973,"byte_end":405054,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405055,"byte_end":405058,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405059,"byte_end":405127,"line_start":26,"line_end":26,"column_start":1,"column_end":69}},{"value":"/ which is only implemented for `u8`, `i8`, `u16`, and `i16`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405128,"byte_end":405191,"line_start":27,"line_end":27,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405192,"byte_end":405195,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405196,"byte_end":405203,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405204,"byte_end":405230,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405231,"byte_end":405234,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let p = (0..=25u16).into_par_iter()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405235,"byte_end":405274,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/                   .zip(0..=25u16)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405275,"byte_end":405312,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405313,"byte_end":405378,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405379,"byte_end":405421,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/                   .sum::<u16>();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405422,"byte_end":405458,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405459,"byte_end":405462,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let s = (0..=25u16).zip(0..=25u16)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405463,"byte_end":405501,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405502,"byte_end":405567,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405568,"byte_end":405610,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405611,"byte_end":405640,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405641,"byte_end":405644,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405645,"byte_end":405666,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405667,"byte_end":405674,"line_start":44,"line_end":44,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":4152},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","parent":null,"children":[{"krate":0,"index":4153},{"krate":0,"index":4154},{"krate":0,"index":4155},{"krate":0,"index":4156},{"krate":0,"index":7126},{"krate":0,"index":7132},{"krate":0,"index":7129},{"krate":0,"index":4157},{"krate":0,"index":7142},{"krate":0,"index":7135},{"krate":0,"index":7148},{"krate":0,"index":7152},{"krate":0,"index":4163},{"krate":0,"index":4167},{"krate":0,"index":7164},{"krate":0,"index":7156},{"krate":0,"index":7171},{"krate":0,"index":7175},{"krate":0,"index":4174},{"krate":0,"index":7187},{"krate":0,"index":7179},{"krate":0,"index":4181}],"decl_id":null,"docs":" Parallel iterator types for [results][std::result]","sig":null,"attributes":[{"value":"! Parallel iterator types for [results][std::result]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":412916,"byte_end":412970,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":412971,"byte_end":412974,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":412975,"byte_end":413053,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413054,"byte_end":413092,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413093,"byte_end":413096,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::result]: https://doc.rust-lang.org/stable/std/result/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413097,"byte_end":413160,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":7126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413326,"byte_end":413334,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":7128}],"decl_id":null,"docs":" Parallel iterator over a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a result","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413255,"byte_end":413290,"line_start":14,"line_end":14,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":7148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413776,"byte_end":413780,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":7151}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a result","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413686,"byte_end":413747,"line_start":36,"line_end":36,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":7171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":414402,"byte_end":414409,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":7174}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a result","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":414315,"byte_end":414373,"line_start":66,"line_end":66,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":4192},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","parent":null,"children":[{"krate":0,"index":4193},{"krate":0,"index":4274},{"krate":0,"index":4355},{"krate":0,"index":4356},{"krate":0,"index":4357},{"krate":0,"index":4358},{"krate":0,"index":4359},{"krate":0,"index":4360},{"krate":0,"index":4361},{"krate":0,"index":4362},{"krate":0,"index":4365},{"krate":0,"index":4366},{"krate":0,"index":4374},{"krate":0,"index":4377},{"krate":0,"index":4400},{"krate":0,"index":4403},{"krate":0,"index":4409},{"krate":0,"index":4415},{"krate":0,"index":4421},{"krate":0,"index":7216},{"krate":0,"index":7220},{"krate":0,"index":4427},{"krate":0,"index":4431},{"krate":0,"index":4438},{"krate":0,"index":4446},{"krate":0,"index":4450},{"krate":0,"index":7224},{"krate":0,"index":7229},{"krate":0,"index":4457},{"krate":0,"index":4461},{"krate":0,"index":4468},{"krate":0,"index":4476},{"krate":0,"index":4481},{"krate":0,"index":7233},{"krate":0,"index":7239},{"krate":0,"index":4488},{"krate":0,"index":4492},{"krate":0,"index":4496},{"krate":0,"index":4503},{"krate":0,"index":4511},{"krate":0,"index":4516},{"krate":0,"index":7243},{"krate":0,"index":7248},{"krate":0,"index":4523},{"krate":0,"index":4527},{"krate":0,"index":4534},{"krate":0,"index":4542},{"krate":0,"index":4547},{"krate":0,"index":7252},{"krate":0,"index":7256},{"krate":0,"index":4554},{"krate":0,"index":4561},{"krate":0,"index":4569},{"krate":0,"index":4573},{"krate":0,"index":7260},{"krate":0,"index":7265},{"krate":0,"index":4580},{"krate":0,"index":4587},{"krate":0,"index":4595},{"krate":0,"index":4600},{"krate":0,"index":7269},{"krate":0,"index":7275},{"krate":0,"index":4607},{"krate":0,"index":4613},{"krate":0,"index":4620},{"krate":0,"index":4628},{"krate":0,"index":4633},{"krate":0,"index":4640},{"krate":0,"index":4646},{"krate":0,"index":4651},{"krate":0,"index":4656},{"krate":0,"index":4663},{"krate":0,"index":4674},{"krate":0,"index":4680},{"krate":0,"index":4685},{"krate":0,"index":4692}],"decl_id":null,"docs":" Parallel iterator types for [slices][std::slice]","sig":null,"attributes":[{"value":"! Parallel iterator types for [slices][std::slice]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416326,"byte_end":416378,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416379,"byte_end":416382,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416383,"byte_end":416461,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416462,"byte_end":416500,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416501,"byte_end":416504,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::slice]: https://doc.rust-lang.org/stable/std/slice/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416505,"byte_end":416566,"line_start":6,"line_end":6,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":4366},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416908,"byte_end":416921,"line_start":25,"line_end":25,"column_start":11,"column_end":24},"name":"ParallelSlice","qualname":"::slice::ParallelSlice","value":"ParallelSlice<T: Sync>","parent":null,"children":[{"krate":0,"index":4368},{"krate":0,"index":4369},{"krate":0,"index":4371},{"krate":0,"index":4372},{"krate":0,"index":4373}],"decl_id":null,"docs":" Parallel extensions for slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for slices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416862,"byte_end":416897,"line_start":24,"line_end":24,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4368},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417040,"byte_end":417057,"line_start":28,"line_end":28,"column_start":8,"column_end":25},"name":"as_parallel_slice","qualname":"::slice::ParallelSlice::as_parallel_slice","value":"fn (&self) -> &[T]","parent":{"krate":0,"index":4366},"children":[],"decl_id":null,"docs":" Returns a plain slice, which is used to implement the rest of the\n parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain slice, which is used to implement the rest of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":416937,"byte_end":417006,"line_start":26,"line_end":26,"column_start":5,"column_end":74}},{"value":"/ parallel methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417011,"byte_end":417032,"line_start":27,"line_end":27,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":4369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417490,"byte_end":417499,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"par_split","qualname":"::slice::ParallelSlice::par_split","value":"fn <P> (&self, separator: P) -> Split<'_, T, P>","parent":{"krate":0,"index":4366},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over subslices separated by elements that\n match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over subslices separated by elements that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417079,"byte_end":417152,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ match the separator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417157,"byte_end":417181,"line_start":31,"line_end":31,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417186,"byte_end":417189,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417194,"byte_end":417208,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417213,"byte_end":417216,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417221,"byte_end":417228,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417233,"byte_end":417259,"line_start":36,"line_end":36,"column_start":5,"column_end":31}},{"value":"/ let smallest = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417264,"byte_end":417316,"line_start":37,"line_end":37,"column_start":5,"column_end":57}},{"value":"/     .par_split(|i| *i == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417321,"byte_end":417352,"line_start":38,"line_end":38,"column_start":5,"column_end":36}},{"value":"/     .map(|numbers| numbers.iter().min().unwrap())","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417357,"byte_end":417410,"line_start":39,"line_end":39,"column_start":5,"column_end":58}},{"value":"/     .min();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417415,"byte_end":417430,"line_start":40,"line_end":40,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(Some(&1), smallest);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417435,"byte_end":417470,"line_start":41,"line_end":41,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417475,"byte_end":417482,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418033,"byte_end":418044,"line_start":63,"line_end":63,"column_start":8,"column_end":19},"name":"par_windows","qualname":"::slice::ParallelSlice::par_windows","value":"fn (&self, window_size: usize) -> Windows<'_, T>","parent":{"krate":0,"index":4366},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over all contiguous windows of length\n `window_size`. The windows overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over all contiguous windows of length","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417705,"byte_end":417774,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ `window_size`. The windows overlap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417779,"byte_end":417818,"line_start":54,"line_end":54,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417823,"byte_end":417826,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417831,"byte_end":417845,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417850,"byte_end":417853,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417858,"byte_end":417865,"line_start":58,"line_end":58,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417870,"byte_end":417896,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/ let windows: Vec<_> = [1, 2, 3].par_windows(2).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417901,"byte_end":417962,"line_start":60,"line_end":60,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(vec![[1, 2], [2, 3]], windows);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":417967,"byte_end":418013,"line_start":61,"line_end":61,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418018,"byte_end":418025,"line_start":62,"line_end":62,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4372},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418757,"byte_end":418767,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"par_chunks","qualname":"::slice::ParallelSlice::par_chunks","value":"fn (&self, chunk_size: usize) -> Chunks<'_, T>","parent":{"krate":0,"index":4366},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418201,"byte_end":418270,"line_start":70,"line_end":70,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418275,"byte_end":418323,"line_start":71,"line_end":71,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418328,"byte_end":418331,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418336,"byte_end":418401,"line_start":73,"line_end":73,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418406,"byte_end":418477,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418482,"byte_end":418527,"line_start":75,"line_end":75,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418532,"byte_end":418535,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418540,"byte_end":418554,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418559,"byte_end":418562,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418567,"byte_end":418574,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418579,"byte_end":418605,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks(2).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418610,"byte_end":418675,"line_start":81,"line_end":81,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4], &[5]]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418680,"byte_end":418737,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418742,"byte_end":418749,"line_start":83,"line_end":83,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4373},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419544,"byte_end":419560,"line_start":106,"line_end":106,"column_start":8,"column_end":24},"name":"par_chunks_exact","qualname":"::slice::ParallelSlice::par_chunks_exact","value":"fn (&self, chunk_size: usize) -> ChunksExact<'_, T>","parent":{"krate":0,"index":4366},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":418985,"byte_end":419046,"line_start":92,"line_end":92,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419051,"byte_end":419099,"line_start":93,"line_end":93,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419104,"byte_end":419107,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419112,"byte_end":419181,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419186,"byte_end":419251,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419256,"byte_end":419314,"line_start":97,"line_end":97,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419319,"byte_end":419322,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419327,"byte_end":419341,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419346,"byte_end":419349,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419354,"byte_end":419361,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419366,"byte_end":419392,"line_start":102,"line_end":102,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks_exact(2).collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419397,"byte_end":419468,"line_start":103,"line_end":103,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4]]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419473,"byte_end":419524,"line_start":104,"line_end":104,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":419529,"byte_end":419536,"line_start":105,"line_end":105,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4377},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420133,"byte_end":420149,"line_start":128,"line_end":128,"column_start":11,"column_end":27},"name":"ParallelSliceMut","qualname":"::slice::ParallelSliceMut","value":"ParallelSliceMut<T: Send>","parent":null,"children":[{"krate":0,"index":4379},{"krate":0,"index":4380},{"krate":0,"index":4382},{"krate":0,"index":4383},{"krate":0,"index":4384},{"krate":0,"index":4385},{"krate":0,"index":4388},{"krate":0,"index":4392},{"krate":0,"index":4393},{"krate":0,"index":4396}],"decl_id":null,"docs":" Parallel extensions for mutable slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for mutable slices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420079,"byte_end":420122,"line_start":127,"line_end":127,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4379},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420276,"byte_end":420297,"line_start":131,"line_end":131,"column_start":8,"column_end":29},"name":"as_parallel_slice_mut","qualname":"::slice::ParallelSliceMut::as_parallel_slice_mut","value":"fn (&mut self) -> &mut [T]","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Returns a plain mutable slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain mutable slice, which is used to implement the rest of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420165,"byte_end":420238,"line_start":129,"line_end":129,"column_start":5,"column_end":78}},{"value":"/ the parallel methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420243,"byte_end":420268,"line_start":130,"line_end":130,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4380},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420746,"byte_end":420759,"line_start":145,"line_end":145,"column_start":8,"column_end":21},"name":"par_split_mut","qualname":"::slice::ParallelSliceMut::par_split_mut","value":"fn <P> (&mut self, separator: P) -> SplitMut<'_, T, P>","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over mutable subslices separated by\n elements that match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over mutable subslices separated by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420327,"byte_end":420394,"line_start":133,"line_end":133,"column_start":5,"column_end":72}},{"value":"/ elements that match the separator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420399,"byte_end":420437,"line_start":134,"line_end":134,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420442,"byte_end":420445,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420450,"byte_end":420464,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420469,"byte_end":420472,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420477,"byte_end":420484,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420489,"byte_end":420515,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420520,"byte_end":420574,"line_start":140,"line_end":140,"column_start":5,"column_end":59}},{"value":"/ array.par_split_mut(|i| *i == 0)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420579,"byte_end":420615,"line_start":141,"line_end":141,"column_start":5,"column_end":41}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420620,"byte_end":420664,"line_start":142,"line_end":142,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 0, 8, 4, 2, 0, 9, 6, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420669,"byte_end":420726,"line_start":143,"line_end":143,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420731,"byte_end":420738,"line_start":144,"line_end":144,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421585,"byte_end":421599,"line_start":171,"line_end":171,"column_start":8,"column_end":22},"name":"par_chunks_mut","qualname":"::slice::ParallelSliceMut::par_chunks_mut","value":"fn (&mut self, chunk_size: usize) -> ChunksMut<'_, T>","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":420979,"byte_end":421048,"line_start":155,"line_end":155,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421053,"byte_end":421117,"line_start":156,"line_end":156,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421122,"byte_end":421125,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421130,"byte_end":421195,"line_start":158,"line_end":158,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421200,"byte_end":421271,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421276,"byte_end":421321,"line_start":160,"line_end":160,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421326,"byte_end":421329,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421334,"byte_end":421348,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421353,"byte_end":421356,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421361,"byte_end":421368,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421373,"byte_end":421399,"line_start":165,"line_end":165,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421404,"byte_end":421440,"line_start":166,"line_end":166,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_mut(2)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421445,"byte_end":421472,"line_start":167,"line_end":167,"column_start":5,"column_end":32}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421477,"byte_end":421521,"line_start":168,"line_end":168,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [2, 1, 4, 3, 5]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421526,"byte_end":421565,"line_start":169,"line_end":169,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421570,"byte_end":421577,"line_start":170,"line_end":170,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422446,"byte_end":422466,"line_start":195,"line_end":195,"column_start":8,"column_end":28},"name":"par_chunks_exact_mut","qualname":"::slice::ParallelSliceMut::par_chunks_exact_mut","value":"fn (&mut self, chunk_size: usize) -> ChunksExactMut<'_, T>","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421831,"byte_end":421892,"line_start":179,"line_end":179,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421897,"byte_end":421961,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421966,"byte_end":421969,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":421974,"byte_end":422043,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422048,"byte_end":422113,"line_start":183,"line_end":183,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422118,"byte_end":422176,"line_start":184,"line_end":184,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422181,"byte_end":422184,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422189,"byte_end":422203,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422208,"byte_end":422211,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422216,"byte_end":422223,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422228,"byte_end":422254,"line_start":189,"line_end":189,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422259,"byte_end":422295,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_exact_mut(3)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422300,"byte_end":422333,"line_start":191,"line_end":191,"column_start":5,"column_end":38}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422338,"byte_end":422382,"line_start":192,"line_end":192,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 4, 5]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422387,"byte_end":422426,"line_start":193,"line_end":193,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422431,"byte_end":422438,"line_start":194,"line_end":194,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424343,"byte_end":424351,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"par_sort","qualname":"::slice::ParallelSliceMut::par_sort","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422886,"byte_end":422918,"line_start":208,"line_end":208,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422923,"byte_end":422926,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":422931,"byte_end":423022,"line_start":210,"line_end":210,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423027,"byte_end":423030,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423035,"byte_end":423128,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423133,"byte_end":423186,"line_start":213,"line_end":213,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable`](#method.par_sort_unstable).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423191,"byte_end":423248,"line_start":214,"line_end":214,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423253,"byte_end":423256,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423261,"byte_end":423289,"line_start":216,"line_end":216,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423294,"byte_end":423297,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423302,"byte_end":423365,"line_start":218,"line_end":218,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423370,"byte_end":423423,"line_start":219,"line_end":219,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423428,"byte_end":423520,"line_start":220,"line_end":220,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423525,"byte_end":423589,"line_start":221,"line_end":221,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423594,"byte_end":423597,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423602,"byte_end":423695,"line_start":223,"line_end":223,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423700,"byte_end":423750,"line_start":224,"line_end":224,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423755,"byte_end":423758,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423763,"byte_end":423857,"line_start":226,"line_end":226,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423862,"byte_end":423956,"line_start":227,"line_end":227,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":423961,"byte_end":424057,"line_start":228,"line_end":228,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424062,"byte_end":424126,"line_start":229,"line_end":229,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424131,"byte_end":424134,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424139,"byte_end":424153,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424158,"byte_end":424161,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424166,"byte_end":424173,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424178,"byte_end":424204,"line_start":234,"line_end":234,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424209,"byte_end":424212,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424217,"byte_end":424251,"line_start":236,"line_end":236,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424256,"byte_end":424259,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ v.par_sort();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424264,"byte_end":424281,"line_start":238,"line_end":238,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424286,"byte_end":424323,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424328,"byte_end":424335,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426077,"byte_end":426088,"line_start":284,"line_end":284,"column_start":8,"column_end":19},"name":"par_sort_by","qualname":"::slice::ParallelSliceMut::par_sort_by","value":"fn <F> (&mut self, compare: F) -> ()","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424466,"byte_end":424525,"line_start":248,"line_end":248,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424530,"byte_end":424533,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424538,"byte_end":424629,"line_start":250,"line_end":250,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424634,"byte_end":424637,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424642,"byte_end":424735,"line_start":252,"line_end":252,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424740,"byte_end":424793,"line_start":253,"line_end":253,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by`](#method.par_sort_unstable_by).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424798,"byte_end":424861,"line_start":254,"line_end":254,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424866,"byte_end":424869,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424874,"byte_end":424902,"line_start":256,"line_end":256,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424907,"byte_end":424910,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424915,"byte_end":424978,"line_start":258,"line_end":258,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":424983,"byte_end":425036,"line_start":259,"line_end":259,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425041,"byte_end":425133,"line_start":260,"line_end":260,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425138,"byte_end":425202,"line_start":261,"line_end":261,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425207,"byte_end":425210,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425215,"byte_end":425308,"line_start":263,"line_end":263,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425313,"byte_end":425363,"line_start":264,"line_end":264,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425368,"byte_end":425371,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425376,"byte_end":425470,"line_start":266,"line_end":266,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425475,"byte_end":425569,"line_start":267,"line_end":267,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425574,"byte_end":425670,"line_start":268,"line_end":268,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425675,"byte_end":425739,"line_start":269,"line_end":269,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425744,"byte_end":425747,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425752,"byte_end":425766,"line_start":271,"line_end":271,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425771,"byte_end":425774,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425779,"byte_end":425786,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425791,"byte_end":425817,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425822,"byte_end":425825,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425830,"byte_end":425862,"line_start":276,"line_end":276,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_by(|a, b| a.cmp(b));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425867,"byte_end":425902,"line_start":277,"line_end":277,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425907,"byte_end":425942,"line_start":278,"line_end":278,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425947,"byte_end":425950,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425955,"byte_end":425977,"line_start":280,"line_end":280,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_by(|a, b| b.cmp(a));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":425982,"byte_end":426017,"line_start":281,"line_end":281,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426022,"byte_end":426057,"line_start":282,"line_end":282,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426062,"byte_end":426069,"line_start":283,"line_end":283,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4388},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427824,"byte_end":427839,"line_start":326,"line_end":326,"column_start":8,"column_end":23},"name":"par_sort_by_key","qualname":"::slice::ParallelSliceMut::par_sort_by_key","value":"fn <B, F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426301,"byte_end":426364,"line_start":293,"line_end":293,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426369,"byte_end":426372,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426377,"byte_end":426468,"line_start":295,"line_end":295,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426473,"byte_end":426476,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426481,"byte_end":426574,"line_start":297,"line_end":297,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426579,"byte_end":426632,"line_start":298,"line_end":298,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by_key`](#method.par_sort_unstable_by_key).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426637,"byte_end":426708,"line_start":299,"line_end":299,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426713,"byte_end":426716,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426721,"byte_end":426749,"line_start":301,"line_end":301,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426754,"byte_end":426757,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426762,"byte_end":426825,"line_start":303,"line_end":303,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426830,"byte_end":426883,"line_start":304,"line_end":304,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426888,"byte_end":426980,"line_start":305,"line_end":305,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":426985,"byte_end":427049,"line_start":306,"line_end":306,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427054,"byte_end":427057,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427062,"byte_end":427155,"line_start":308,"line_end":308,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427160,"byte_end":427210,"line_start":309,"line_end":309,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427215,"byte_end":427218,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427223,"byte_end":427317,"line_start":311,"line_end":311,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427322,"byte_end":427416,"line_start":312,"line_end":312,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427421,"byte_end":427517,"line_start":313,"line_end":313,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427522,"byte_end":427586,"line_start":314,"line_end":314,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427591,"byte_end":427594,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427599,"byte_end":427613,"line_start":316,"line_end":316,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427618,"byte_end":427621,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427626,"byte_end":427633,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427638,"byte_end":427664,"line_start":319,"line_end":319,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427669,"byte_end":427672,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427677,"byte_end":427714,"line_start":321,"line_end":321,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427719,"byte_end":427722,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_by_key(|k| k.abs());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427727,"byte_end":427762,"line_start":323,"line_end":323,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427767,"byte_end":427804,"line_start":324,"line_end":324,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":427809,"byte_end":427816,"line_start":325,"line_end":325,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4392},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429284,"byte_end":429301,"line_start":365,"line_end":365,"column_start":8,"column_end":25},"name":"par_sort_unstable","qualname":"::slice::ParallelSliceMut::par_sort_unstable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel, but may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel, but may not preserve the order of equal elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428013,"byte_end":428095,"line_start":334,"line_end":334,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428100,"byte_end":428103,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428108,"byte_end":428203,"line_start":336,"line_end":336,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428208,"byte_end":428240,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428245,"byte_end":428248,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428253,"byte_end":428281,"line_start":339,"line_end":339,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428286,"byte_end":428289,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428294,"byte_end":428385,"line_start":341,"line_end":341,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428390,"byte_end":428477,"line_start":342,"line_end":342,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428482,"byte_end":428572,"line_start":343,"line_end":343,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428577,"byte_end":428611,"line_start":344,"line_end":344,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428616,"byte_end":428619,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428624,"byte_end":428716,"line_start":346,"line_end":346,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428721,"byte_end":428781,"line_start":347,"line_end":347,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428786,"byte_end":428789,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428794,"byte_end":428883,"line_start":349,"line_end":349,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428888,"byte_end":428981,"line_start":350,"line_end":350,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":428986,"byte_end":428999,"line_start":351,"line_end":351,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429004,"byte_end":429007,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429012,"byte_end":429058,"line_start":353,"line_end":353,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429063,"byte_end":429066,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429071,"byte_end":429085,"line_start":355,"line_end":355,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429090,"byte_end":429093,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429098,"byte_end":429105,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429110,"byte_end":429136,"line_start":358,"line_end":358,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429141,"byte_end":429144,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429149,"byte_end":429183,"line_start":360,"line_end":360,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429188,"byte_end":429191,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429196,"byte_end":429222,"line_start":362,"line_end":362,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429227,"byte_end":429264,"line_start":363,"line_end":363,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429269,"byte_end":429276,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4393},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430852,"byte_end":430872,"line_start":407,"line_end":407,"column_start":8,"column_end":28},"name":"par_sort_unstable_by","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by","value":"fn <F> (&mut self, compare: F) -> ()","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function, but may not preserve the order of\n equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function, but may not preserve the order of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429416,"byte_end":429509,"line_start":372,"line_end":372,"column_start":5,"column_end":98}},{"value":"/ equal elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429514,"byte_end":429533,"line_start":373,"line_end":373,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429538,"byte_end":429541,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429546,"byte_end":429641,"line_start":375,"line_end":375,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429646,"byte_end":429678,"line_start":376,"line_end":376,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429683,"byte_end":429686,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429691,"byte_end":429719,"line_start":378,"line_end":378,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429724,"byte_end":429727,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429732,"byte_end":429823,"line_start":380,"line_end":380,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429828,"byte_end":429915,"line_start":381,"line_end":381,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":429920,"byte_end":430010,"line_start":382,"line_end":382,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430015,"byte_end":430049,"line_start":383,"line_end":383,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430054,"byte_end":430057,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430062,"byte_end":430154,"line_start":385,"line_end":385,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430159,"byte_end":430219,"line_start":386,"line_end":386,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430224,"byte_end":430227,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430232,"byte_end":430321,"line_start":388,"line_end":388,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430326,"byte_end":430419,"line_start":389,"line_end":389,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430424,"byte_end":430437,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430442,"byte_end":430445,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430450,"byte_end":430496,"line_start":392,"line_end":392,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430501,"byte_end":430504,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430509,"byte_end":430523,"line_start":394,"line_end":394,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430528,"byte_end":430531,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430536,"byte_end":430543,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430548,"byte_end":430574,"line_start":397,"line_end":397,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430579,"byte_end":430582,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430587,"byte_end":430619,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_unstable_by(|a, b| a.cmp(b));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430624,"byte_end":430668,"line_start":400,"line_end":400,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430673,"byte_end":430708,"line_start":401,"line_end":401,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430713,"byte_end":430716,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430721,"byte_end":430743,"line_start":403,"line_end":403,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_unstable_by(|a, b| b.cmp(a));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430748,"byte_end":430792,"line_start":404,"line_end":404,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430797,"byte_end":430832,"line_start":405,"line_end":405,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":430837,"byte_end":430844,"line_start":406,"line_end":406,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4396},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432416,"byte_end":432440,"line_start":448,"line_end":448,"column_start":8,"column_end":32},"name":"par_sort_unstable_by_key","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by_key","value":"fn <B, F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":4377},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function, but may not preserve the order\n of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function, but may not preserve the order","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431085,"byte_end":431179,"line_start":416,"line_end":416,"column_start":5,"column_end":99}},{"value":"/ of equal elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431184,"byte_end":431206,"line_start":417,"line_end":417,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431211,"byte_end":431214,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431219,"byte_end":431314,"line_start":419,"line_end":419,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431319,"byte_end":431351,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431356,"byte_end":431359,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431364,"byte_end":431392,"line_start":422,"line_end":422,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431397,"byte_end":431400,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431405,"byte_end":431496,"line_start":424,"line_end":424,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431501,"byte_end":431588,"line_start":425,"line_end":425,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431593,"byte_end":431683,"line_start":426,"line_end":426,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431688,"byte_end":431722,"line_start":427,"line_end":427,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431727,"byte_end":431730,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431735,"byte_end":431827,"line_start":429,"line_end":429,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431832,"byte_end":431892,"line_start":430,"line_end":430,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431897,"byte_end":431900,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431905,"byte_end":431994,"line_start":432,"line_end":432,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":431999,"byte_end":432092,"line_start":433,"line_end":433,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432097,"byte_end":432110,"line_start":434,"line_end":434,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432115,"byte_end":432118,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432123,"byte_end":432169,"line_start":436,"line_end":436,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432174,"byte_end":432177,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432182,"byte_end":432196,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432201,"byte_end":432204,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432209,"byte_end":432216,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432221,"byte_end":432247,"line_start":441,"line_end":441,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432252,"byte_end":432255,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432260,"byte_end":432297,"line_start":443,"line_end":443,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432302,"byte_end":432305,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable_by_key(|k| k.abs());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432310,"byte_end":432354,"line_start":445,"line_end":445,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432359,"byte_end":432396,"line_start":446,"line_end":446,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":432401,"byte_end":432408,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7216},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":433690,"byte_end":433694,"line_start":502,"line_end":502,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":7219}],"decl_id":null,"docs":" Parallel iterator over immutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable items in a slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":433608,"byte_end":433661,"line_start":500,"line_end":500,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435204,"byte_end":435210,"line_start":567,"line_end":567,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":7227},{"krate":0,"index":7228}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435105,"byte_end":435175,"line_start":565,"line_end":565,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":7233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437166,"byte_end":437177,"line_start":647,"line_end":647,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":7236},{"krate":0,"index":7237},{"krate":0,"index":7238}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437067,"byte_end":437137,"line_start":645,"line_end":645,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":4491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437495,"byte_end":437504,"line_start":657,"line_end":657,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"fn (&self) -> &'data [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437315,"byte_end":437385,"line_start":654,"line_end":654,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437390,"byte_end":437465,"line_start":655,"line_end":655,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437470,"byte_end":437483,"line_start":656,"line_end":656,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":7243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":439454,"byte_end":439461,"line_start":737,"line_end":737,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":7246},{"krate":0,"index":7247}],"decl_id":null,"docs":" Parallel iterator over immutable overlapping windows of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable overlapping windows of a slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":439358,"byte_end":439425,"line_start":735,"line_end":735,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":7252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":441498,"byte_end":441505,"line_start":819,"line_end":819,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":7255}],"decl_id":null,"docs":" Parallel iterator over mutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable items in a slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":441418,"byte_end":441469,"line_start":817,"line_end":817,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":7260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":442984,"byte_end":442993,"line_start":881,"line_end":881,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":7263},{"krate":0,"index":7264}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":442887,"byte_end":442955,"line_start":879,"line_end":879,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":7269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":444879,"byte_end":444893,"line_start":955,"line_end":955,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":7272},{"krate":0,"index":7273},{"krate":0,"index":7274}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":444782,"byte_end":444850,"line_start":953,"line_end":953,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":4610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445589,"byte_end":445603,"line_start":971,"line_end":971,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"fn (self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445042,"byte_end":445112,"line_start":962,"line_end":962,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445117,"byte_end":445192,"line_start":963,"line_end":963,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445197,"byte_end":445210,"line_start":964,"line_end":964,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445215,"byte_end":445218,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ Note that this has to consume `self` to return the original lifetime of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445223,"byte_end":445298,"line_start":966,"line_end":966,"column_start":5,"column_end":80}},{"value":"/ the data, which prevents this from actually being used as a parallel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445303,"byte_end":445375,"line_start":967,"line_end":967,"column_start":5,"column_end":77}},{"value":"/ iterator since that also consumes. This method is provided for parity","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445380,"byte_end":445453,"line_start":968,"line_end":968,"column_start":5,"column_end":78}},{"value":"/ with `std::iter::ChunksExactMut`, but consider calling `remainder()` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445458,"byte_end":445533,"line_start":969,"line_end":969,"column_start":5,"column_end":80}},{"value":"/ `take_remainder()` as alternatives.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445538,"byte_end":445577,"line_start":970,"line_end":970,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445997,"byte_end":446006,"line_start":981,"line_end":981,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExactMut>::remainder","value":"fn (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445658,"byte_end":445728,"line_start":975,"line_end":975,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445733,"byte_end":445808,"line_start":976,"line_end":976,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445813,"byte_end":445826,"line_start":977,"line_end":977,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445831,"byte_end":445834,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ Consider `take_remainder()` if you need access to the data with its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445839,"byte_end":445910,"line_start":979,"line_end":979,"column_start":5,"column_end":76}},{"value":"/ original lifetime, rather than borrowing through `&mut self` here.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445915,"byte_end":445985,"line_start":980,"line_end":980,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":4612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446285,"byte_end":446299,"line_start":988,"line_end":988,"column_start":12,"column_end":26},"name":"take_remainder","qualname":"<ChunksExactMut>::take_remainder","value":"fn (&mut self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements. Subsequent calls will return an empty slice.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446060,"byte_end":446130,"line_start":985,"line_end":985,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446135,"byte_end":446210,"line_start":986,"line_end":986,"column_start":5,"column_end":80}},{"value":"/ elements. Subsequent calls will return an empty slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446215,"byte_end":446273,"line_start":987,"line_end":987,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":4640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448182,"byte_end":448187,"line_start":1061,"line_end":1061,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4644},{"krate":0,"index":4645}],"decl_id":null,"docs":" Parallel iterator over slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over slices separated by a predicate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448112,"byte_end":448170,"line_start":1060,"line_end":1060,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4674},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":450056,"byte_end":450064,"line_start":1137,"line_end":1137,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":4678},{"krate":0,"index":4679}],"decl_id":null,"docs":" Parallel iterator over mutable slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable slices separated by a predicate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":449978,"byte_end":450044,"line_start":1136,"line_end":1136,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":4703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","parent":null,"children":[{"krate":0,"index":4704},{"krate":0,"index":4705},{"krate":0,"index":4706},{"krate":0,"index":4707},{"krate":0,"index":4708},{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4726},{"krate":0,"index":4728},{"krate":0,"index":4743},{"krate":0,"index":4744},{"krate":0,"index":4748},{"krate":0,"index":4761},{"krate":0,"index":7282},{"krate":0,"index":7288},{"krate":0,"index":7285},{"krate":0,"index":4775},{"krate":0,"index":4778},{"krate":0,"index":4783},{"krate":0,"index":7291},{"krate":0,"index":7297},{"krate":0,"index":7294},{"krate":0,"index":4789},{"krate":0,"index":4793},{"krate":0,"index":4798},{"krate":0,"index":7300},{"krate":0,"index":7306},{"krate":0,"index":7303},{"krate":0,"index":4804},{"krate":0,"index":4807},{"krate":0,"index":4812},{"krate":0,"index":7309},{"krate":0,"index":7315},{"krate":0,"index":7312},{"krate":0,"index":4818},{"krate":0,"index":4821},{"krate":0,"index":4826},{"krate":0,"index":7318},{"krate":0,"index":7327},{"krate":0,"index":7323},{"krate":0,"index":4832},{"krate":0,"index":4836},{"krate":0,"index":4842},{"krate":0,"index":7331},{"krate":0,"index":7340},{"krate":0,"index":7336},{"krate":0,"index":4852},{"krate":0,"index":4858},{"krate":0,"index":4862},{"krate":0,"index":4867},{"krate":0,"index":4873},{"krate":0,"index":7344},{"krate":0,"index":7351},{"krate":0,"index":7348},{"krate":0,"index":4882},{"krate":0,"index":4883},{"krate":0,"index":7354},{"krate":0,"index":7361},{"krate":0,"index":7358},{"krate":0,"index":4888},{"krate":0,"index":4889},{"krate":0,"index":7364},{"krate":0,"index":7373},{"krate":0,"index":7369},{"krate":0,"index":4894},{"krate":0,"index":4900},{"krate":0,"index":4906},{"krate":0,"index":7377},{"krate":0,"index":7386},{"krate":0,"index":7382},{"krate":0,"index":4914},{"krate":0,"index":4921},{"krate":0,"index":4927}],"decl_id":null,"docs":" Parallel iterator types for [strings][std::str]","sig":null,"attributes":[{"value":"! Parallel iterator types for [strings][std::str]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512108,"byte_end":512159,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512160,"byte_end":512163,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512164,"byte_end":512242,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512243,"byte_end":512281,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512282,"byte_end":512285,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! Note: [`ParallelString::par_split()`] and [`par_split_terminator()`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512286,"byte_end":512358,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"! reference a `Pattern` trait which is not visible outside this crate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512359,"byte_end":512431,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! This trait is intentionally kept private, for use only by Rayon itself.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512432,"byte_end":512507,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"! It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512508,"byte_end":512585,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512586,"byte_end":512589,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! [`ParallelString::par_split()`]: trait.ParallelString.html#method.par_split","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512590,"byte_end":512669,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"! [`par_split_terminator()`]: trait.ParallelString.html#method.par_split_terminator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512670,"byte_end":512755,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512756,"byte_end":512759,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! [std::str]: https://doc.rust-lang.org/stable/std/str/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":512760,"byte_end":512817,"line_start":14,"line_end":14,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":4710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514066,"byte_end":514080,"line_start":59,"line_end":59,"column_start":11,"column_end":25},"name":"ParallelString","qualname":"::str::ParallelString","value":"ParallelString","parent":null,"children":[{"krate":0,"index":4711},{"krate":0,"index":4712},{"krate":0,"index":4713},{"krate":0,"index":4714},{"krate":0,"index":4715},{"krate":0,"index":4716},{"krate":0,"index":4718},{"krate":0,"index":4720},{"krate":0,"index":4721},{"krate":0,"index":4722},{"krate":0,"index":4724}],"decl_id":null,"docs":" Parallel extensions for strings.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for strings.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514019,"byte_end":514055,"line_start":58,"line_end":58,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4711},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514197,"byte_end":514215,"line_start":62,"line_end":62,"column_start":8,"column_end":26},"name":"as_parallel_string","qualname":"::str::ParallelString::as_parallel_string","value":"fn (&self) -> &str","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a plain string slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain string slice, which is used to implement the rest of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514087,"byte_end":514159,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ the parallel methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514164,"byte_end":514189,"line_start":61,"line_end":61,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4712},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514500,"byte_end":514509,"line_start":73,"line_end":73,"column_start":8,"column_end":17},"name":"par_chars","qualname":"::str::ParallelString::par_chars","value":"fn (&self) -> Chars<'_>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514237,"byte_end":514301,"line_start":64,"line_end":64,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514306,"byte_end":514309,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514314,"byte_end":514328,"line_start":66,"line_end":66,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514333,"byte_end":514336,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514341,"byte_end":514348,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514353,"byte_end":514379,"line_start":69,"line_end":69,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_chars().max_by_key(|c| *c as i32);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514384,"byte_end":514444,"line_start":70,"line_end":70,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(Some('o'), max);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514449,"byte_end":514480,"line_start":71,"line_end":71,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514485,"byte_end":514492,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4713},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514918,"byte_end":514934,"line_start":88,"line_end":88,"column_start":8,"column_end":24},"name":"par_char_indices","qualname":"::str::ParallelString::par_char_indices","value":"fn (&self) -> CharIndices<'_>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string, with their positions.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string, with their positions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514615,"byte_end":514701,"line_start":79,"line_end":79,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514706,"byte_end":514709,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514714,"byte_end":514728,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514733,"byte_end":514736,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514741,"byte_end":514748,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514753,"byte_end":514779,"line_start":84,"line_end":84,"column_start":5,"column_end":31}},{"value":"/ let min = \"hello\".par_char_indices().min_by_key(|&(_i, c)| c as i32);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514784,"byte_end":514857,"line_start":85,"line_end":85,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(Some((1, 'e')), min);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514862,"byte_end":514898,"line_start":86,"line_end":86,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":514903,"byte_end":514910,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4714},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515594,"byte_end":515603,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"par_bytes","qualname":"::str::ParallelString::par_bytes","value":"fn (&self) -> Bytes<'_>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the bytes of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the bytes of a string.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515052,"byte_end":515111,"line_start":94,"line_end":94,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515116,"byte_end":515119,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Note that multi-byte sequences (for code points greater than `U+007F`)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515124,"byte_end":515198,"line_start":96,"line_end":96,"column_start":5,"column_end":79}},{"value":"/ are produced as separate items, but will not be split across threads.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515203,"byte_end":515276,"line_start":97,"line_end":97,"column_start":5,"column_end":78}},{"value":"/ If you would prefer an indexed iterator without that guarantee, consider","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515281,"byte_end":515357,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ `string.as_bytes().par_iter().cloned()` instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515362,"byte_end":515414,"line_start":99,"line_end":99,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515419,"byte_end":515422,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515427,"byte_end":515441,"line_start":101,"line_end":101,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515446,"byte_end":515449,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515454,"byte_end":515461,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515466,"byte_end":515492,"line_start":104,"line_end":104,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_bytes().max();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515497,"byte_end":515537,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(b'o'), max);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515542,"byte_end":515574,"line_start":106,"line_end":106,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515579,"byte_end":515586,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4715},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516324,"byte_end":516340,"line_start":132,"line_end":132,"column_start":8,"column_end":24},"name":"par_encode_utf16","qualname":"::str::ParallelString::par_encode_utf16","value":"fn (&self) -> EncodeUtf16<'_>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over a string encoded as UTF-16.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over a string encoded as UTF-16.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515709,"byte_end":515773,"line_start":114,"line_end":114,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515778,"byte_end":515781,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Note that surrogate pairs (for code points greater than `U+FFFF`) are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515786,"byte_end":515859,"line_start":116,"line_end":116,"column_start":5,"column_end":78}},{"value":"/ produced as separate items, but will not be split across threads.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515864,"byte_end":515933,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515938,"byte_end":515941,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515946,"byte_end":515960,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515965,"byte_end":515968,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515973,"byte_end":515980,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":515985,"byte_end":516011,"line_start":122,"line_end":122,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516016,"byte_end":516019,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let max = \"hello\".par_encode_utf16().max();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516024,"byte_end":516071,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Some(b'o' as u16), max);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516076,"byte_end":516115,"line_start":125,"line_end":125,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516120,"byte_end":516123,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let text = \"Zażółć gęślą jaźń\";","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516128,"byte_end":516172,"line_start":127,"line_end":127,"column_start":5,"column_end":40}},{"value":"/ let utf8_len = text.len();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516177,"byte_end":516207,"line_start":128,"line_end":128,"column_start":5,"column_end":35}},{"value":"/ let utf16_len = text.par_encode_utf16().count();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516212,"byte_end":516264,"line_start":129,"line_end":129,"column_start":5,"column_end":57}},{"value":"/ assert!(utf16_len <= utf8_len);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516269,"byte_end":516304,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516309,"byte_end":516316,"line_start":131,"line_end":131,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4716},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517028,"byte_end":517037,"line_start":154,"line_end":154,"column_start":8,"column_end":17},"name":"par_split","qualname":"::str::ParallelString::par_split","value":"fn <P> (&self, separator: P) -> Split<'_, P>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings separated by a\n given character or predicate, similar to `str::split`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings separated by a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516458,"byte_end":516520,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/ given character or predicate, similar to `str::split`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516525,"byte_end":516583,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516588,"byte_end":516591,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516596,"byte_end":516667,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516672,"byte_end":516749,"line_start":142,"line_end":142,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516754,"byte_end":516757,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516762,"byte_end":516776,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516781,"byte_end":516784,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516789,"byte_end":516796,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516801,"byte_end":516827,"line_start":147,"line_end":147,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516832,"byte_end":516874,"line_start":148,"line_end":148,"column_start":5,"column_end":47}},{"value":"/    .par_split(',')","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516879,"byte_end":516901,"line_start":149,"line_end":149,"column_start":5,"column_end":27}},{"value":"/    .filter_map(|s| s.trim().parse::<i32>().ok())","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516906,"byte_end":516958,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"/    .sum();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516963,"byte_end":516977,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":516982,"byte_end":517008,"line_start":152,"line_end":152,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517013,"byte_end":517020,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4718},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517866,"byte_end":517886,"line_start":175,"line_end":175,"column_start":8,"column_end":28},"name":"par_split_terminator","qualname":"::str::ParallelString::par_split_terminator","value":"fn <P> (&self, terminator: P) -> SplitTerminator<'_, P>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings terminated by a\n given character or predicate, similar to `str::split_terminator`.\n It's equivalent to `par_split`, except it doesn't produce an empty\n substring after a trailing terminator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings terminated by a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517157,"byte_end":517220,"line_start":158,"line_end":158,"column_start":5,"column_end":68}},{"value":"/ given character or predicate, similar to `str::split_terminator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517225,"byte_end":517294,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/ It's equivalent to `par_split`, except it doesn't produce an empty","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517299,"byte_end":517369,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ substring after a trailing terminator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517374,"byte_end":517416,"line_start":161,"line_end":161,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517421,"byte_end":517424,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517429,"byte_end":517500,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517505,"byte_end":517582,"line_start":164,"line_end":164,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517587,"byte_end":517590,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517595,"byte_end":517609,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517614,"byte_end":517617,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517622,"byte_end":517629,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517634,"byte_end":517660,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ let parts: Vec<_> = \"((1 + 3) * 2)\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517665,"byte_end":517704,"line_start":170,"line_end":170,"column_start":5,"column_end":44}},{"value":"/     .par_split_terminator(|c| c == '(' || c == ')')","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517709,"byte_end":517764,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517769,"byte_end":517788,"line_start":172,"line_end":172,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![\"\", \"\", \"1 + 3\", \" * 2\"], parts);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517793,"byte_end":517846,"line_start":173,"line_end":173,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":517851,"byte_end":517858,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4720},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518557,"byte_end":518566,"line_start":194,"line_end":194,"column_start":8,"column_end":17},"name":"par_lines","qualname":"::str::ParallelString::par_lines","value":"fn (&self) -> Lines<'_>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the lines of a string, ending with an\n optional carriage return and with a newline (`\\r\\n` or just `\\n`).\n The final line ending is optional, and line endings are not included in\n the output strings.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the lines of a string, ending with an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518028,"byte_end":518102,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ optional carriage return and with a newline (`\\r\\n` or just `\\n`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518107,"byte_end":518177,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ The final line ending is optional, and line endings are not included in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518182,"byte_end":518257,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/ the output strings.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518262,"byte_end":518285,"line_start":182,"line_end":182,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518290,"byte_end":518293,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518298,"byte_end":518312,"line_start":184,"line_end":184,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518317,"byte_end":518320,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518325,"byte_end":518332,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518337,"byte_end":518363,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/ let lengths: Vec<_> = \"hello world\\nfizbuzz\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518368,"byte_end":518416,"line_start":188,"line_end":188,"column_start":5,"column_end":53}},{"value":"/     .par_lines()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518421,"byte_end":518441,"line_start":189,"line_end":189,"column_start":5,"column_end":25}},{"value":"/     .map(|l| l.len())","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518446,"byte_end":518471,"line_start":190,"line_end":190,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518476,"byte_end":518495,"line_start":191,"line_end":191,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![11, 7], lengths);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518500,"byte_end":518537,"line_start":192,"line_end":192,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518542,"byte_end":518549,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519191,"byte_end":519211,"line_start":213,"line_end":213,"column_start":8,"column_end":28},"name":"par_split_whitespace","qualname":"::str::ParallelString::par_split_whitespace","value":"fn (&self) -> SplitWhitespace<'_>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the sub-slices of a string that are\n separated by any amount of whitespace.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the sub-slices of a string that are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518641,"byte_end":518713,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ separated by any amount of whitespace.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518718,"byte_end":518760,"line_start":199,"line_end":199,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518765,"byte_end":518768,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ As with `str::split_whitespace`, 'whitespace' is defined according to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518773,"byte_end":518846,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ the terms of the Unicode Derived Core Property `White_Space`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518851,"byte_end":518916,"line_start":202,"line_end":202,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518921,"byte_end":518924,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518929,"byte_end":518943,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518948,"byte_end":518951,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518956,"byte_end":518963,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518968,"byte_end":518994,"line_start":207,"line_end":207,"column_start":5,"column_end":31}},{"value":"/ let longest = \"which is the longest word?\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":518999,"byte_end":519045,"line_start":208,"line_end":208,"column_start":5,"column_end":51}},{"value":"/     .par_split_whitespace()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519050,"byte_end":519081,"line_start":209,"line_end":209,"column_start":5,"column_end":36}},{"value":"/     .max_by_key(|word| word.len());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519086,"byte_end":519125,"line_start":210,"line_end":210,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(\"longest\"), longest);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519130,"byte_end":519171,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519176,"byte_end":519183,"line_start":212,"line_end":212,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519888,"byte_end":519899,"line_start":233,"line_end":233,"column_start":8,"column_end":19},"name":"par_matches","qualname":"::str::ParallelString::par_matches","value":"fn <P> (&self, pattern: P) -> Matches<'_, P>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a\n given character or predicate, similar to `str::matches`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519306,"byte_end":519366,"line_start":217,"line_end":217,"column_start":5,"column_end":65}},{"value":"/ given character or predicate, similar to `str::matches`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519371,"byte_end":519431,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519436,"byte_end":519439,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519444,"byte_end":519515,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519520,"byte_end":519597,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519602,"byte_end":519605,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519610,"byte_end":519624,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519629,"byte_end":519632,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519637,"byte_end":519644,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519649,"byte_end":519675,"line_start":226,"line_end":226,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519680,"byte_end":519722,"line_start":227,"line_end":227,"column_start":5,"column_end":47}},{"value":"/    .par_matches(char::is_numeric)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519727,"byte_end":519764,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/    .map(|s| s.parse::<i32>().expect(\"digit\"))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519769,"byte_end":519818,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/    .sum();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519823,"byte_end":519837,"line_start":230,"line_end":230,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519842,"byte_end":519868,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":519873,"byte_end":519880,"line_start":232,"line_end":232,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4724},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520677,"byte_end":520694,"line_start":255,"line_end":255,"column_start":8,"column_end":25},"name":"par_match_indices","qualname":"::str::ParallelString::par_match_indices","value":"fn <P> (&self, pattern: P) -> MatchIndices<'_, P>","parent":{"krate":0,"index":4710},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a given character\n or predicate, with their positions, similar to `str::match_indices`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a given character","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520057,"byte_end":520133,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/ or predicate, with their positions, similar to `str::match_indices`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520138,"byte_end":520210,"line_start":241,"line_end":241,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520215,"byte_end":520218,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520223,"byte_end":520294,"line_start":243,"line_end":243,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520299,"byte_end":520376,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520381,"byte_end":520384,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520389,"byte_end":520403,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520408,"byte_end":520411,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520416,"byte_end":520423,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520428,"byte_end":520454,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"/ let digits: Vec<_> = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520459,"byte_end":520510,"line_start":250,"line_end":250,"column_start":5,"column_end":56}},{"value":"/    .par_match_indices(char::is_numeric)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520515,"byte_end":520558,"line_start":251,"line_end":251,"column_start":5,"column_end":48}},{"value":"/    .collect();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520563,"byte_end":520581,"line_start":252,"line_end":252,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(digits, vec![(0, \"1\"), (3, \"2\"), (14, \"3\"), (17, \"4\")]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520586,"byte_end":520657,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":520662,"byte_end":520669,"line_start":254,"line_end":254,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4730},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521591,"byte_end":521598,"line_start":283,"line_end":283,"column_start":15,"column_end":22},"name":"Pattern","qualname":"::str::private::Pattern","value":"Pattern: Sized + Sync + Send","parent":null,"children":[{"krate":0,"index":7279},{"krate":0,"index":4731},{"krate":0,"index":4732},{"krate":0,"index":4733},{"krate":0,"index":4734},{"krate":0,"index":4737},{"krate":0,"index":4740}],"decl_id":null,"docs":" Pattern-matching trait for `ParallelString`, somewhat like a mix of\n `std::str::pattern::{Pattern, Searcher}`.","sig":null,"attributes":[{"value":"/ Pattern-matching trait for `ParallelString`, somewhat like a mix of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521378,"byte_end":521449,"line_start":279,"line_end":279,"column_start":5,"column_end":76}},{"value":"/ `std::str::pattern::{Pattern, Searcher}`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521454,"byte_end":521499,"line_start":280,"line_end":280,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521504,"byte_end":521507,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521512,"byte_end":521576,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":4731},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521658,"byte_end":521665,"line_start":285,"line_end":285,"column_start":12,"column_end":19},"name":"find_in","qualname":"::str::private::Pattern::find_in","value":"fn (&self, haystack: &str) -> Option<usize>","parent":{"krate":0,"index":4730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521718,"byte_end":521726,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"rfind_in","qualname":"::str::private::Pattern::rfind_in","value":"fn (&self, haystack: &str) -> Option<usize>","parent":{"krate":0,"index":4730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4733},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521779,"byte_end":521791,"line_start":287,"line_end":287,"column_start":12,"column_end":24},"name":"is_suffix_of","qualname":"::str::private::Pattern::is_suffix_of","value":"fn (&self, haystack: &str) -> bool","parent":{"krate":0,"index":4730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4734},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521835,"byte_end":521846,"line_start":288,"line_end":288,"column_start":12,"column_end":23},"name":"fold_splits","qualname":"::str::private::Pattern::fold_splits","value":"fn <'ch, F> (&self, haystack: &'ch str, folder: F, skip_last: bool) -> F","parent":{"krate":0,"index":4730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4737},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521973,"byte_end":521985,"line_start":291,"line_end":291,"column_start":12,"column_end":24},"name":"fold_matches","qualname":"::str::private::Pattern::fold_matches","value":"fn <'ch, F> (&self, haystack: &'ch str, folder: F) -> F","parent":{"krate":0,"index":4730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4740},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":522095,"byte_end":522113,"line_start":294,"line_end":294,"column_start":12,"column_end":30},"name":"fold_match_indices","qualname":"::str::private::Pattern::fold_match_indices","value":"fn <'ch, F> (&self, haystack: &'ch str, folder: F, base: usize) -> F","parent":{"krate":0,"index":4730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":524584,"byte_end":524589,"line_start":395,"line_end":395,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":7284}],"decl_id":null,"docs":" Parallel iterator over the characters of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":524495,"byte_end":524548,"line_start":393,"line_end":393,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7291},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":525631,"byte_end":525642,"line_start":439,"line_end":439,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":7293}],"decl_id":null,"docs":" Parallel iterator over the characters of a string, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string, with their positions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":525520,"byte_end":525595,"line_start":437,"line_end":437,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":7300},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":527014,"byte_end":527019,"line_start":495,"line_end":495,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":7302}],"decl_id":null,"docs":" Parallel iterator over the bytes of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the bytes of a string","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":526930,"byte_end":526978,"line_start":493,"line_end":493,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":7309},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":528035,"byte_end":528046,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"EncodeUtf16","qualname":"::str::EncodeUtf16","value":"EncodeUtf16 {  }","parent":null,"children":[{"krate":0,"index":7311}],"decl_id":null,"docs":" Parallel iterator over a string encoded as UTF-16\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a string encoded as UTF-16","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":527946,"byte_end":527999,"line_start":537,"line_end":537,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":529114,"byte_end":529119,"line_start":583,"line_end":583,"column_start":12,"column_end":17},"name":"Split","qualname":"::str::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":7321},{"krate":0,"index":7322}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a pattern","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":529018,"byte_end":529078,"line_start":581,"line_end":581,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":7331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":530788,"byte_end":530803,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"SplitTerminator","qualname":"::str::SplitTerminator","value":"SplitTerminator {  }","parent":null,"children":[{"krate":0,"index":7334},{"krate":0,"index":7335}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a terminator pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a terminator pattern","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":530681,"byte_end":530752,"line_start":642,"line_end":642,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":7344},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":532661,"byte_end":532666,"line_start":710,"line_end":710,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over lines in a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over lines in a string","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":532581,"byte_end":532625,"line_start":708,"line_end":708,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":7354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":533337,"byte_end":533352,"line_start":739,"line_end":739,"column_start":12,"column_end":27},"name":"SplitWhitespace","qualname":"::str::SplitWhitespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over substrings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by whitespace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":533240,"byte_end":533301,"line_start":737,"line_end":737,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":7364},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":533941,"byte_end":533948,"line_start":764,"line_end":764,"column_start":12,"column_end":19},"name":"Matches","qualname":"::str::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":7367},{"krate":0,"index":7368}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":533847,"byte_end":533905,"line_start":762,"line_end":762,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":7377},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":535349,"byte_end":535361,"line_start":820,"line_end":820,"column_start":12,"column_end":24},"name":"MatchIndices","qualname":"::str::MatchIndices","value":"MatchIndices {  }","parent":null,"children":[{"krate":0,"index":7380},{"krate":0,"index":7381}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern, with their positions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":535233,"byte_end":535313,"line_start":818,"line_end":818,"column_start":1,"column_end":81}}]},{"kind":"Mod","id":{"krate":0,"index":4935},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","parent":null,"children":[{"krate":0,"index":4936},{"krate":0,"index":4937},{"krate":0,"index":7390},{"krate":0,"index":7396},{"krate":0,"index":7393},{"krate":0,"index":4938},{"krate":0,"index":4943},{"krate":0,"index":4949},{"krate":0,"index":4956},{"krate":0,"index":4960},{"krate":0,"index":4967},{"krate":0,"index":4971},{"krate":0,"index":4975},{"krate":0,"index":4981},{"krate":0,"index":4985},{"krate":0,"index":4989}],"decl_id":null,"docs":" Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","sig":null,"attributes":[{"value":"! Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":536739,"byte_end":536801,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":536802,"byte_end":536805,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":536806,"byte_end":536884,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":536885,"byte_end":536923,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":536924,"byte_end":536927,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::vec]: https://doc.rust-lang.org/stable/std/vec/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":536928,"byte_end":536985,"line_start":6,"line_end":6,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7390},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537123,"byte_end":537131,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":7392}],"decl_id":null,"docs":" Parallel iterator that moves out of a vector.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537038,"byte_end":537087,"line_start":11,"line_end":11,"column_start":1,"column_end":50}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/split_producer.rs","byte_start":8505,"byte_end":8518,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/split_producer.rs","byte_start":9986,"byte_end":9999,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":13133,"byte_end":13143,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":13600,"byte_end":13604,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14804,"byte_end":14808,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":16319,"byte_end":16323,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":17587,"byte_end":17591,"line_start":35,"line_end":35,"column_start":50,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":19237,"byte_end":19241,"line_start":35,"line_end":35,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":20347,"byte_end":20351,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21760,"byte_end":21764,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":128497,"byte_end":128505,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":129634,"byte_end":129648,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132007,"byte_end":132015,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136728,"byte_end":136733,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136962,"byte_end":136967,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":138070,"byte_end":138075,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":139010,"byte_end":139019,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":139697,"byte_end":139706,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":140375,"byte_end":140388,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":140571,"byte_end":140584,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142196,"byte_end":142204,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142418,"byte_end":142426,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142722,"byte_end":142730,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142851,"byte_end":142859,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143629,"byte_end":143635,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143835,"byte_end":143841,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":144174,"byte_end":144180,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":144878,"byte_end":144886,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":145459,"byte_end":145472,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":146591,"byte_end":146599,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":147277,"byte_end":147285,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":147446,"byte_end":147454,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148585,"byte_end":148591,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148779,"byte_end":148785,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":149233,"byte_end":149239,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":149884,"byte_end":149892,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":150449,"byte_end":150463,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":151359,"byte_end":151373,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":151485,"byte_end":151499,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":152147,"byte_end":152161,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":152481,"byte_end":152493,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":159988,"byte_end":160003,"line_start":20,"line_end":20,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":160644,"byte_end":160657,"line_start":39,"line_end":39,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":160695,"byte_end":160708,"line_start":41,"line_end":41,"column_start":13,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":161054,"byte_end":161067,"line_start":55,"line_end":55,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":161374,"byte_end":161389,"line_start":65,"line_end":65,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":162468,"byte_end":162481,"line_start":101,"line_end":101,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":163391,"byte_end":163406,"line_start":132,"line_end":132,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":163795,"byte_end":163809,"line_start":145,"line_end":145,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/mod.rs","byte_start":155448,"byte_end":155455,"line_start":74,"line_end":74,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/mod.rs","byte_start":158444,"byte_end":158447,"line_start":144,"line_end":144,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178771,"byte_end":178777,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178965,"byte_end":178971,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":179418,"byte_end":179424,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":180068,"byte_end":180076,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":180632,"byte_end":180646,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":181615,"byte_end":181629,"line_start":143,"line_end":143,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":181741,"byte_end":181755,"line_start":149,"line_end":149,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":182402,"byte_end":182416,"line_start":178,"line_end":178,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":182735,"byte_end":182747,"line_start":196,"line_end":196,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184103,"byte_end":184108,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184198,"byte_end":184203,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184339,"byte_end":184344,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184630,"byte_end":184635,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":185115,"byte_end":185128,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":186108,"byte_end":186117,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":186311,"byte_end":186320,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":186664,"byte_end":186673,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":187179,"byte_end":187187,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":187771,"byte_end":187788,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":190777,"byte_end":190787,"line_start":64,"line_end":64,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":191085,"byte_end":191095,"line_start":77,"line_end":77,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":191408,"byte_end":191416,"line_start":90,"line_end":90,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":191752,"byte_end":191760,"line_start":104,"line_end":104,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":192097,"byte_end":192105,"line_start":118,"line_end":118,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":192400,"byte_end":192408,"line_start":131,"line_end":131,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":192879,"byte_end":192886,"line_start":152,"line_end":152,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":193342,"byte_end":193349,"line_start":168,"line_end":168,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":193877,"byte_end":193884,"line_start":191,"line_end":191,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":194217,"byte_end":194224,"line_start":205,"line_end":205,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":194677,"byte_end":194687,"line_start":224,"line_end":224,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":195128,"byte_end":195138,"line_start":241,"line_end":241,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":195543,"byte_end":195549,"line_start":259,"line_end":259,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":196205,"byte_end":196211,"line_start":278,"line_end":278,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":196679,"byte_end":196685,"line_start":293,"line_end":293,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":196947,"byte_end":196953,"line_start":303,"line_end":303,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":197230,"byte_end":197236,"line_start":313,"line_end":313,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":197608,"byte_end":197616,"line_start":327,"line_end":327,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":197903,"byte_end":197911,"line_start":340,"line_end":340,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":198324,"byte_end":198327,"line_start":356,"line_end":356,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199382,"byte_end":199388,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199548,"byte_end":199554,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199766,"byte_end":199772,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":200316,"byte_end":200330,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":200481,"byte_end":200495,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":201239,"byte_end":201253,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":201636,"byte_end":201648,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202924,"byte_end":202933,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":203140,"byte_end":203149,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":203339,"byte_end":203348,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":203911,"byte_end":203928,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":204081,"byte_end":204098,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":204884,"byte_end":204901,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":205302,"byte_end":205317,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":206487,"byte_end":206499,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":206653,"byte_end":206665,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":207250,"byte_end":207262,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":207622,"byte_end":207632,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1079},{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":208659,"byte_end":208670,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":211192,"byte_end":211204,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":211754,"byte_end":211766,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":212832,"byte_end":212844,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":214402,"byte_end":214412,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":216120,"byte_end":216131,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216943,"byte_end":216950,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":217129,"byte_end":217136,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":217317,"byte_end":217324,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":217935,"byte_end":217950,"line_start":59,"line_end":59,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":218095,"byte_end":218110,"line_start":65,"line_end":65,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":218902,"byte_end":218917,"line_start":97,"line_end":97,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":219357,"byte_end":219370,"line_start":118,"line_end":118,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220942,"byte_end":220949,"line_start":16,"line_end":16,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":221184,"byte_end":221191,"line_start":27,"line_end":27,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":221627,"byte_end":221631,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222428,"byte_end":222432,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222622,"byte_end":222626,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":223235,"byte_end":223247,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":224103,"byte_end":224115,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":224584,"byte_end":224594,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1315},{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":225754,"byte_end":225762,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226551,"byte_end":226559,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226813,"byte_end":226821,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":227389,"byte_end":227405,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":228323,"byte_end":228339,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/for_each.rs","byte_start":229068,"byte_end":229083,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/for_each.rs","byte_start":229479,"byte_end":229494,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/for_each.rs","byte_start":229918,"byte_end":229933,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":230819,"byte_end":230822,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":231092,"byte_end":231100,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":231457,"byte_end":231467,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":231777,"byte_end":231787,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":232251,"byte_end":232258,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":232793,"byte_end":232801,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233101,"byte_end":233108,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233431,"byte_end":233439,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233718,"byte_end":233724,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233986,"byte_end":233992,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":234260,"byte_end":234266,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":234530,"byte_end":234536,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":234807,"byte_end":234813,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1475}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":235257,"byte_end":235260,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236794,"byte_end":236801,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236962,"byte_end":236969,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":237185,"byte_end":237192,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":237652,"byte_end":237659,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1511},{"krate":0,"index":1513},{"krate":0,"index":1514}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":238401,"byte_end":238409,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":239080,"byte_end":239095,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":240305,"byte_end":240320,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":240470,"byte_end":240485,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":241228,"byte_end":241243,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":241622,"byte_end":241635,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242959,"byte_end":242969,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":243221,"byte_end":243231,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":243608,"byte_end":243618,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":244514,"byte_end":244523,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":245333,"byte_end":245342,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":246123,"byte_end":246141,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":246461,"byte_end":246479,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":249344,"byte_end":249357,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":250490,"byte_end":250503,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":251064,"byte_end":251077,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":252004,"byte_end":252022,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":252664,"byte_end":252682,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":253059,"byte_end":253077,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":254179,"byte_end":254190,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":254421,"byte_end":254432,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":254962,"byte_end":254973,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":255880,"byte_end":255888,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1740},{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":256455,"byte_end":256474,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":256715,"byte_end":256734,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":258909,"byte_end":258924,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":259696,"byte_end":259711,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":260359,"byte_end":260374,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":260722,"byte_end":260741,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":260966,"byte_end":260985,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":262063,"byte_end":262082,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":262622,"byte_end":262639,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264362,"byte_end":264368,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264573,"byte_end":264579,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264914,"byte_end":264920,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":265498,"byte_end":265506,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":266141,"byte_end":266155,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267447,"byte_end":267453,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267658,"byte_end":267664,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267999,"byte_end":268005,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1877}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":268583,"byte_end":268591,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1886},{"krate":0,"index":1887}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":269226,"byte_end":269240,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1901}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270607,"byte_end":270610,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270767,"byte_end":270770,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270973,"byte_end":270976,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1925}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":271450,"byte_end":271453,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":272195,"byte_end":272203,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1945},{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":272882,"byte_end":272893,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":274065,"byte_end":274076,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1977}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":274217,"byte_end":274228,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":274967,"byte_end":274978,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":275369,"byte_end":275378,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2014},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276615,"byte_end":276622,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276854,"byte_end":276861,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":277093,"byte_end":277100,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":277616,"byte_end":277623,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2049}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":278468,"byte_end":278476,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2064},{"krate":0,"index":2065}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":279259,"byte_end":279274,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":280607,"byte_end":280618,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2103},{"krate":0,"index":2104},{"krate":0,"index":2105}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":280999,"byte_end":281010,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":281301,"byte_end":281312,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":281626,"byte_end":281641,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":281807,"byte_end":281822,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":282666,"byte_end":282681,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2153},{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":283141,"byte_end":283154,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2182},{"krate":0,"index":2183}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284685,"byte_end":284692,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284865,"byte_end":284872,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2193}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":285116,"byte_end":285123,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2203}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":285663,"byte_end":285670,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2213}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":286545,"byte_end":286553,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":287363,"byte_end":287378,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":288828,"byte_end":288843,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2268}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":289025,"byte_end":289040,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":289896,"byte_end":289911,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":2291},{"krate":0,"index":2292}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":299289,"byte_end":299301,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":299645,"byte_end":299657,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":300013,"byte_end":300025,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2322},{"krate":0,"index":2323}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":300219,"byte_end":300230,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":301198,"byte_end":301202,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2338}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":301488,"byte_end":301492,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2341},{"krate":0,"index":2343},{"krate":0,"index":2344}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302679,"byte_end":302683,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2355}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302841,"byte_end":302845,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302955,"byte_end":302964,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":303159,"byte_end":303168,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":303678,"byte_end":303687,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":304387,"byte_end":304395,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":305104,"byte_end":305121,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":306219,"byte_end":306232,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":306579,"byte_end":306592,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2414}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":306843,"byte_end":306856,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2418}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":307167,"byte_end":307184,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":308142,"byte_end":308159,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2438},{"krate":0,"index":2439}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":308638,"byte_end":308653,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2458},{"krate":0,"index":2459}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":309502,"byte_end":309518,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2469}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311427,"byte_end":311428,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2494}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311938,"byte_end":311948,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2497},{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":312946,"byte_end":312966,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":313258,"byte_end":313278,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317086,"byte_end":317101,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317123,"byte_end":317138,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2537}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317287,"byte_end":317302,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317852,"byte_end":317867,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2550},{"krate":0,"index":2551}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":318099,"byte_end":318114,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2554}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":318299,"byte_end":318312,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2565},{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":319327,"byte_end":319341,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":319383,"byte_end":319397,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2589}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":319499,"byte_end":319513,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":2600}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":320040,"byte_end":320054,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2606},{"krate":0,"index":2607}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":320303,"byte_end":320317,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2613}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":320558,"byte_end":320570,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2629}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321972,"byte_end":321978,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2639},{"krate":0,"index":2640}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322830,"byte_end":322836,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2644},{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323286,"byte_end":323300,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324351,"byte_end":324358,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2663}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324676,"byte_end":324683,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2670}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":325295,"byte_end":325310,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":326107,"byte_end":326111,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2687},{"krate":0,"index":2688},{"krate":0,"index":2689}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":326489,"byte_end":326493,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2692}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":326622,"byte_end":326626,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2695}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327205,"byte_end":327208,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2702}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327390,"byte_end":327393,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327728,"byte_end":327731,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2711},{"krate":0,"index":2713},{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":328301,"byte_end":328309,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2723},{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":328824,"byte_end":328835,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":330040,"byte_end":330044,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2745}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":330277,"byte_end":330281,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2751}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":330616,"byte_end":330620,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2757}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":331201,"byte_end":331209,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2766},{"krate":0,"index":2767}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":336042,"byte_end":336047,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2781}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":336227,"byte_end":336232,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2785},{"krate":0,"index":2786}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":336720,"byte_end":336733,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2801}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":337653,"byte_end":337664,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":337686,"byte_end":337697,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":337838,"byte_end":337849,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":338316,"byte_end":338327,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2835},{"krate":0,"index":2836}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":338543,"byte_end":338554,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2839}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":338727,"byte_end":338736,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339721,"byte_end":339725,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2858}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339958,"byte_end":339962,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2864}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":340297,"byte_end":340301,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":340864,"byte_end":340872,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2880}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":341386,"byte_end":341393,"line_start":8,"line_end":8,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2895}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":342295,"byte_end":342302,"line_start":39,"line_end":39,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2901}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":342498,"byte_end":342505,"line_start":45,"line_end":45,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2907},{"krate":0,"index":2908}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":343201,"byte_end":343216,"line_start":75,"line_end":75,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2932}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":344107,"byte_end":344122,"line_start":111,"line_end":111,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2940},{"krate":0,"index":2941}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":344640,"byte_end":344653,"line_start":136,"line_end":136,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345381,"byte_end":345392,"line_start":167,"line_end":167,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2964}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":346233,"byte_end":346244,"line_start":196,"line_end":196,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":346525,"byte_end":346536,"line_start":208,"line_end":208,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2974},{"krate":0,"index":2975}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":347146,"byte_end":347165,"line_start":236,"line_end":236,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2996}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":348128,"byte_end":348147,"line_start":276,"line_end":276,"column_start":47,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3003},{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":349223,"byte_end":349240,"line_start":29,"line_end":29,"column_start":26,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":349282,"byte_end":349299,"line_start":31,"line_end":31,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3032}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":349401,"byte_end":349418,"line_start":37,"line_end":37,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":350032,"byte_end":350049,"line_start":64,"line_end":64,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3049},{"krate":0,"index":3050}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":350316,"byte_end":350333,"line_start":79,"line_end":79,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3056}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":350809,"byte_end":350824,"line_start":98,"line_end":98,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":3070},{"krate":0,"index":3071}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352164,"byte_end":352185,"line_start":26,"line_end":26,"column_start":22,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352219,"byte_end":352240,"line_start":28,"line_end":28,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3094}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352334,"byte_end":352355,"line_start":34,"line_end":34,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":3104}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352934,"byte_end":352955,"line_start":60,"line_end":60,"column_start":41,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3109},{"krate":0,"index":3110}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":353192,"byte_end":353213,"line_start":74,"line_end":74,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3115}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":353868,"byte_end":353887,"line_start":97,"line_end":97,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":357783,"byte_end":357788,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":3171},{"krate":0,"index":3174}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":358669,"byte_end":358678,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3188}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":359715,"byte_end":359727,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3206},{"krate":0,"index":3207},{"krate":0,"index":3208}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":360358,"byte_end":360364,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3227}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":361765,"byte_end":361771,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3245}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":362708,"byte_end":362721,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3264},{"krate":0,"index":3265}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":363984,"byte_end":363997,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3272},{"krate":0,"index":3273}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":364661,"byte_end":364672,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3288},{"krate":0,"index":3289},{"krate":0,"index":3290},{"krate":0,"index":3291}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":365413,"byte_end":365425,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3302}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":366509,"byte_end":366517,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3324}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367498,"byte_end":367504,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3336}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367664,"byte_end":367670,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3340}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367882,"byte_end":367888,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3344},{"krate":0,"index":3345},{"krate":0,"index":3347}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":368350,"byte_end":368356,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3353},{"krate":0,"index":3354}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":369097,"byte_end":369105,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3365},{"krate":0,"index":3366}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":369782,"byte_end":369796,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381},{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":371056,"byte_end":371070,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3396}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":371217,"byte_end":371231,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3407}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":371977,"byte_end":371991,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3413},{"krate":0,"index":3414}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":372512,"byte_end":372524,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3435},{"krate":0,"index":3436}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":373470,"byte_end":373479,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3446}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":374229,"byte_end":374238,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":374342,"byte_end":374351,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3454}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":375164,"byte_end":375173,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3463}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":375363,"byte_end":375372,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3467},{"krate":0,"index":3468}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":376002,"byte_end":376019,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3479},{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3484}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":376819,"byte_end":376836,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3489},{"krate":0,"index":3490}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":377239,"byte_end":377254,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3500},{"krate":0,"index":3501},{"krate":0,"index":3502},{"krate":0,"index":3508},{"krate":0,"index":3509}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378908,"byte_end":378911,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3518}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":379134,"byte_end":379137,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3522},{"krate":0,"index":3523},{"krate":0,"index":3525}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":379521,"byte_end":379524,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3529},{"krate":0,"index":3531},{"krate":0,"index":3532}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":380184,"byte_end":380193,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3543},{"krate":0,"index":3544}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":380814,"byte_end":380823,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3555},{"krate":0,"index":3556}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":381480,"byte_end":381491,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3566},{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3569},{"krate":0,"index":3570},{"krate":0,"index":3571}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382900,"byte_end":382905,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3578}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":383175,"byte_end":383180,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3582},{"krate":0,"index":3583},{"krate":0,"index":3585}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":383572,"byte_end":383577,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3589},{"krate":0,"index":3591},{"krate":0,"index":3592}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384674,"byte_end":384680,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3656}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384887,"byte_end":384893,"line_start":32,"line_end":32,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3662}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":385228,"byte_end":385234,"line_start":50,"line_end":50,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3665},{"krate":0,"index":3667},{"krate":0,"index":3668}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":385916,"byte_end":385924,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3678},{"krate":0,"index":3679}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":386605,"byte_end":386619,"line_start":108,"line_end":108,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692},{"krate":0,"index":3693}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31440,"byte_end":31441,"line_start":269,"line_end":269,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3709}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32949,"byte_end":32950,"line_start":316,"line_end":316,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3720}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91874,"byte_end":91875,"line_start":2076,"line_end":2076,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116656,"byte_end":116662,"line_start":2864,"line_end":2864,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6767},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4009}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116987,"byte_end":116993,"line_start":2881,"line_end":2881,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6768},{"krate":0,"index":4013},{"krate":0,"index":4014},{"krate":0,"index":4015},{"krate":0,"index":4016},{"krate":0,"index":4017}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388418,"byte_end":388424,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388597,"byte_end":388605,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4031},{"krate":0,"index":4032},{"krate":0,"index":4034}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388900,"byte_end":388908,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4037},{"krate":0,"index":4039},{"krate":0,"index":4040}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390065,"byte_end":390069,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4045}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":391545,"byte_end":391559,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065},{"krate":0,"index":4066}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":392171,"byte_end":392177,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4070}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":395015,"byte_end":395020,"line_start":51,"line_end":51,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4096},{"krate":0,"index":4097},{"krate":0,"index":4098}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":395297,"byte_end":395309,"line_start":67,"line_end":67,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4104},{"krate":0,"index":4105},{"krate":0,"index":4106}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":400864,"byte_end":400868,"line_start":249,"line_end":249,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4114},{"krate":0,"index":4115},{"krate":0,"index":4117}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":401175,"byte_end":401179,"line_start":264,"line_end":264,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4119},{"krate":0,"index":4121},{"krate":0,"index":4122}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405761,"byte_end":405765,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4131}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":406633,"byte_end":406647,"line_start":74,"line_end":74,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4134},{"krate":0,"index":4135},{"krate":0,"index":4136}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":409960,"byte_end":409964,"line_start":187,"line_end":187,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4142},{"krate":0,"index":4143},{"krate":0,"index":4145}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":410344,"byte_end":410348,"line_start":203,"line_end":203,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4147},{"krate":0,"index":4149},{"krate":0,"index":4150}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413423,"byte_end":413429,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4160},{"krate":0,"index":4161},{"krate":0,"index":4162}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413863,"byte_end":413867,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4166}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":415120,"byte_end":415126,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4185}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":452502,"byte_end":452512,"line_start":32,"line_end":32,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4211}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":455462,"byte_end":455468,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4220}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":455717,"byte_end":455730,"line_start":114,"line_end":114,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4227}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":459456,"byte_end":459465,"line_start":217,"line_end":217,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4238}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":470907,"byte_end":470912,"line_start":521,"line_end":521,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4262}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/quicksort.rs","byte_start":480083,"byte_end":480094,"line_start":21,"line_end":21,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4284}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/quicksort.rs","byte_start":480324,"byte_end":480330,"line_start":34,"line_end":34,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4290}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/quicksort.rs","byte_start":480537,"byte_end":480547,"line_start":46,"line_end":46,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4297}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":433770,"byte_end":433774,"line_start":506,"line_end":506,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4430}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":433901,"byte_end":433905,"line_start":512,"line_end":512,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4434},{"krate":0,"index":4435},{"krate":0,"index":4437}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":434231,"byte_end":434235,"line_start":527,"line_end":527,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4441},{"krate":0,"index":4443},{"krate":0,"index":4444}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":434738,"byte_end":434750,"line_start":551,"line_end":551,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4453},{"krate":0,"index":4454},{"krate":0,"index":4455},{"krate":0,"index":4456}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435309,"byte_end":435315,"line_start":572,"line_end":572,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4460}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435444,"byte_end":435450,"line_start":578,"line_end":578,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4464},{"krate":0,"index":4465},{"krate":0,"index":4467}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435778,"byte_end":435784,"line_start":593,"line_end":593,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4471},{"krate":0,"index":4473},{"krate":0,"index":4474}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":436407,"byte_end":436421,"line_start":621,"line_end":621,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4484},{"krate":0,"index":4485},{"krate":0,"index":4486},{"krate":0,"index":4487}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437287,"byte_end":437298,"line_start":653,"line_end":653,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4491}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437585,"byte_end":437596,"line_start":662,"line_end":662,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4495}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437730,"byte_end":437741,"line_start":668,"line_end":668,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4499},{"krate":0,"index":4500},{"krate":0,"index":4502}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":438069,"byte_end":438080,"line_start":683,"line_end":683,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4506},{"krate":0,"index":4508},{"krate":0,"index":4509}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":438700,"byte_end":438719,"line_start":711,"line_end":711,"column_start":43,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4519},{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4522}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":439561,"byte_end":439568,"line_start":742,"line_end":742,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4526}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":439698,"byte_end":439705,"line_start":748,"line_end":748,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4530},{"krate":0,"index":4531},{"krate":0,"index":4533}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":440033,"byte_end":440040,"line_start":763,"line_end":763,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4537},{"krate":0,"index":4539},{"krate":0,"index":4540}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":440714,"byte_end":440729,"line_start":792,"line_end":792,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4550},{"krate":0,"index":4551},{"krate":0,"index":4552},{"krate":0,"index":4553}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":441604,"byte_end":441611,"line_start":823,"line_end":823,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4560}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":441941,"byte_end":441948,"line_start":838,"line_end":838,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4564},{"krate":0,"index":4566},{"krate":0,"index":4567}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":442461,"byte_end":442476,"line_start":862,"line_end":862,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4576},{"krate":0,"index":4577},{"krate":0,"index":4578},{"krate":0,"index":4579}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":443115,"byte_end":443124,"line_start":886,"line_end":886,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4583},{"krate":0,"index":4584},{"krate":0,"index":4586}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":443456,"byte_end":443465,"line_start":901,"line_end":901,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4590},{"krate":0,"index":4592},{"krate":0,"index":4593}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":444098,"byte_end":444115,"line_start":929,"line_end":929,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4603},{"krate":0,"index":4604},{"krate":0,"index":4605},{"krate":0,"index":4606}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445011,"byte_end":445025,"line_start":961,"line_end":961,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4610},{"krate":0,"index":4611},{"krate":0,"index":4612}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446440,"byte_end":446454,"line_start":993,"line_end":993,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4616},{"krate":0,"index":4617},{"krate":0,"index":4619}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446786,"byte_end":446800,"line_start":1008,"line_end":1008,"column_start":58,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":4623},{"krate":0,"index":4625},{"krate":0,"index":4626}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":447430,"byte_end":447452,"line_start":1036,"line_end":1036,"column_start":43,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4636},{"krate":0,"index":4637},{"krate":0,"index":4638},{"krate":0,"index":4639}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448282,"byte_end":448287,"line_start":1066,"line_end":1066,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4650}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448470,"byte_end":448475,"line_start":1075,"line_end":1075,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4655}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448671,"byte_end":448676,"line_start":1081,"line_end":1081,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4660},{"krate":0,"index":4661}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":450163,"byte_end":450171,"line_start":1142,"line_end":1142,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4684}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":450396,"byte_end":450404,"line_start":1150,"line_end":1150,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4689},{"krate":0,"index":4690}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":523459,"byte_end":523461,"line_start":350,"line_end":350,"column_start":54,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":7281},{"krate":0,"index":4763},{"krate":0,"index":4764},{"krate":0,"index":4765},{"krate":0,"index":4766},{"krate":0,"index":4769},{"krate":0,"index":4772}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":524704,"byte_end":524709,"line_start":403,"line_end":403,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4780},{"krate":0,"index":4781}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":524969,"byte_end":524982,"line_start":414,"line_end":414,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4785},{"krate":0,"index":4786},{"krate":0,"index":4787}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":525781,"byte_end":525792,"line_start":448,"line_end":448,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4795},{"krate":0,"index":4796}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":526143,"byte_end":526162,"line_start":463,"line_end":463,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4800},{"krate":0,"index":4801},{"krate":0,"index":4802}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":527134,"byte_end":527139,"line_start":503,"line_end":503,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4809},{"krate":0,"index":4810}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":527397,"byte_end":527410,"line_start":514,"line_end":514,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4814},{"krate":0,"index":4815},{"krate":0,"index":4816}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":528167,"byte_end":528178,"line_start":547,"line_end":547,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4823},{"krate":0,"index":4824}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":528443,"byte_end":528462,"line_start":558,"line_end":558,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4828},{"krate":0,"index":4829},{"krate":0,"index":4830}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":529203,"byte_end":529208,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4835}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":529358,"byte_end":529363,"line_start":594,"line_end":594,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4839},{"krate":0,"index":4840}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531016,"byte_end":531031,"line_start":654,"line_end":654,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4861}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531185,"byte_end":531208,"line_start":660,"line_end":660,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4866}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531516,"byte_end":531531,"line_start":669,"line_end":669,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4870},{"krate":0,"index":4871}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531879,"byte_end":531902,"line_start":681,"line_end":681,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":4877},{"krate":0,"index":4878},{"krate":0,"index":4880}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":532866,"byte_end":532871,"line_start":721,"line_end":721,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4885},{"krate":0,"index":4886}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":533465,"byte_end":533480,"line_start":746,"line_end":746,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4891},{"krate":0,"index":4892}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":534145,"byte_end":534152,"line_start":774,"line_end":774,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4903},{"krate":0,"index":4904}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":534529,"byte_end":534544,"line_start":789,"line_end":789,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":4910},{"krate":0,"index":4911},{"krate":0,"index":4912}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":535581,"byte_end":535593,"line_start":831,"line_end":831,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4924},{"krate":0,"index":4925}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":536006,"byte_end":536026,"line_start":847,"line_end":847,"column_start":51,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4931},{"krate":0,"index":4932},{"krate":0,"index":4933}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537202,"byte_end":537205,"line_start":17,"line_end":17,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4940},{"krate":0,"index":4941},{"krate":0,"index":4942}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537378,"byte_end":537386,"line_start":26,"line_end":26,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4945},{"krate":0,"index":4946},{"krate":0,"index":4948}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537683,"byte_end":537691,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4951},{"krate":0,"index":4953},{"krate":0,"index":4954}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":538806,"byte_end":538817,"line_start":79,"line_end":79,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4963},{"krate":0,"index":4964},{"krate":0,"index":4965},{"krate":0,"index":4966}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":539481,"byte_end":539492,"line_start":99,"line_end":99,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4970}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":539854,"byte_end":539864,"line_start":114,"line_end":114,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4978},{"krate":0,"index":4979},{"krate":0,"index":4980}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":540186,"byte_end":540196,"line_start":128,"line_end":128,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4984}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":540401,"byte_end":540411,"line_start":135,"line_end":135,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4988}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":540517,"byte_end":540527,"line_start":141,"line_end":141,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4992}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/par_either.rs","byte_start":541596,"byte_end":541602,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5004},{"krate":0,"index":5005},{"krate":0,"index":5007}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/par_either.rs","byte_start":542122,"byte_end":542128,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5011},{"krate":0,"index":5013},{"krate":0,"index":5014}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/par_either.rs","byte_start":542922,"byte_end":542928,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5020}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":3984,"byte_end":3995,"line_start":94,"line_end":94,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":46}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":12526,"byte_end":12537,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":12547,"byte_end":12556,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":62}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":12566,"byte_end":12575,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":72}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":12585,"byte_end":12593,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":81}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":12603,"byte_end":12611,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":12621,"byte_end":12632,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":106}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/mod.rs","byte_start":12642,"byte_end":12651,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":115}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4005,"byte_end":4009,"line_start":95,"line_end":95,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":137}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":26527,"byte_end":26535,"line_start":89,"line_end":89,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":148}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4019,"byte_end":4025,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4018}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4035,"byte_end":4042,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4076}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4052,"byte_end":4057,"line_start":98,"line_end":98,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4088}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4067,"byte_end":4082,"line_start":99,"line_end":99,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":4124}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4092,"byte_end":4098,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4152}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4108,"byte_end":4113,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4192}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4123,"byte_end":4126,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4703}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/lib.rs","byte_start":4136,"byte_end":4139,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4935}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/split_producer.rs","byte_start":8074,"byte_end":8079,"line_start":17,"line_end":17,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/split_producer.rs","byte_start":8505,"byte_end":8518,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/split_producer.rs","byte_start":9986,"byte_end":9999,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":15},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":13133,"byte_end":13143,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":415},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/binary_heap.rs","byte_start":13600,"byte_end":13604,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":5075},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_map.rs","byte_start":14804,"byte_end":14808,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":5127},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/btree_set.rs","byte_start":16319,"byte_end":16323,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":5197},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_map.rs","byte_start":17587,"byte_end":17591,"line_start":35,"line_end":35,"column_start":50,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":5242},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/hash_set.rs","byte_start":19237,"byte_end":19241,"line_start":35,"line_end":35,"column_start":41,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":5315},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/linked_list.rs","byte_start":20347,"byte_end":20351,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":5359},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/collections/vec_deque.rs","byte_start":21760,"byte_end":21764,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":5431},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120030,"byte_end":120034,"line_start":59,"line_end":59,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":120037,"byte_end":120042,"line_start":59,"line_end":59,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123044,"byte_end":123048,"line_start":128,"line_end":128,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":123051,"byte_end":123056,"line_start":128,"line_end":128,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":124364,"byte_end":124369,"line_start":159,"line_end":159,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":126384,"byte_end":126392,"line_start":213,"line_end":213,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":167},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127497,"byte_end":127501,"line_start":236,"line_end":236,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":127504,"byte_end":127509,"line_start":236,"line_end":236,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":128497,"byte_end":128505,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":5477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":129634,"byte_end":129648,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":5482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/plumbing/mod.rs","byte_start":132007,"byte_end":132015,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":204},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136728,"byte_end":136733,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":5488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":136962,"byte_end":136967,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5488},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":138070,"byte_end":138075,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5488},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":139010,"byte_end":139019,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":259},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":139697,"byte_end":139706,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":271},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":140375,"byte_end":140388,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":140571,"byte_end":140584,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":283},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142196,"byte_end":142204,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142418,"byte_end":142426,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":304},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142722,"byte_end":142730,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":304},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chain.rs","byte_start":142851,"byte_end":142859,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":304},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143629,"byte_end":143635,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":143835,"byte_end":143841,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5501},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":144174,"byte_end":144180,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5501},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":144878,"byte_end":144886,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":346},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":145459,"byte_end":145472,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":357},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":146591,"byte_end":146599,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":147277,"byte_end":147285,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/chunks.rs","byte_start":147446,"byte_end":147454,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148585,"byte_end":148591,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":5511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":148779,"byte_end":148785,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5511},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":149233,"byte_end":149239,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5511},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":149884,"byte_end":149892,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":410},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":150449,"byte_end":150463,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":420},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":151359,"byte_end":151373,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":151485,"byte_end":151499,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":435},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":152147,"byte_end":152161,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":435},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/cloned.rs","byte_start":152481,"byte_end":152493,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":457},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":159988,"byte_end":160003,"line_start":20,"line_end":20,"column_start":24,"column_end":39},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":160644,"byte_end":160657,"line_start":39,"line_end":39,"column_start":29,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":160695,"byte_end":160708,"line_start":41,"line_end":41,"column_start":13,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":161054,"byte_end":161067,"line_start":55,"line_end":55,"column_start":22,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":161374,"byte_end":161389,"line_start":65,"line_end":65,"column_start":40,"column_end":55},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":482},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":162468,"byte_end":162481,"line_start":101,"line_end":101,"column_start":38,"column_end":51},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":486},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":163391,"byte_end":163406,"line_start":132,"line_end":132,"column_start":49,"column_end":64},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":482},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/consumer.rs","byte_start":163795,"byte_end":163809,"line_start":145,"line_end":145,"column_start":47,"column_end":61},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":534},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/mod.rs","byte_start":155448,"byte_end":155455,"line_start":74,"line_end":74,"column_start":24,"column_end":31},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/collect/mod.rs","byte_start":158444,"byte_end":158447,"line_start":144,"line_end":144,"column_start":31,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178771,"byte_end":178777,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":178965,"byte_end":178971,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5520},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":179418,"byte_end":179424,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":5520},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":180068,"byte_end":180076,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":597},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":180632,"byte_end":180646,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":607},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":181615,"byte_end":181629,"line_start":143,"line_end":143,"column_start":9,"column_end":23},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":181741,"byte_end":181755,"line_start":149,"line_end":149,"column_start":36,"column_end":50},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":622},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":182402,"byte_end":182416,"line_start":178,"line_end":178,"column_start":45,"column_end":59},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":622},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/copied.rs","byte_start":182735,"byte_end":182747,"line_start":196,"line_end":196,"column_start":34,"column_end":46},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184103,"byte_end":184108,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":664},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184198,"byte_end":184203,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":664},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184339,"byte_end":184344,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":664},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":184630,"byte_end":184635,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":664},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/empty.rs","byte_start":185115,"byte_end":185128,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":686},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":186108,"byte_end":186117,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":5529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":186311,"byte_end":186320,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":5529},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":186664,"byte_end":186673,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":5529},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":187179,"byte_end":187187,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":720},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/enumerate.rs","byte_start":187771,"byte_end":187788,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":729},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":190777,"byte_end":190787,"line_start":64,"line_end":64,"column_start":31,"column_end":41},"kind":{"Impl":{"id":99}},"from":{"krate":5,"index":415},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":191085,"byte_end":191095,"line_start":77,"line_end":77,"column_start":39,"column_end":49},"kind":{"Impl":{"id":100}},"from":{"krate":5,"index":415},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":191408,"byte_end":191416,"line_start":90,"line_end":90,"column_start":39,"column_end":47},"kind":{"Impl":{"id":101}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":191752,"byte_end":191760,"line_start":104,"line_end":104,"column_start":59,"column_end":67},"kind":{"Impl":{"id":102}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":192097,"byte_end":192105,"line_start":118,"line_end":118,"column_start":31,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":5,"index":4559},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":192400,"byte_end":192408,"line_start":131,"line_end":131,"column_start":39,"column_end":47},"kind":{"Impl":{"id":104}},"from":{"krate":5,"index":4559},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":192879,"byte_end":192886,"line_start":152,"line_end":152,"column_start":42,"column_end":49},"kind":{"Impl":{"id":105}},"from":{"krate":1,"index":6207},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":193342,"byte_end":193349,"line_start":168,"line_end":168,"column_start":62,"column_end":69},"kind":{"Impl":{"id":106}},"from":{"krate":1,"index":6207},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":193877,"byte_end":193884,"line_start":191,"line_end":191,"column_start":34,"column_end":41},"kind":{"Impl":{"id":107}},"from":{"krate":1,"index":6233},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":194217,"byte_end":194224,"line_start":205,"line_end":205,"column_start":42,"column_end":49},"kind":{"Impl":{"id":108}},"from":{"krate":1,"index":6233},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":194677,"byte_end":194687,"line_start":224,"line_end":224,"column_start":31,"column_end":41},"kind":{"Impl":{"id":109}},"from":{"krate":5,"index":2003},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":195128,"byte_end":195138,"line_start":241,"line_end":241,"column_start":39,"column_end":49},"kind":{"Impl":{"id":110}},"from":{"krate":5,"index":2003},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":195543,"byte_end":195549,"line_start":259,"line_end":259,"column_start":31,"column_end":37},"kind":{"Impl":{"id":111}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":196205,"byte_end":196211,"line_start":278,"line_end":278,"column_start":39,"column_end":45},"kind":{"Impl":{"id":112}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":196679,"byte_end":196685,"line_start":293,"line_end":293,"column_start":38,"column_end":44},"kind":{"Impl":{"id":113}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":196947,"byte_end":196953,"line_start":303,"line_end":303,"column_start":33,"column_end":39},"kind":{"Impl":{"id":114}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":197230,"byte_end":197236,"line_start":313,"line_end":313,"column_start":43,"column_end":49},"kind":{"Impl":{"id":115}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":197608,"byte_end":197616,"line_start":327,"line_end":327,"column_start":31,"column_end":39},"kind":{"Impl":{"id":116}},"from":{"krate":5,"index":2419},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":197903,"byte_end":197911,"line_start":340,"line_end":340,"column_start":39,"column_end":47},"kind":{"Impl":{"id":117}},"from":{"krate":5,"index":2419},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/extend.rs","byte_start":198324,"byte_end":198327,"line_start":356,"line_end":356,"column_start":39,"column_end":42},"kind":{"Impl":{"id":118}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199382,"byte_end":199388,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":5538},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199548,"byte_end":199554,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":5538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":199766,"byte_end":199772,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":5538},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":200316,"byte_end":200330,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":200481,"byte_end":200495,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":914},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":201239,"byte_end":201253,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":914},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter.rs","byte_start":201636,"byte_end":201648,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":943},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":202924,"byte_end":202933,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":5547},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":203140,"byte_end":203149,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":5547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":203339,"byte_end":203348,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":5547},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":203911,"byte_end":203928,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":204081,"byte_end":204098,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":979},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":204884,"byte_end":204901,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":979},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/filter_map.rs","byte_start":205302,"byte_end":205317,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1010},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":206487,"byte_end":206499,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":206653,"byte_end":206665,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1035},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":207250,"byte_end":207262,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1035},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":207622,"byte_end":207632,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1060},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find.rs","byte_start":208659,"byte_end":208670,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1081},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":211192,"byte_end":211204,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":211754,"byte_end":211766,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1100},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":212832,"byte_end":212844,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1100},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":214402,"byte_end":214412,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1129},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/find_first_last/mod.rs","byte_start":216120,"byte_end":216131,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1146},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":216943,"byte_end":216950,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":5564},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":217129,"byte_end":217136,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5564},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":217317,"byte_end":217324,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":5564},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":217935,"byte_end":217950,"line_start":59,"line_end":59,"column_start":16,"column_end":31},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1172},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":218095,"byte_end":218110,"line_start":65,"line_end":65,"column_start":38,"column_end":53},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1172},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":218902,"byte_end":218917,"line_start":97,"line_end":97,"column_start":47,"column_end":62},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1172},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flat_map.rs","byte_start":219357,"byte_end":219370,"line_start":118,"line_end":118,"column_start":36,"column_end":49},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1203},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":220942,"byte_end":220949,"line_start":16,"line_end":16,"column_start":13,"column_end":20},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/flatten.rs","byte_start":221184,"byte_end":221191,"line_start":27,"line_end":27,"column_start":34,"column_end":41},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5573},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":221627,"byte_end":221631,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222428,"byte_end":222432,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5582},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":222622,"byte_end":222626,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5582},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":223235,"byte_end":223247,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1261},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":224103,"byte_end":224115,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1261},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":224584,"byte_end":224594,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1291},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":225754,"byte_end":225762,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":5594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226551,"byte_end":226559,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":5594},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":226813,"byte_end":226821,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":5594},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":227389,"byte_end":227405,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1334},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/fold.rs","byte_start":228323,"byte_end":228339,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1334},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/for_each.rs","byte_start":229068,"byte_end":229083,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1370},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/for_each.rs","byte_start":229479,"byte_end":229494,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1370},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/for_each.rs","byte_start":229918,"byte_end":229933,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1370},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":230819,"byte_end":230822,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"kind":{"Impl":{"id":166}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":231092,"byte_end":231100,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"kind":{"Impl":{"id":167}},"from":{"krate":5,"index":2419},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":231457,"byte_end":231467,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"kind":{"Impl":{"id":168}},"from":{"krate":5,"index":415},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":231777,"byte_end":231787,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"kind":{"Impl":{"id":169}},"from":{"krate":5,"index":2003},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":232251,"byte_end":232258,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"kind":{"Impl":{"id":170}},"from":{"krate":1,"index":6207},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":232793,"byte_end":232801,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"kind":{"Impl":{"id":171}},"from":{"krate":5,"index":671},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233101,"byte_end":233108,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"kind":{"Impl":{"id":172}},"from":{"krate":1,"index":6233},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233431,"byte_end":233439,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"kind":{"Impl":{"id":173}},"from":{"krate":5,"index":4559},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233718,"byte_end":233724,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"kind":{"Impl":{"id":174}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":233986,"byte_end":233992,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"kind":{"Impl":{"id":175}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":234260,"byte_end":234266,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"kind":{"Impl":{"id":176}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":234530,"byte_end":234536,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"kind":{"Impl":{"id":177}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":234807,"byte_end":234813,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"kind":{"Impl":{"id":178}},"from":{"krate":5,"index":4732},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/from_par_iter.rs","byte_start":235257,"byte_end":235260,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"kind":{"Impl":{"id":179}},"from":{"krate":5,"index":326},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236794,"byte_end":236801,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":5606},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":236962,"byte_end":236969,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":5606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":237185,"byte_end":237192,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5606},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":237652,"byte_end":237659,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":5606},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":238401,"byte_end":238409,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1516},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":239080,"byte_end":239095,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1528},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":240305,"byte_end":240320,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":240470,"byte_end":240485,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1546},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":241228,"byte_end":241243,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1546},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/inspect.rs","byte_start":241622,"byte_end":241635,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1575},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":242959,"byte_end":242969,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":5615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":243221,"byte_end":243231,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5615},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":243608,"byte_end":243618,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5615},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":244514,"byte_end":244523,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1616},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":245333,"byte_end":245342,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1630},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":246123,"byte_end":246141,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":246461,"byte_end":246479,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1644},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":249344,"byte_end":249357,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1666},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":250490,"byte_end":250503,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1666},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave.rs","byte_start":251064,"byte_end":251077,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1666},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":252004,"byte_end":252022,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":5628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":252664,"byte_end":252682,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":5628},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/interleave_shortest.rs","byte_start":253059,"byte_end":253077,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":5628},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":254179,"byte_end":254190,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":5640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":254421,"byte_end":254432,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":5640},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":254962,"byte_end":254973,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":5640},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":255880,"byte_end":255888,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1731},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":256455,"byte_end":256474,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":256715,"byte_end":256734,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1743},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":258909,"byte_end":258924,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":259696,"byte_end":259711,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":260359,"byte_end":260374,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":260722,"byte_end":260741,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":260966,"byte_end":260985,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1779},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":262063,"byte_end":262082,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1779},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/intersperse.rs","byte_start":262622,"byte_end":262639,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1803},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264362,"byte_end":264368,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264573,"byte_end":264579,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":5650},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":264914,"byte_end":264920,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":5650},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":265498,"byte_end":265506,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1839},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":266141,"byte_end":266155,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1849},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267447,"byte_end":267453,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267658,"byte_end":267664,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":5660},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":267999,"byte_end":268005,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":5660},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":268583,"byte_end":268591,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1879},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/len.rs","byte_start":269226,"byte_end":269240,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1889},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270607,"byte_end":270610,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":5670},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270767,"byte_end":270770,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":5670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":270973,"byte_end":270976,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":5670},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":271450,"byte_end":271453,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":5670},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":272195,"byte_end":272203,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1935},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":272882,"byte_end":272893,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1948},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":274065,"byte_end":274076,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1967},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":274217,"byte_end":274228,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1967},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":274967,"byte_end":274978,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1967},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map.rs","byte_start":275369,"byte_end":275378,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1998},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276615,"byte_end":276622,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":5679},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":276854,"byte_end":276861,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":5679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":277093,"byte_end":277100,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":5679},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":277616,"byte_end":277623,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":5679},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":278468,"byte_end":278476,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2051},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":279259,"byte_end":279274,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":280607,"byte_end":280618,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2089},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":280999,"byte_end":281010,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2089},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":281301,"byte_end":281312,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2089},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":281626,"byte_end":281641,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":281807,"byte_end":281822,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2119},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":282666,"byte_end":282681,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2119},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":283141,"byte_end":283154,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2155},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284685,"byte_end":284692,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":5691},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":284865,"byte_end":284872,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":5691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":285116,"byte_end":285123,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":5691},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":285663,"byte_end":285670,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":5691},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":286545,"byte_end":286553,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2215},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":287363,"byte_end":287378,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":2232},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":288828,"byte_end":288843,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":2255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":289025,"byte_end":289040,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":2255},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/map_with.rs","byte_start":289896,"byte_end":289911,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":2255},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":299289,"byte_end":299301,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2302},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":299645,"byte_end":299657,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":2302},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":300013,"byte_end":300025,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2302},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/noop.rs","byte_start":300219,"byte_end":300230,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":2324},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":301198,"byte_end":301202,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":6582},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/once.rs","byte_start":301488,"byte_end":301492,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":6582},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302679,"byte_end":302683,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":6600},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302841,"byte_end":302845,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":6600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":302955,"byte_end":302964,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":6591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":303159,"byte_end":303168,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":6591},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":303678,"byte_end":303687,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":6591},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":304387,"byte_end":304395,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2375},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":305104,"byte_end":305121,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2384},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":306219,"byte_end":306232,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2400},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":306579,"byte_end":306592,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2400},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":306843,"byte_end":306856,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2400},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":307167,"byte_end":307184,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2419},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":308142,"byte_end":308159,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2419},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":308638,"byte_end":308653,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":2440},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/panic_fuse.rs","byte_start":309502,"byte_end":309518,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":2460},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311262,"byte_end":311267,"line_start":46,"line_end":46,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":2490}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311427,"byte_end":311428,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":2493},"to":{"krate":0,"index":2490}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":311938,"byte_end":311948,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":6607},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":312946,"byte_end":312966,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2500},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/par_bridge.rs","byte_start":313258,"byte_end":313278,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2500},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317086,"byte_end":317101,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2530},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317123,"byte_end":317138,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317287,"byte_end":317302,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2530},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":317852,"byte_end":317867,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":2530},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":318099,"byte_end":318114,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":2530},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/product.rs","byte_start":318299,"byte_end":318312,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":2555},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":319327,"byte_end":319341,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":2575},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":319383,"byte_end":319397,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":2575},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":319499,"byte_end":319513,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2575},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":320040,"byte_end":320054,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":2575},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":320303,"byte_end":320317,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2575},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/reduce.rs","byte_start":320558,"byte_end":320570,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2614},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":321972,"byte_end":321978,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":6616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":322830,"byte_end":322836,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":6616},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":323286,"byte_end":323300,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2647},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324351,"byte_end":324358,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":6625},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":324676,"byte_end":324683,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":6625},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":325295,"byte_end":325310,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":2671},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":326107,"byte_end":326111,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":2681},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":326489,"byte_end":326493,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":2681},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/repeat.rs","byte_start":326622,"byte_end":326626,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":2681},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327205,"byte_end":327208,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":6635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327390,"byte_end":327393,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":6635},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":327728,"byte_end":327731,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":6635},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":328301,"byte_end":328309,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":2716},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/rev.rs","byte_start":328824,"byte_end":328835,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":2726},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":330040,"byte_end":330044,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":6644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":330277,"byte_end":330281,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":6644},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":330616,"byte_end":330620,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":6644},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/skip.rs","byte_start":331201,"byte_end":331209,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":2759},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":336042,"byte_end":336047,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":6654},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":336227,"byte_end":336232,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":6654},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/splitter.rs","byte_start":336720,"byte_end":336733,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":2788},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":337653,"byte_end":337664,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":2815},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":337686,"byte_end":337697,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":337838,"byte_end":337849,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2815},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":338316,"byte_end":338327,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2815},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":338543,"byte_end":338554,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2815},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/sum.rs","byte_start":338727,"byte_end":338736,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2840},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339721,"byte_end":339725,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":6663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":339958,"byte_end":339962,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":6663},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":340297,"byte_end":340301,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":6663},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/take.rs","byte_start":340864,"byte_end":340872,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":2872},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":341386,"byte_end":341393,"line_start":8,"line_end":8,"column_start":19,"column_end":26},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":6673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":342295,"byte_end":342302,"line_start":39,"line_end":39,"column_start":55,"column_end":62},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":6673},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":342498,"byte_end":342505,"line_start":45,"line_end":45,"column_start":40,"column_end":47},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":6673},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":343201,"byte_end":343216,"line_start":75,"line_end":75,"column_start":42,"column_end":57},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":2910},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":344107,"byte_end":344122,"line_start":111,"line_end":111,"column_start":51,"column_end":66},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":2910},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":344640,"byte_end":344653,"line_start":136,"line_end":136,"column_start":36,"column_end":49},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":2942},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":345381,"byte_end":345392,"line_start":167,"line_end":167,"column_start":15,"column_end":26},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":6688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":346233,"byte_end":346244,"line_start":196,"line_end":196,"column_start":56,"column_end":67},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":6688},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":346525,"byte_end":346536,"line_start":208,"line_end":208,"column_start":36,"column_end":47},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":6688},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":347146,"byte_end":347165,"line_start":236,"line_end":236,"column_start":38,"column_end":57},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":2977},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_fold.rs","byte_start":348128,"byte_end":348147,"line_start":276,"line_end":276,"column_start":47,"column_end":66},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":2977},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":349223,"byte_end":349240,"line_start":29,"line_end":29,"column_start":26,"column_end":43},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":3017},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":349282,"byte_end":349299,"line_start":31,"line_end":31,"column_start":27,"column_end":44},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":3017},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":349401,"byte_end":349418,"line_start":37,"line_end":37,"column_start":36,"column_end":53},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":350032,"byte_end":350049,"line_start":64,"line_end":64,"column_start":45,"column_end":62},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":350316,"byte_end":350333,"line_start":79,"line_end":79,"column_start":35,"column_end":52},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce.rs","byte_start":350809,"byte_end":350824,"line_start":98,"line_end":98,"column_start":30,"column_end":45},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":3057},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352164,"byte_end":352185,"line_start":26,"line_end":26,"column_start":22,"column_end":43},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":3083},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352219,"byte_end":352240,"line_start":28,"line_end":28,"column_start":23,"column_end":44},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":3083},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352334,"byte_end":352355,"line_start":34,"line_end":34,"column_start":32,"column_end":53},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":352934,"byte_end":352955,"line_start":60,"line_end":60,"column_start":41,"column_end":62},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":353192,"byte_end":353213,"line_start":74,"line_end":74,"column_start":39,"column_end":60},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/try_reduce_with.rs","byte_start":353868,"byte_end":353887,"line_start":97,"line_end":97,"column_start":30,"column_end":49},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":3116},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":355095,"byte_end":355099,"line_start":7,"line_end":7,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":355102,"byte_end":355106,"line_start":7,"line_end":7,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":357783,"byte_end":357788,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":358669,"byte_end":358678,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":359715,"byte_end":359727,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":3198},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":360358,"byte_end":360364,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":3211},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":361765,"byte_end":361771,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":3228},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":362708,"byte_end":362721,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":3246},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":363984,"byte_end":363997,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":3246},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":364661,"byte_end":364672,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":3274},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":365413,"byte_end":365425,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":3292},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/unzip.rs","byte_start":366509,"byte_end":366517,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":3317},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367498,"byte_end":367504,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":6700},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367664,"byte_end":367670,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":6700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":367882,"byte_end":367888,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":6700},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":368350,"byte_end":368356,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":6700},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":369097,"byte_end":369105,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":369782,"byte_end":369796,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":3368},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":371056,"byte_end":371070,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":3386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":371217,"byte_end":371231,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":3386},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":371977,"byte_end":371991,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":3386},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":372512,"byte_end":372524,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":3415},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":373470,"byte_end":373479,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":6709},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":374229,"byte_end":374238,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":6709},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/update.rs","byte_start":374342,"byte_end":374351,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":6709},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":375164,"byte_end":375173,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":6722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":375363,"byte_end":375372,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":6722},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":376002,"byte_end":376019,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":3470},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":376819,"byte_end":376836,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":3470},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/while_some.rs","byte_start":377239,"byte_end":377254,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":3491},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":378908,"byte_end":378911,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":6731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":379134,"byte_end":379137,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":6731},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":379521,"byte_end":379524,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":6731},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":380184,"byte_end":380193,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":3534},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":380814,"byte_end":380823,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip.rs","byte_start":381480,"byte_end":381491,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":3558},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":382900,"byte_end":382905,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":6744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":383175,"byte_end":383180,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":6744},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/zip_eq.rs","byte_start":383572,"byte_end":383577,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":6744},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384674,"byte_end":384680,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":6756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":384887,"byte_end":384893,"line_start":32,"line_end":32,"column_start":30,"column_end":36},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":6756},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":385228,"byte_end":385234,"line_start":50,"line_end":50,"column_start":37,"column_end":43},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":6756},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":385916,"byte_end":385924,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":3670},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/step_by.rs","byte_start":386605,"byte_end":386619,"line_start":108,"line_end":108,"column_start":22,"column_end":36},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":3681},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":31440,"byte_end":31441,"line_start":269,"line_end":269,"column_start":67,"column_end":68},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":3706},"to":{"krate":0,"index":3699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":32949,"byte_end":32950,"line_start":316,"line_end":316,"column_start":70,"column_end":71},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":3717},"to":{"krate":0,"index":3710}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33839,"byte_end":33844,"line_start":342,"line_end":342,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":33847,"byte_end":33851,"line_start":342,"line_end":342,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":91874,"byte_end":91875,"line_start":2076,"line_end":2076,"column_start":52,"column_end":53},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":3921},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":92242,"byte_end":92258,"line_start":2090,"line_end":2090,"column_start":36,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":3721},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116656,"byte_end":116662,"line_start":2864,"line_end":2864,"column_start":21,"column_end":27},"kind":{"Impl":{"id":393}},"from":{"krate":2,"index":29311},"to":{"krate":0,"index":3997}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/iter/mod.rs","byte_start":116987,"byte_end":116993,"line_start":2881,"line_end":2881,"column_start":24,"column_end":30},"kind":{"Impl":{"id":394}},"from":{"krate":2,"index":29432},"to":{"krate":0,"index":3997}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388418,"byte_end":388424,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"kind":{"Impl":{"id":395}},"from":{"krate":2,"index":29311},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388597,"byte_end":388605,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":6769},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":388900,"byte_end":388908,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":6769},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":390065,"byte_end":390069,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":6778},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":391545,"byte_end":391559,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":4058},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/option.rs","byte_start":392171,"byte_end":392177,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"kind":{"Impl":{"id":404}},"from":{"krate":2,"index":29311},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":395015,"byte_end":395020,"line_start":51,"line_end":51,"column_start":34,"column_end":39},"kind":{"Impl":{"id":405}},"from":{"krate":2,"index":27897},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":395297,"byte_end":395309,"line_start":67,"line_end":67,"column_start":26,"column_end":38},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":4099},"to":{"krate":2,"index":4680}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":400864,"byte_end":400868,"line_start":249,"line_end":249,"column_start":27,"column_end":31},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":6824},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range.rs","byte_start":401175,"byte_end":401179,"line_start":264,"line_end":264,"column_start":34,"column_end":38},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":6824},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":405761,"byte_end":405765,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":7027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":406633,"byte_end":406647,"line_start":74,"line_end":74,"column_start":34,"column_end":48},"kind":{"Impl":{"id":410}},"from":{"krate":2,"index":27963},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":409960,"byte_end":409964,"line_start":187,"line_end":187,"column_start":27,"column_end":31},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":7027},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/range_inclusive.rs","byte_start":410344,"byte_end":410348,"line_start":203,"line_end":203,"column_start":34,"column_end":38},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":7027},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413423,"byte_end":413429,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"kind":{"Impl":{"id":413}},"from":{"krate":2,"index":29432},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":413863,"byte_end":413867,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":7148},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/result.rs","byte_start":415120,"byte_end":415126,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"kind":{"Impl":{"id":421}},"from":{"krate":2,"index":29432},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":452502,"byte_end":452512,"line_start":32,"line_end":32,"column_start":18,"column_end":28},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":4204},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":455462,"byte_end":455468,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":4215},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":455717,"byte_end":455730,"line_start":114,"line_end":114,"column_start":22,"column_end":35},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":4221},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":459456,"byte_end":459465,"line_start":217,"line_end":217,"column_start":22,"column_end":31},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":4231},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mergesort.rs","byte_start":470907,"byte_end":470912,"line_start":521,"line_end":521,"column_start":22,"column_end":27},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":4253},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/quicksort.rs","byte_start":480083,"byte_end":480094,"line_start":21,"line_end":21,"column_start":18,"column_end":29},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":4278},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/quicksort.rs","byte_start":480324,"byte_end":480330,"line_start":34,"line_end":34,"column_start":18,"column_end":24},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":4285},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/quicksort.rs","byte_start":480537,"byte_end":480547,"line_start":46,"line_end":46,"column_start":18,"column_end":28},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":4291},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":433770,"byte_end":433774,"line_start":506,"line_end":506,"column_start":32,"column_end":36},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":7216},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":433901,"byte_end":433905,"line_start":512,"line_end":512,"column_start":51,"column_end":55},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":7216},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":434231,"byte_end":434235,"line_start":527,"line_end":527,"column_start":58,"column_end":62},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":7216},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":434738,"byte_end":434750,"line_start":551,"line_end":551,"column_start":43,"column_end":55},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":4446},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435309,"byte_end":435315,"line_start":572,"line_end":572,"column_start":32,"column_end":38},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":7224},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435444,"byte_end":435450,"line_start":578,"line_end":578,"column_start":51,"column_end":57},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":7224},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":435778,"byte_end":435784,"line_start":593,"line_end":593,"column_start":58,"column_end":64},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":7224},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":436407,"byte_end":436421,"line_start":621,"line_end":621,"column_start":43,"column_end":57},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":4476},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437287,"byte_end":437298,"line_start":653,"line_end":653,"column_start":22,"column_end":33},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":7233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437585,"byte_end":437596,"line_start":662,"line_end":662,"column_start":32,"column_end":43},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":7233},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":437730,"byte_end":437741,"line_start":668,"line_end":668,"column_start":51,"column_end":62},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":7233},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":438069,"byte_end":438080,"line_start":683,"line_end":683,"column_start":58,"column_end":69},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":7233},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":438700,"byte_end":438719,"line_start":711,"line_end":711,"column_start":43,"column_end":62},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":4511},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":439561,"byte_end":439568,"line_start":742,"line_end":742,"column_start":32,"column_end":39},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":7243},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":439698,"byte_end":439705,"line_start":748,"line_end":748,"column_start":51,"column_end":58},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":7243},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":440033,"byte_end":440040,"line_start":763,"line_end":763,"column_start":58,"column_end":65},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":7243},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":440714,"byte_end":440729,"line_start":792,"line_end":792,"column_start":43,"column_end":58},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":4542},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":441604,"byte_end":441611,"line_start":823,"line_end":823,"column_start":51,"column_end":58},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":7252},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":441941,"byte_end":441948,"line_start":838,"line_end":838,"column_start":58,"column_end":65},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":7252},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":442461,"byte_end":442476,"line_start":862,"line_end":862,"column_start":43,"column_end":58},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":4569},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":443115,"byte_end":443124,"line_start":886,"line_end":886,"column_start":51,"column_end":60},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":7260},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":443456,"byte_end":443465,"line_start":901,"line_end":901,"column_start":58,"column_end":67},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":7260},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":444098,"byte_end":444115,"line_start":929,"line_end":929,"column_start":43,"column_end":60},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":4595},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":445011,"byte_end":445025,"line_start":961,"line_end":961,"column_start":22,"column_end":36},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":7269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446440,"byte_end":446454,"line_start":993,"line_end":993,"column_start":51,"column_end":65},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":7269},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":446786,"byte_end":446800,"line_start":1008,"line_end":1008,"column_start":58,"column_end":72},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":7269},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":447430,"byte_end":447452,"line_start":1036,"line_end":1036,"column_start":43,"column_end":65},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":4628},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448282,"byte_end":448287,"line_start":1066,"line_end":1066,"column_start":36,"column_end":41},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":4640},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448470,"byte_end":448475,"line_start":1075,"line_end":1075,"column_start":36,"column_end":41},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":4640},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":448671,"byte_end":448676,"line_start":1081,"line_end":1081,"column_start":40,"column_end":45},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":4640},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":450163,"byte_end":450171,"line_start":1142,"line_end":1142,"column_start":36,"column_end":44},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":4674},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/slice/mod.rs","byte_start":450396,"byte_end":450404,"line_start":1150,"line_end":1150,"column_start":40,"column_end":48},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":4674},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521600,"byte_end":521605,"line_start":283,"line_end":283,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":4730}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521608,"byte_end":521612,"line_start":283,"line_end":283,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":4730}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":521615,"byte_end":521619,"line_start":283,"line_end":283,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":4730}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":523459,"byte_end":523461,"line_start":350,"line_end":350,"column_start":54,"column_end":56},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":4762},"to":{"krate":0,"index":4730}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":524704,"byte_end":524709,"line_start":403,"line_end":403,"column_start":32,"column_end":37},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":7282},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":524969,"byte_end":524982,"line_start":414,"line_end":414,"column_start":33,"column_end":46},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":4775},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":525781,"byte_end":525792,"line_start":448,"line_end":448,"column_start":32,"column_end":43},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":7291},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":526143,"byte_end":526162,"line_start":463,"line_end":463,"column_start":33,"column_end":52},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":4789},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":527134,"byte_end":527139,"line_start":503,"line_end":503,"column_start":32,"column_end":37},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":7300},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":527397,"byte_end":527410,"line_start":514,"line_end":514,"column_start":33,"column_end":46},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":528167,"byte_end":528178,"line_start":547,"line_end":547,"column_start":32,"column_end":43},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":7309},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":528443,"byte_end":528462,"line_start":558,"line_end":558,"column_start":33,"column_end":52},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":4818},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":529203,"byte_end":529208,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":7318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":529358,"byte_end":529363,"line_start":594,"line_end":594,"column_start":44,"column_end":49},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":7318},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531016,"byte_end":531031,"line_start":654,"line_end":654,"column_start":23,"column_end":38},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":7331},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531185,"byte_end":531208,"line_start":660,"line_end":660,"column_start":36,"column_end":59},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":4852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531516,"byte_end":531531,"line_start":669,"line_end":669,"column_start":44,"column_end":59},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":7331},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":531879,"byte_end":531902,"line_start":681,"line_end":681,"column_start":58,"column_end":81},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":4852},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":532866,"byte_end":532871,"line_start":721,"line_end":721,"column_start":32,"column_end":37},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":7344},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":533465,"byte_end":533480,"line_start":746,"line_end":746,"column_start":32,"column_end":47},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":7354},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":534145,"byte_end":534152,"line_start":774,"line_end":774,"column_start":44,"column_end":51},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":7364},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":534529,"byte_end":534544,"line_start":789,"line_end":789,"column_start":51,"column_end":66},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":4894},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":535581,"byte_end":535593,"line_start":831,"line_end":831,"column_start":44,"column_end":56},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":7377},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/str.rs","byte_start":536006,"byte_end":536026,"line_start":847,"line_end":847,"column_start":51,"column_end":71},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":4914},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537202,"byte_end":537205,"line_start":17,"line_end":17,"column_start":40,"column_end":43},"kind":{"Impl":{"id":485}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537378,"byte_end":537386,"line_start":26,"line_end":26,"column_start":36,"column_end":44},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":7390},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":537683,"byte_end":537691,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":7390},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":538806,"byte_end":538817,"line_start":79,"line_end":79,"column_start":43,"column_end":54},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":4956},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":539481,"byte_end":539492,"line_start":99,"line_end":99,"column_start":39,"column_end":50},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":4956},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":539854,"byte_end":539864,"line_start":114,"line_end":114,"column_start":36,"column_end":46},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":4971},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":540186,"byte_end":540196,"line_start":128,"line_end":128,"column_start":47,"column_end":57},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":4971},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":540401,"byte_end":540411,"line_start":135,"line_end":135,"column_start":45,"column_end":55},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":4971},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/vec.rs","byte_start":540517,"byte_end":540527,"line_start":141,"line_end":141,"column_start":32,"column_end":42},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":4971},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/par_either.rs","byte_start":541596,"byte_end":541602,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"kind":{"Impl":{"id":494}},"from":{"krate":15,"index":165},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/par_either.rs","byte_start":542122,"byte_end":542128,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"kind":{"Impl":{"id":495}},"from":{"krate":15,"index":165},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.4.0/src/par_either.rs","byte_start":542922,"byte_end":542928,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"kind":{"Impl":{"id":496}},"from":{"krate":15,"index":165},"to":{"krate":0,"index":3992}}]}