{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","gfx_memory","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=fed50fb686b4ac60","-C","extra-filename=-fed50fb686b4ac60","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","fxhash=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libfxhash-967f550d50730602.rmeta","--extern","hal=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libgfx_hal-a8c88defba1e0cd9.rmeta","--extern","hibitset=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libhibitset-b0d0cdfb8113c557.rmeta","--extern","log=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/liblog-da2d0079f404670c.rmeta","--extern","slab=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libslab-d67ff0718936b62c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libgfx_memory-fed50fb686b4ac60.rmeta"},"prelude":{"crate_id":{"name":"gfx_memory","disambiguator":[12972892183308685379,12518162897643129721]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","num":15,"id":{"name":"gfx_hal","disambiguator":[11122676734006237625,10181242700647790931]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","num":16,"id":{"name":"bitflags","disambiguator":[381175081479133518,10994153786536176848]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","num":17,"id":{"name":"raw_window_handle","disambiguator":[6552574937117001955,7578084645408101463]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","num":18,"id":{"name":"libc","disambiguator":[7997064065336242500,8511025302220419458]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","num":19,"id":{"name":"hibitset","disambiguator":[12551236931944093258,15446363680029529775]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","num":20,"id":{"name":"atom","disambiguator":[7388032441240403036,7755558300585397009]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","num":21,"id":{"name":"log","disambiguator":[2463566853520751095,647246307195811942]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","num":22,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","num":23,"id":{"name":"fxhash","disambiguator":[949214370214060910,13199831759942322742]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","num":24,"id":{"name":"byteorder","disambiguator":[10719404080946289605,17148540255389135738]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","num":25,"id":{"name":"slab","disambiguator":[4729543071339994363,11740316045407999008]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":0,"byte_end":1862,"line_start":1,"line_end":75,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":302,"byte_end":303,"line_start":21,"line_end":21,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":316,"byte_end":321,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"alias_span":null,"name":"Block","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":335,"byte_end":340,"line_start":23,"line_end":23,"column_start":13,"column_end":18},"alias_span":null,"name":"Heaps","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":342,"byte_end":352,"line_start":23,"line_end":23,"column_start":20,"column_end":30},"alias_span":null,"name":"HeapsError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":565},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":354,"byte_end":365,"line_start":23,"line_end":23,"column_start":32,"column_end":43},"alias_span":null,"name":"MemoryBlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":595},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":382,"byte_end":393,"line_start":24,"line_end":24,"column_start":15,"column_end":26},"alias_span":null,"name":"MappedRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":395,"byte_end":401,"line_start":24,"line_end":24,"column_start":28,"column_end":34},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":416,"byte_end":422,"line_start":25,"line_end":25,"column_start":13,"column_end":19},"alias_span":null,"name":"Memory","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":302,"byte_end":303,"line_start":21,"line_end":21,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"MemoryUtilization","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":449,"byte_end":460,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"alias_span":null,"name":"MemoryUsage","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":0,"byte_end":1862,"line_start":1,"line_end":75,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":206},{"krate":0,"index":216},{"krate":0,"index":299},{"krate":0,"index":337},{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":357},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" GPU memory management","sig":null,"attributes":[{"value":"! GPU memory management","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":26,"byte_end":29,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"warn(missing_docs, trivial_casts, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, unused_qualifications)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":31,"byte_end":184,"line_start":4,"line_end":11,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4512,"byte_end":4526,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"DedicatedBlock","qualname":"::allocator::dedicated::DedicatedBlock","value":"DedicatedBlock {  }","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":" Memory block allocated from `DedicatedAllocator`.\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `DedicatedAllocator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4430,"byte_end":4483,"line_start":11,"line_end":11,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4806,"byte_end":4819,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"unwrap_memory","qualname":"<DedicatedBlock<B>>::unwrap_memory","value":"fn (self) -> Memory<B>","parent":null,"children":[],"decl_id":null,"docs":" Get inner memory.\n Panics if mapped.\n","sig":null,"attributes":[{"value":"/ Get inner memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4747,"byte_end":4768,"line_start":22,"line_end":22,"column_start":5,"column_end":26}},{"value":"/ Panics if mapped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4773,"byte_end":4794,"line_start":23,"line_end":23,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4950,"byte_end":4961,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"from_memory","qualname":"<DedicatedBlock<B>>::from_memory","value":"fn (memory: Memory<B>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a non-mappable block.\n","sig":null,"attributes":[{"value":"/ Make a non-mappable block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4908,"byte_end":4938,"line_start":29,"line_end":29,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":5089,"byte_end":5093,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"size","qualname":"<DedicatedBlock<B>>::size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get the size of the block.\n","sig":null,"attributes":[{"value":"/ Get the size of the block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":5047,"byte_end":5077,"line_start":34,"line_end":34,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6868,"byte_end":6886,"line_start":94,"line_end":94,"column_start":12,"column_end":30},"name":"DedicatedAllocator","qualname":"::allocator::dedicated::DedicatedAllocator","value":"DedicatedAllocator {  }","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390}],"decl_id":null,"docs":" Dedicated memory allocator that uses memory object per allocation requested.","sig":null,"attributes":[{"value":"/ Dedicated memory allocator that uses memory object per allocation requested.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6483,"byte_end":6563,"line_start":85,"line_end":85,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6564,"byte_end":6567,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ This allocator suites best huge allocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6568,"byte_end":6616,"line_start":87,"line_end":87,"column_start":1,"column_end":49}},{"value":"/ From 32 MiB when GPU has 4-8 GiB memory total.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6617,"byte_end":6667,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6668,"byte_end":6671,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ `Heaps` use this allocator when none of sub-allocators bound to the memory type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6672,"byte_end":6755,"line_start":90,"line_end":90,"column_start":1,"column_end":84}},{"value":"/ can handle size required.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6756,"byte_end":6785,"line_start":91,"line_end":91,"column_start":1,"column_end":30}},{"value":"/ TODO: Check if resource prefers dedicated memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":6786,"byte_end":6839,"line_start":92,"line_end":92,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":7173,"byte_end":7176,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<DedicatedAllocator>::new","value":"fn (memory_type: hal::MemoryTypeId, memory_properties: hal::memory::Properties, non_coherent_atom_size: Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `LinearAllocator`\n for `memory_type` with `memory_properties` specified\n","sig":null,"attributes":[{"value":"/ Create new `LinearAllocator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":7068,"byte_end":7100,"line_start":102,"line_end":102,"column_start":5,"column_end":37}},{"value":"/ for `memory_type` with `memory_properties` specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":7105,"byte_end":7161,"line_start":103,"line_end":103,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":393},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9636,"byte_end":9648,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"GeneralBlock","qualname":"::allocator::general::GeneralBlock","value":"GeneralBlock {  }","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400}],"decl_id":null,"docs":" Memory block allocated from `GeneralAllocator`\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `GeneralAllocator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9557,"byte_end":9607,"line_start":25,"line_end":25,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9995,"byte_end":9999,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"size","qualname":"<GeneralBlock<B>>::size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get the size of this block.\n","sig":null,"attributes":[{"value":"/ Get the size of this block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9952,"byte_end":9983,"line_start":40,"line_end":40,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":404},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11381,"byte_end":11394,"line_start":89,"line_end":89,"column_start":12,"column_end":25},"name":"GeneralConfig","qualname":"::allocator::general::GeneralConfig","value":"GeneralConfig { block_size_granularity, max_chunk_size, min_device_allocation }","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407}],"decl_id":null,"docs":" Config for `GeneralAllocator`.\n","sig":null,"attributes":[{"value":"/ Config for `GeneralAllocator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11305,"byte_end":11339,"line_start":87,"line_end":87,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11468,"byte_end":11490,"line_start":91,"line_end":91,"column_start":9,"column_end":31},"name":"block_size_granularity","qualname":"::allocator::general::GeneralConfig::block_size_granularity","value":"u64","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" All requests are rounded up to multiple of this value.\n","sig":null,"attributes":[{"value":"/ All requests are rounded up to multiple of this value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11401,"byte_end":11459,"line_start":90,"line_end":90,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":406},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11627,"byte_end":11641,"line_start":95,"line_end":95,"column_start":9,"column_end":23},"name":"max_chunk_size","qualname":"::allocator::general::GeneralConfig::max_chunk_size","value":"u64","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Maximum chunk of blocks size.\n Actual chunk size is `min(max_chunk_size, block_size * blocks_per_chunk)`\n","sig":null,"attributes":[{"value":"/ Maximum chunk of blocks size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11503,"byte_end":11536,"line_start":93,"line_end":93,"column_start":5,"column_end":38}},{"value":"/ Actual chunk size is `min(max_chunk_size, block_size * blocks_per_chunk)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11541,"byte_end":11618,"line_start":94,"line_end":94,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":407},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11701,"byte_end":11722,"line_start":98,"line_end":98,"column_start":9,"column_end":30},"name":"min_device_allocation","qualname":"::allocator::general::GeneralConfig::min_device_allocation","value":"u64","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Minimum size of device allocation.\n","sig":null,"attributes":[{"value":"/ Minimum size of device allocation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11654,"byte_end":11692,"line_start":97,"line_end":97,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11878,"byte_end":11894,"line_start":105,"line_end":105,"column_start":12,"column_end":28},"name":"GeneralAllocator","qualname":"::allocator::general::GeneralAllocator","value":"GeneralAllocator {  }","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422}],"decl_id":null,"docs":" No-fragmentation allocator.\n Suitable for any type of small allocations.\n Every freed block can be reused.\n","sig":null,"attributes":[{"value":"/ No-fragmentation allocator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11733,"byte_end":11764,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ Suitable for any type of small allocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11765,"byte_end":11812,"line_start":102,"line_end":102,"column_start":1,"column_end":48}},{"value":"/ Every freed block can be reused.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":11813,"byte_end":11849,"line_start":103,"line_end":103,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13503,"byte_end":13506,"line_start":163,"line_end":163,"column_start":12,"column_end":15},"name":"new","qualname":"<GeneralAllocator<B>>::new","value":"fn (memory_type: hal::MemoryTypeId, memory_properties: hal::memory::Properties, config: &GeneralConfig, non_coherent_atom_size: Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `GeneralAllocator`\n for `memory_type` with `memory_properties` specified,\n with `GeneralConfig` provided.\n","sig":null,"attributes":[{"value":"/ Create new `GeneralAllocator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13357,"byte_end":13390,"line_start":160,"line_end":160,"column_start":5,"column_end":38}},{"value":"/ for `memory_type` with `memory_properties` specified,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13395,"byte_end":13452,"line_start":161,"line_end":161,"column_start":5,"column_end":62}},{"value":"/ with `GeneralConfig` provided.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13457,"byte_end":13491,"line_start":162,"line_end":162,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":15337,"byte_end":15351,"line_start":218,"line_end":218,"column_start":12,"column_end":26},"name":"max_allocation","qualname":"<GeneralAllocator<B>>::max_allocation","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Maximum allocation size.\n","sig":null,"attributes":[{"value":"/ Maximum allocation size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":15297,"byte_end":15325,"line_start":217,"line_end":217,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":23943,"byte_end":23948,"line_start":469,"line_end":469,"column_start":12,"column_end":17},"name":"clear","qualname":"<GeneralAllocator<B>>::clear","value":"fn (&mut self, _device: &B::Device) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Free the contents of the allocator.\n","sig":null,"attributes":[{"value":"/ Free the contents of the allocator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":23892,"byte_end":23931,"line_start":468,"line_end":468,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":29801,"byte_end":29812,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"LinearBlock","qualname":"::allocator::linear::LinearBlock","value":"LinearBlock {  }","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457}],"decl_id":null,"docs":" Memory block allocated from `LinearAllocator`.\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `LinearAllocator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":29722,"byte_end":29772,"line_start":11,"line_end":11,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30120,"byte_end":30124,"line_start":25,"line_end":25,"column_start":12,"column_end":16},"name":"size","qualname":"<LinearBlock<B>>::size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get the size of this block.\n","sig":null,"attributes":[{"value":"/ Get the size of this block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30077,"byte_end":30108,"line_start":24,"line_end":24,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":461},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31574,"byte_end":31586,"line_start":75,"line_end":75,"column_start":12,"column_end":24},"name":"LinearConfig","qualname":"::allocator::linear::LinearConfig","value":"LinearConfig { linear_size }","parent":null,"children":[{"krate":0,"index":462}],"decl_id":null,"docs":" Config for `LinearAllocator`.\n","sig":null,"attributes":[{"value":"/ Config for `LinearAllocator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31499,"byte_end":31532,"line_start":73,"line_end":73,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31652,"byte_end":31663,"line_start":78,"line_end":78,"column_start":9,"column_end":20},"name":"linear_size","qualname":"::allocator::linear::LinearConfig::linear_size","value":"u64","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" Size of the linear chunk.\n Keep it big.\n","sig":null,"attributes":[{"value":"/ Size of the linear chunk.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31593,"byte_end":31622,"line_start":76,"line_end":76,"column_start":5,"column_end":34}},{"value":"/ Keep it big.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31627,"byte_end":31643,"line_start":77,"line_end":77,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32186,"byte_end":32201,"line_start":91,"line_end":91,"column_start":12,"column_end":27},"name":"LinearAllocator","qualname":"::allocator::linear::LinearAllocator","value":"LinearAllocator {  }","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475}],"decl_id":null,"docs":" Linear allocator that return memory from chunk sequentially.\n It keeps only number of bytes allocated from each chunk.\n Once chunk is exhausted it is placed into list.\n When all blocks allocated from head of that list are freed,\n head is freed as well.","sig":null,"attributes":[{"value":"/ Linear allocator that return memory from chunk sequentially.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31674,"byte_end":31738,"line_start":81,"line_end":81,"column_start":1,"column_end":65}},{"value":"/ It keeps only number of bytes allocated from each chunk.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31739,"byte_end":31799,"line_start":82,"line_end":82,"column_start":1,"column_end":61}},{"value":"/ Once chunk is exhausted it is placed into list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31800,"byte_end":31851,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/ When all blocks allocated from head of that list are freed,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31852,"byte_end":31915,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/ head is freed as well.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31916,"byte_end":31942,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31943,"byte_end":31946,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ This allocator suites best short-lived types of allocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":31947,"byte_end":32011,"line_start":87,"line_end":87,"column_start":1,"column_end":65}},{"value":"/ Allocation strategy requires minimal overhead and implementation is fast.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32012,"byte_end":32089,"line_start":88,"line_end":88,"column_start":1,"column_end":78}},{"value":"/ But holding single block will completely stop memory recycling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32090,"byte_end":32157,"line_start":89,"line_end":89,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32831,"byte_end":32834,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearAllocator<B>>::new","value":"fn (memory_type: hal::MemoryTypeId, memory_properties: hal::memory::Properties, config: &LinearConfig, non_coherent_atom_size: Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `LinearAllocator`\n for `memory_type` with `memory_properties` specified,\n with `LinearConfig` provided.\n","sig":null,"attributes":[{"value":"/ Create new `LinearAllocator`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32687,"byte_end":32719,"line_start":112,"line_end":112,"column_start":5,"column_end":37}},{"value":"/ for `memory_type` with `memory_properties` specified,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32724,"byte_end":32781,"line_start":113,"line_end":113,"column_start":5,"column_end":62}},{"value":"/ with `LinearConfig` provided.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32786,"byte_end":32819,"line_start":114,"line_end":114,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":33821,"byte_end":33835,"line_start":146,"line_end":146,"column_start":12,"column_end":26},"name":"max_allocation","qualname":"<LinearAllocator<B>>::max_allocation","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Maximum allocation size.\n","sig":null,"attributes":[{"value":"/ Maximum allocation size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":33781,"byte_end":33809,"line_start":145,"line_end":145,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":34878,"byte_end":34883,"line_start":178,"line_end":178,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearAllocator<B>>::clear","value":"fn (&mut self, device: &B::Device) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform full cleanup of the memory allocated.\n","sig":null,"attributes":[{"value":"/ Perform full cleanup of the memory allocated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":34817,"byte_end":34866,"line_start":177,"line_end":177,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":489},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2410,"byte_end":2419,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"Dedicated","qualname":"::allocator::Kind::Dedicated","value":"Kind::Dedicated","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Memory object per allocation.\n","sig":null,"attributes":[{"value":"/ Memory object per allocation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2372,"byte_end":2405,"line_start":18,"line_end":18,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2461,"byte_end":2468,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"General","qualname":"::allocator::Kind::General","value":"Kind::General","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" General purpose allocator.\n","sig":null,"attributes":[{"value":"/ General purpose allocator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2426,"byte_end":2456,"line_start":21,"line_end":21,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":493},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2581,"byte_end":2587,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"Linear","qualname":"::allocator::Kind::Linear","value":"Kind::Linear","parent":{"krate":0,"index":488},"children":[],"decl_id":null,"docs":" Allocates linearly.\n Fast and low overhead.\n Suitable for one-time-use allocations.\n","sig":null,"attributes":[{"value":"/ Allocates linearly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2475,"byte_end":2498,"line_start":24,"line_end":24,"column_start":5,"column_end":28}},{"value":"/ Fast and low overhead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2503,"byte_end":2529,"line_start":25,"line_end":25,"column_start":5,"column_end":31}},{"value":"/ Suitable for one-time-use allocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2534,"byte_end":2576,"line_start":26,"line_end":26,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":488},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2361,"byte_end":2365,"line_start":17,"line_end":17,"column_start":10,"column_end":14},"name":"Kind","qualname":"::allocator::Kind","value":"Kind::{Dedicated, General, Linear}","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493}],"decl_id":null,"docs":" Allocator kind.\n","sig":null,"attributes":[{"value":"/ Allocator kind.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2270,"byte_end":2289,"line_start":15,"line_end":15,"column_start":1,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2658,"byte_end":2667,"line_start":31,"line_end":31,"column_start":11,"column_end":20},"name":"Allocator","qualname":"::allocator::Allocator","value":"Allocator<B: hal::Backend>","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"decl_id":null,"docs":" Allocator trait implemented for various allocators.\n","sig":null,"attributes":[{"value":"/ Allocator trait implemented for various allocators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2592,"byte_end":2647,"line_start":30,"line_end":30,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":199},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2738,"byte_end":2743,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Block","qualname":"::allocator::Allocator::Block","value":"type Block: Block<B>;","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Block type returned by allocator.\n","sig":null,"attributes":[{"value":"/ Block type returned by allocator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2691,"byte_end":2728,"line_start":32,"line_end":32,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":200},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2790,"byte_end":2794,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"KIND","qualname":"::allocator::Allocator::KIND","value":"Kind","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Allocator kind.\n","sig":null,"attributes":[{"value":"/ Allocator kind.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2760,"byte_end":2779,"line_start":35,"line_end":35,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2930,"byte_end":2935,"line_start":40,"line_end":40,"column_start":8,"column_end":13},"name":"alloc","qualname":"::allocator::Allocator::alloc","value":"fn (&mut self, device: &B::Device, size: Size, align: Size) -> Result<(Self::Block, Size), hal::device::AllocationError>","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Allocate block of memory.\n On success returns allocated block and amount of memory consumed from device.\n","sig":null,"attributes":[{"value":"/ Allocate block of memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2807,"byte_end":2836,"line_start":38,"line_end":38,"column_start":5,"column_end":34}},{"value":"/ On success returns allocated block and amount of memory consumed from device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":2841,"byte_end":2922,"line_start":39,"line_end":39,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":3188,"byte_end":3192,"line_start":49,"line_end":49,"column_start":8,"column_end":12},"name":"free","qualname":"::allocator::Allocator::free","value":"fn (&mut self, device: &B::Device, block: Self::Block) -> Size","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Free block of memory.\n Returns amount of memory returned to the device.\n","sig":null,"attributes":[{"value":"/ Free block of memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":3098,"byte_end":3123,"line_start":47,"line_end":47,"column_start":5,"column_end":30}},{"value":"/ Returns amount of memory returned to the device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/mod.rs","byte_start":3128,"byte_end":3180,"line_start":48,"line_end":48,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":209},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38296,"byte_end":38301,"line_start":8,"line_end":8,"column_start":11,"column_end":16},"name":"Block","qualname":"::block::Block","value":"Block<B: hal::Backend>","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214}],"decl_id":null,"docs":" Block that owns a `Segment` of the `Memory`.\n Implementor must ensure that there can't be any other blocks\n with overlapping range (either through type system or safety notes for unsafe functions).\n Provides access to safe memory range mapping.\n","sig":null,"attributes":[{"value":"/ Block that owns a `Segment` of the `Memory`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38028,"byte_end":38076,"line_start":4,"line_end":4,"column_start":1,"column_end":49}},{"value":"/ Implementor must ensure that there can't be any other blocks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38077,"byte_end":38141,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ with overlapping range (either through type system or safety notes for unsafe functions).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38142,"byte_end":38235,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ Provides access to safe memory range mapping.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38236,"byte_end":38285,"line_start":7,"line_end":7,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38372,"byte_end":38382,"line_start":10,"line_end":10,"column_start":8,"column_end":18},"name":"properties","qualname":"::block::Block::properties","value":"fn (&self) -> m::Properties","parent":{"krate":0,"index":209},"children":[],"decl_id":null,"docs":" Get memory properties of the block.\n","sig":null,"attributes":[{"value":"/ Get memory properties of the block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38325,"byte_end":38364,"line_start":9,"line_end":9,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38447,"byte_end":38453,"line_start":13,"line_end":13,"column_start":8,"column_end":14},"name":"memory","qualname":"::block::Block::memory","value":"fn (&self) -> &B::Memory","parent":{"krate":0,"index":209},"children":[],"decl_id":null,"docs":" Get raw memory object.\n","sig":null,"attributes":[{"value":"/ Get raw memory object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38413,"byte_end":38439,"line_start":12,"line_end":12,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38532,"byte_end":38539,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"segment","qualname":"::block::Block::segment","value":"fn (&self) -> m::Segment","parent":{"krate":0,"index":209},"children":[],"decl_id":null,"docs":" Get memory segment owned by this block.\n","sig":null,"attributes":[{"value":"/ Get memory segment owned by this block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38481,"byte_end":38524,"line_start":15,"line_end":15,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38700,"byte_end":38703,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"map","qualname":"::block::Block::map","value":"fn <'a> (&'a mut self, device: &B::Device, segment: m::Segment) -> Result<MappedRange<'a, B>, hal::device::MapError>","parent":{"krate":0,"index":209},"children":[],"decl_id":null,"docs":" Get mapping for the block segment.\n Memory writes to the region performed by device become available for the host.\n","sig":null,"attributes":[{"value":"/ Get mapping for the block segment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38567,"byte_end":38605,"line_start":18,"line_end":18,"column_start":5,"column_end":43}},{"value":"/ Memory writes to the region performed by device become available for the host.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/block.rs","byte_start":38610,"byte_end":38692,"line_start":19,"line_end":19,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":543},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39229,"byte_end":39244,"line_start":17,"line_end":17,"column_start":5,"column_end":20},"name":"AllocationError","qualname":"::heaps::HeapsError::AllocationError","value":"HeapsError::AllocationError(hal::device::AllocationError)","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Memory allocation failure.\n","sig":null,"attributes":[{"value":"/ Memory allocation failure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39194,"byte_end":39224,"line_start":16,"line_end":16,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39369,"byte_end":39385,"line_start":19,"line_end":19,"column_start":5,"column_end":21},"name":"NoSuitableMemory","qualname":"::heaps::HeapsError::NoSuitableMemory","value":"HeapsError::NoSuitableMemory(u32, hal::memory::Properties)","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" No memory types among required for resource with requested properties was found.\n","sig":null,"attributes":[{"value":"/ No memory types among required for resource with requested properties was found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39280,"byte_end":39364,"line_start":18,"line_end":18,"column_start":5,"column_end":89}}]},{"kind":"Enum","id":{"krate":0,"index":542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39177,"byte_end":39187,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"HeapsError","qualname":"::heaps::HeapsError","value":"HeapsError::{AllocationError, NoSuitableMemory}","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":546}],"decl_id":null,"docs":" Possible errors returned by `Heaps`.\n","sig":null,"attributes":[{"value":"/ Possible errors returned by `Heaps`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39092,"byte_end":39132,"line_start":13,"line_end":13,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":558},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40511,"byte_end":40516,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"Heaps","qualname":"::heaps::Heaps","value":"Heaps {  }","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561}],"decl_id":null,"docs":" Heaps available on particular physical device.\n","sig":null,"attributes":[{"value":"/ Heaps available on particular physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40432,"byte_end":40482,"line_start":55,"line_end":55,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40692,"byte_end":40695,"line_start":64,"line_end":64,"column_start":19,"column_end":22},"name":"new","qualname":"<Heaps<B>>::new","value":"fn (hal_memory_properties: &hal::adapter::MemoryProperties, config_general: GeneralConfig, config_linear: LinearConfig, non_coherent_atom_size: Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the new `Heaps` object.\n","sig":null,"attributes":[{"value":"/ Initialize the new `Heaps` object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40635,"byte_end":40673,"line_start":63,"line_end":63,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":41805,"byte_end":41813,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"allocate","qualname":"<Heaps<B>>::allocate","value":"fn (&mut self, device: &B::Device, mask: u32, usage: MemoryUsage, kind: Kind, size: Size, align: Size) -> Result<MemoryBlock<B>, HeapsError>","parent":null,"children":[],"decl_id":null,"docs":" Allocate memory block\n from one of memory types specified by `mask`,\n for intended `usage`,\n with `size`\n and `align` requirements.\n","sig":null,"attributes":[{"value":"/ Allocate memory block","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":41630,"byte_end":41655,"line_start":92,"line_end":92,"column_start":5,"column_end":30}},{"value":"/ from one of memory types specified by `mask`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":41660,"byte_end":41709,"line_start":93,"line_end":93,"column_start":5,"column_end":54}},{"value":"/ for intended `usage`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":41714,"byte_end":41739,"line_start":94,"line_end":94,"column_start":5,"column_end":30}},{"value":"/ with `size`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":41744,"byte_end":41759,"line_start":95,"line_end":95,"column_start":5,"column_end":20}},{"value":"/ and `align` requirements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":41764,"byte_end":41793,"line_start":96,"line_end":96,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":44734,"byte_end":44738,"line_start":187,"line_end":187,"column_start":12,"column_end":16},"name":"free","qualname":"<Heaps<B>>::free","value":"fn (&mut self, device: &B::Device, block: MemoryBlock<B>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Free memory block.","sig":null,"attributes":[{"value":"/ Free memory block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":44637,"byte_end":44659,"line_start":184,"line_end":184,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":44664,"byte_end":44667,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Memory block must be allocated from this heap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":44672,"byte_end":44722,"line_start":186,"line_end":186,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":45375,"byte_end":45380,"line_start":204,"line_end":204,"column_start":12,"column_end":17},"name":"clear","qualname":"<Heaps<B>>::clear","value":"fn (&mut self, device: &B::Device) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear allocators before dropping.\n Will panic if memory instances are left allocated.\n","sig":null,"attributes":[{"value":"/ Clear allocators before dropping.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":45267,"byte_end":45304,"line_start":202,"line_end":202,"column_start":5,"column_end":42}},{"value":"/ Will panic if memory instances are left allocated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":45309,"byte_end":45363,"line_start":203,"line_end":203,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":45548,"byte_end":45559,"line_start":211,"line_end":211,"column_start":12,"column_end":23},"name":"utilization","qualname":"<Heaps<B>>::utilization","value":"fn (&self) -> TotalMemoryUtilization","parent":null,"children":[],"decl_id":null,"docs":" Get memory utilization.\n","sig":null,"attributes":[{"value":"/ Get memory utilization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":45509,"byte_end":45536,"line_start":210,"line_end":210,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":565},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46079,"byte_end":46090,"line_start":229,"line_end":229,"column_start":12,"column_end":23},"name":"MemoryBlock","qualname":"::heaps::MemoryBlock","value":"MemoryBlock {  }","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568}],"decl_id":null,"docs":" Memory block allocated from `Heaps`.\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `Heaps`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46010,"byte_end":46050,"line_start":227,"line_end":227,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46242,"byte_end":46253,"line_start":236,"line_end":236,"column_start":12,"column_end":23},"name":"memory_type","qualname":"<MemoryBlock<B>>::memory_type","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get memory type id.\n","sig":null,"attributes":[{"value":"/ Get memory type id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46207,"byte_end":46230,"line_start":235,"line_end":235,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53174,"byte_end":53180,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"Writer","qualname":"::mapping::Writer","value":"Writer { slice }","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"decl_id":null,"docs":" Wrapper structure for a mutable slice with deferred\n flushing for non-coherent memory.\n","sig":null,"attributes":[{"value":"/ Wrapper structure for a mutable slice with deferred","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53052,"byte_end":53107,"line_start":14,"line_end":14,"column_start":1,"column_end":56}},{"value":"/ flushing for non-coherent memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53108,"byte_end":53145,"line_start":15,"line_end":15,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":587},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53237,"byte_end":53242,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"slice","qualname":"::mapping::Writer::slice","value":"&'a mut [T]","parent":{"krate":0,"index":582},"children":[],"decl_id":null,"docs":" Wrapped slice.\n","sig":null,"attributes":[{"value":"/ Wrapped slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53210,"byte_end":53228,"line_start":18,"line_end":18,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53527,"byte_end":53533,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"forget","qualname":"<Writer>::forget","value":"fn (mut self) -> (*mut T, Option<hal::memory::Segment>)","parent":null,"children":[],"decl_id":null,"docs":" Dispose of the wrapper and return a bare mapping pointer.","sig":null,"attributes":[{"value":"/ Dispose of the wrapper and return a bare mapping pointer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53340,"byte_end":53401,"line_start":24,"line_end":24,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53406,"byte_end":53409,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ The segment to flush is returned. The user is responsible","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53414,"byte_end":53475,"line_start":26,"line_end":26,"column_start":5,"column_end":66}},{"value":"/ to flush this segment manually.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53480,"byte_end":53515,"line_start":27,"line_end":27,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":595},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":54160,"byte_end":54171,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"MappedRange","qualname":"::mapping::MappedRange","value":"MappedRange {  }","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601}],"decl_id":null,"docs":" Represents range of the memory mapped to the host.\n Provides methods for safer host access to the memory.\n","sig":null,"attributes":[{"value":"/ Represents range of the memory mapped to the host.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":54019,"byte_end":54073,"line_start":45,"line_end":45,"column_start":1,"column_end":55}},{"value":"/ Provides methods for safer host access to the memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":54074,"byte_end":54131,"line_start":46,"line_end":46,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56298,"byte_end":56301,"line_start":114,"line_end":114,"column_start":12,"column_end":15},"name":"ptr","qualname":"<MappedRange>::ptr","value":"fn (&self) -> NonNull<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get pointer to beginning of memory region.\n i.e. to `range().start` offset from memory origin.\n","sig":null,"attributes":[{"value":"/ Get pointer to beginning of memory region.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56181,"byte_end":56227,"line_start":112,"line_end":112,"column_start":5,"column_end":51}},{"value":"/ i.e. to `range().start` offset from memory origin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56232,"byte_end":56286,"line_start":113,"line_end":113,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56533,"byte_end":56538,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"range","qualname":"<MappedRange>::range","value":"fn (&self) -> Range<Size>","parent":null,"children":[],"decl_id":null,"docs":" Get mapped range.\n","sig":null,"attributes":[{"value":"/ Get mapped range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56500,"byte_end":56521,"line_start":119,"line_end":119,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56672,"byte_end":56683,"line_start":125,"line_end":125,"column_start":12,"column_end":23},"name":"is_coherent","qualname":"<MappedRange>::is_coherent","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the mapped memory is coherent.\n","sig":null,"attributes":[{"value":"/ Return true if the mapped memory is coherent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56611,"byte_end":56660,"line_start":124,"line_end":124,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":57101,"byte_end":57105,"line_start":136,"line_end":136,"column_start":19,"column_end":23},"name":"read","qualname":"<MappedRange>::read","value":"fn <'b, T> (&'b mut self, device: &B::Device, segment: hal::memory::Segment) -> Result<&'b [T], hal::device::MapError>","parent":null,"children":[],"decl_id":null,"docs":" Fetch readable slice of sub-range to be read.\n Invalidating range if memory is not coherent.","sig":null,"attributes":[{"value":"/ Fetch readable slice of sub-range to be read.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56765,"byte_end":56814,"line_start":129,"line_end":129,"column_start":5,"column_end":54}},{"value":"/ Invalidating range if memory is not coherent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56819,"byte_end":56868,"line_start":130,"line_end":130,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56873,"byte_end":56876,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56881,"byte_end":56893,"line_start":132,"line_end":132,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56898,"byte_end":56901,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ * Caller must ensure that device won't write to the memory region until the borrowing ends.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":56906,"byte_end":57001,"line_start":134,"line_end":134,"column_start":5,"column_end":100}},{"value":"/ * `T` Must be plain-old-data type compatible with data in mapped region.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":57006,"byte_end":57082,"line_start":135,"line_end":135,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":58362,"byte_end":58367,"line_start":172,"line_end":172,"column_start":19,"column_end":24},"name":"write","qualname":"<MappedRange>::write","value":"fn <'b, T> (&'b mut self, device: &'b B::Device, segment: hal::memory::Segment) -> Result<Writer<'a, 'b, T, B>, hal::device::MapError>","parent":null,"children":[],"decl_id":null,"docs":" Fetch writer to the sub-region.\n This writer will flush data on drop if written at least once.","sig":null,"attributes":[{"value":"/ Fetch writer to the sub-region.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":58117,"byte_end":58152,"line_start":166,"line_end":166,"column_start":5,"column_end":40}},{"value":"/ This writer will flush data on drop if written at least once.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":58157,"byte_end":58222,"line_start":167,"line_end":167,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":58227,"byte_end":58230,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":58235,"byte_end":58247,"line_start":169,"line_end":169,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":58252,"byte_end":58255,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ * Caller must ensure that device won't write to or read from the memory region.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":58260,"byte_end":58343,"line_start":171,"line_end":171,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59561,"byte_end":59567,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Memory","qualname":"::memory::Memory","value":"Memory {  }","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611}],"decl_id":null,"docs":" Memory object wrapper.\n Contains size and properties of the memory.\n","sig":null,"attributes":[{"value":"/ Memory object wrapper.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59458,"byte_end":59484,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/ Contains size and properties of the memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59485,"byte_end":59532,"line_start":4,"line_end":4,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59800,"byte_end":59810,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"properties","qualname":"<Memory<B>>::properties","value":"fn (&self) -> hal::memory::Properties","parent":null,"children":[],"decl_id":null,"docs":" Get memory properties.\n","sig":null,"attributes":[{"value":"/ Get memory properties.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59762,"byte_end":59788,"line_start":14,"line_end":14,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59914,"byte_end":59918,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"size","qualname":"<Memory<B>>::size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get memory size.\n","sig":null,"attributes":[{"value":"/ Get memory size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59882,"byte_end":59902,"line_start":19,"line_end":19,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59996,"byte_end":59999,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"raw","qualname":"<Memory<B>>::raw","value":"fn (&self) -> &B::Memory","parent":null,"children":[],"decl_id":null,"docs":" Get raw memory.\n","sig":null,"attributes":[{"value":"/ Get raw memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59965,"byte_end":59984,"line_start":24,"line_end":24,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60086,"byte_end":60094,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Memory<B>>::into_raw","value":"fn (self) -> B::Memory","parent":null,"children":[],"decl_id":null,"docs":" Unwrap raw memory.\n","sig":null,"attributes":[{"value":"/ Unwrap raw memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60052,"byte_end":60074,"line_start":29,"line_end":29,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60244,"byte_end":60252,"line_start":39,"line_end":39,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Memory<B>>::from_raw","value":"fn (raw: B::Memory, size: Size, properties: hal::memory::Properties, non_coherent_atom_size: Option<AtomSize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create memory from raw object.","sig":null,"attributes":[{"value":"/ Create memory from raw object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60144,"byte_end":60178,"line_start":34,"line_end":34,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60183,"byte_end":60186,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60191,"byte_end":60203,"line_start":36,"line_end":36,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60208,"byte_end":60211,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ TODO:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60216,"byte_end":60225,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60832,"byte_end":60843,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"is_mappable","qualname":"<Memory<B>>::is_mappable","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this memory is host-visible and can be mapped.\n `Equivalent to `memory.properties().contains(Properties::CPU_VISIBLE)`.\n","sig":null,"attributes":[{"value":"/ Check if this memory is host-visible and can be mapped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60681,"byte_end":60740,"line_start":57,"line_end":57,"column_start":5,"column_end":64}},{"value":"/ `Equivalent to `memory.properties().contains(Properties::CPU_VISIBLE)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":60745,"byte_end":60820,"line_start":58,"line_end":58,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61168,"byte_end":61185,"line_start":8,"line_end":8,"column_start":12,"column_end":29},"name":"MemoryUtilization","qualname":"::stats::MemoryUtilization","value":"MemoryUtilization { used, effective }","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617}],"decl_id":null,"docs":" Memory utilization stats.\n","sig":null,"attributes":[{"value":"/ Memory utilization stats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61097,"byte_end":61126,"line_start":6,"line_end":6,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":616},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61237,"byte_end":61241,"line_start":10,"line_end":10,"column_start":9,"column_end":13},"name":"used","qualname":"::stats::MemoryUtilization::used","value":"u64","parent":{"krate":0,"index":615},"children":[],"decl_id":null,"docs":" Total number of bytes allocated.\n","sig":null,"attributes":[{"value":"/ Total number of bytes allocated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61192,"byte_end":61228,"line_start":9,"line_end":9,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":617},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61299,"byte_end":61308,"line_start":12,"line_end":12,"column_start":9,"column_end":18},"name":"effective","qualname":"::stats::MemoryUtilization::effective","value":"u64","parent":{"krate":0,"index":615},"children":[],"decl_id":null,"docs":" Effective number bytes allocated.\n","sig":null,"attributes":[{"value":"/ Effective number bytes allocated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61253,"byte_end":61290,"line_start":11,"line_end":11,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61396,"byte_end":61417,"line_start":17,"line_end":17,"column_start":12,"column_end":33},"name":"MemoryHeapUtilization","qualname":"::stats::MemoryHeapUtilization","value":"MemoryHeapUtilization { utilization, size }","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"decl_id":null,"docs":" Memory utilization of one heap.\n","sig":null,"attributes":[{"value":"/ Memory utilization of one heap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61319,"byte_end":61354,"line_start":15,"line_end":15,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61449,"byte_end":61460,"line_start":19,"line_end":19,"column_start":9,"column_end":20},"name":"utilization","qualname":"::stats::MemoryHeapUtilization::utilization","value":"stats::MemoryUtilization","parent":{"krate":0,"index":623},"children":[],"decl_id":null,"docs":" Utilization.\n","sig":null,"attributes":[{"value":"/ Utilization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61424,"byte_end":61440,"line_start":18,"line_end":18,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61516,"byte_end":61520,"line_start":22,"line_end":22,"column_start":9,"column_end":13},"name":"size","qualname":"::stats::MemoryHeapUtilization::size","value":"u64","parent":{"krate":0,"index":623},"children":[],"decl_id":null,"docs":" Memory heap size.\n","sig":null,"attributes":[{"value":"/ Memory heap size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61486,"byte_end":61507,"line_start":21,"line_end":21,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61608,"byte_end":61629,"line_start":27,"line_end":27,"column_start":12,"column_end":33},"name":"MemoryTypeUtilization","qualname":"::stats::MemoryTypeUtilization","value":"MemoryTypeUtilization { utilization, properties, heap_index }","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634}],"decl_id":null,"docs":" Memory utilization of one type.\n","sig":null,"attributes":[{"value":"/ Memory utilization of one type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61531,"byte_end":61566,"line_start":25,"line_end":25,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":632},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61661,"byte_end":61672,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"name":"utilization","qualname":"::stats::MemoryTypeUtilization::utilization","value":"stats::MemoryUtilization","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Utilization.\n","sig":null,"attributes":[{"value":"/ Utilization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61636,"byte_end":61652,"line_start":28,"line_end":28,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61728,"byte_end":61738,"line_start":32,"line_end":32,"column_start":9,"column_end":19},"name":"properties","qualname":"::stats::MemoryTypeUtilization::properties","value":"gfx_hal::memory::Properties","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Memory type info.\n","sig":null,"attributes":[{"value":"/ Memory type info.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61698,"byte_end":61719,"line_start":31,"line_end":31,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61806,"byte_end":61816,"line_start":35,"line_end":35,"column_start":9,"column_end":19},"name":"heap_index","qualname":"::stats::MemoryTypeUtilization::heap_index","value":"usize","parent":{"krate":0,"index":631},"children":[],"decl_id":null,"docs":" Index of heap this memory type uses.\n","sig":null,"attributes":[{"value":"/ Index of heap this memory type uses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61757,"byte_end":61797,"line_start":34,"line_end":34,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61893,"byte_end":61915,"line_start":40,"line_end":40,"column_start":12,"column_end":34},"name":"TotalMemoryUtilization","qualname":"::stats::TotalMemoryUtilization","value":"TotalMemoryUtilization { types, heaps }","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642}],"decl_id":null,"docs":" Total memory utilization.\n","sig":null,"attributes":[{"value":"/ Total memory utilization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61828,"byte_end":61857,"line_start":38,"line_end":38,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":641},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61956,"byte_end":61961,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"types","qualname":"::stats::TotalMemoryUtilization::types","value":"std::vec::Vec<stats::MemoryTypeUtilization>","parent":{"krate":0,"index":640},"children":[],"decl_id":null,"docs":" Utilization by types.\n","sig":null,"attributes":[{"value":"/ Utilization by types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61922,"byte_end":61947,"line_start":41,"line_end":41,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":62030,"byte_end":62035,"line_start":45,"line_end":45,"column_start":9,"column_end":14},"name":"heaps","qualname":"::stats::TotalMemoryUtilization::heaps","value":"std::vec::Vec<stats::MemoryHeapUtilization>","parent":{"krate":0,"index":640},"children":[],"decl_id":null,"docs":" Utilization by heaps.\n","sig":null,"attributes":[{"value":"/ Utilization by heaps.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/stats.rs","byte_start":61996,"byte_end":62021,"line_start":44,"line_end":44,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":648},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65570,"byte_end":65577,"line_start":12,"line_end":12,"column_start":5,"column_end":12},"name":"Private","qualname":"::usage::MemoryUsage::Private","value":"MemoryUsage::Private","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" Full speed GPU access.\n Optimal for render targets and persistent resources.\n Avoid memory with host access.\n","sig":null,"attributes":[{"value":"/ Full speed GPU access.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65439,"byte_end":65465,"line_start":9,"line_end":9,"column_start":5,"column_end":31}},{"value":"/ Optimal for render targets and persistent resources.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65470,"byte_end":65526,"line_start":10,"line_end":10,"column_start":5,"column_end":61}},{"value":"/ Avoid memory with host access.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65531,"byte_end":65565,"line_start":11,"line_end":11,"column_start":5,"column_end":39}}]},{"kind":"StructVariant","id":{"krate":0,"index":650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65780,"byte_end":65787,"line_start":17,"line_end":17,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::usage::MemoryUsage::Dynamic","value":"MemoryUsage::Dynamic { sparse_updates }","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" CPU to GPU data flow with update commands.\n Used for dynamic buffer data, typically constant buffers.\n Host access is guaranteed.\n Prefers memory with fast GPU access.\n","sig":null,"attributes":[{"value":"/ CPU to GPU data flow with update commands.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65583,"byte_end":65629,"line_start":13,"line_end":13,"column_start":5,"column_end":51}},{"value":"/ Used for dynamic buffer data, typically constant buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65634,"byte_end":65695,"line_start":14,"line_end":14,"column_start":5,"column_end":66}},{"value":"/ Host access is guaranteed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65700,"byte_end":65730,"line_start":15,"line_end":15,"column_start":5,"column_end":35}},{"value":"/ Prefers memory with fast GPU access.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65735,"byte_end":65775,"line_start":16,"line_end":16,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":652},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":66104,"byte_end":66111,"line_start":25,"line_end":25,"column_start":5,"column_end":12},"name":"Staging","qualname":"::usage::MemoryUsage::Staging","value":"MemoryUsage::Staging { read_back }","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" CPU to GPU data flow with mapping.\n Used for staging data before copying to the `Data` memory.\n Host access is guaranteed.\n","sig":null,"attributes":[{"value":"/ CPU to GPU data flow with mapping.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65959,"byte_end":65997,"line_start":22,"line_end":22,"column_start":5,"column_end":43}},{"value":"/ Used for staging data before copying to the `Data` memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":66002,"byte_end":66064,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ Host access is guaranteed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":66069,"byte_end":66099,"line_start":24,"line_end":24,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65421,"byte_end":65432,"line_start":8,"line_end":8,"column_start":10,"column_end":21},"name":"MemoryUsage","qualname":"::usage::MemoryUsage","value":"MemoryUsage::{Private, Dynamic, Staging}","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652}],"decl_id":null,"docs":" Scenarios of how resources use memory.\n","sig":null,"attributes":[{"value":"/ Scenarios of how resources use memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":65328,"byte_end":65370,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":66285,"byte_end":66304,"line_start":33,"line_end":33,"column_start":12,"column_end":31},"name":"properties_required","qualname":"<MemoryUsage>::properties_required","value":"fn (&self) -> m::Properties","parent":null,"children":[],"decl_id":null,"docs":" Set of required memory properties for this usage.\n","sig":null,"attributes":[{"value":"/ Set of required memory properties for this usage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":66220,"byte_end":66273,"line_start":32,"line_end":32,"column_start":5,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":528,"byte_end":532,"line_start":33,"line_end":33,"column_start":10,"column_end":14},"name":"Size","qualname":"::Size","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Type for any memory sizes.\n","sig":null,"attributes":[{"value":"/ Type for any memory sizes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":488,"byte_end":518,"line_start":32,"line_end":32,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":372},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":587,"byte_end":595,"line_start":35,"line_end":35,"column_start":10,"column_end":18},"name":"AtomSize","qualname":"::AtomSize","value":"std::num::NonZeroU64","parent":null,"children":[],"decl_id":null,"docs":" Type for non-coherent atom sizes.\n","sig":null,"attributes":[{"value":"/ Type for non-coherent atom sizes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/lib.rs","byte_start":540,"byte_end":577,"line_start":34,"line_end":34,"column_start":1,"column_end":38}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4630,"byte_end":4644,"line_start":18,"line_end":18,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4684,"byte_end":4698,"line_start":19,"line_end":19,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4723,"byte_end":4737,"line_start":21,"line_end":21,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":5177,"byte_end":5191,"line_start":40,"line_end":40,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":7043,"byte_end":7061,"line_start":101,"line_end":101,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":7685,"byte_end":7703,"line_start":122,"line_end":122,"column_start":35,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":8898,"byte_end":8916,"line_start":165,"line_end":165,"column_start":15,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9841,"byte_end":9853,"line_start":36,"line_end":36,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9893,"byte_end":9905,"line_start":37,"line_end":37,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9930,"byte_end":9942,"line_start":39,"line_end":39,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":10098,"byte_end":10110,"line_start":46,"line_end":46,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":12629,"byte_end":12645,"line_start":131,"line_end":131,"column_start":34,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":12685,"byte_end":12701,"line_start":132,"line_end":132,"column_start":34,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13042,"byte_end":13051,"line_start":146,"line_end":146,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13331,"byte_end":13347,"line_start":159,"line_end":159,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":24021,"byte_end":24037,"line_start":472,"line_end":472,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":25047,"byte_end":25063,"line_start":506,"line_end":506,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":25935,"byte_end":25940,"line_start":538,"line_end":538,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":29969,"byte_end":29980,"line_start":20,"line_end":20,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30020,"byte_end":30031,"line_start":21,"line_end":21,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30056,"byte_end":30067,"line_start":23,"line_end":23,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30223,"byte_end":30234,"line_start":30,"line_end":30,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32589,"byte_end":32593,"line_start":108,"line_end":108,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32633,"byte_end":32637,"line_start":109,"line_end":109,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32662,"byte_end":32677,"line_start":111,"line_end":111,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":35193,"byte_end":35208,"line_start":189,"line_end":189,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":37793,"byte_end":37808,"line_start":271,"line_end":271,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/heap.rs","byte_start":47858,"byte_end":47868,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/memory_type.rs","byte_start":49197,"byte_end":49208,"line_start":16,"line_end":16,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/memory_type.rs","byte_start":49745,"byte_end":49755,"line_start":37,"line_end":37,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39447,"byte_end":39457,"line_start":22,"line_end":22,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39857,"byte_end":39867,"line_start":34,"line_end":34,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40141,"byte_end":40151,"line_start":43,"line_end":43,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40305,"byte_end":40315,"line_start":49,"line_end":49,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40620,"byte_end":40625,"line_start":62,"line_end":62,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":45832,"byte_end":45837,"line_start":219,"line_end":219,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46186,"byte_end":46197,"line_start":234,"line_end":234,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46340,"byte_end":46351,"line_start":241,"line_end":241,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53313,"byte_end":53319,"line_start":23,"line_end":23,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53706,"byte_end":53712,"line_start":33,"line_end":33,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":54530,"byte_end":54541,"line_start":63,"line_end":63,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59746,"byte_end":59752,"line_start":13,"line_end":13,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":66202,"byte_end":66213,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4630,"byte_end":4644,"line_start":18,"line_end":18,"column_start":34,"column_end":48},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":379},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4684,"byte_end":4698,"line_start":19,"line_end":19,"column_start":34,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":379},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":4723,"byte_end":4737,"line_start":21,"line_end":21,"column_start":18,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":5177,"byte_end":5191,"line_start":40,"line_end":40,"column_start":31,"column_end":45},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":379},"to":{"krate":0,"index":209}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":7043,"byte_end":7061,"line_start":101,"line_end":101,"column_start":6,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":7685,"byte_end":7703,"line_start":122,"line_end":122,"column_start":35,"column_end":53},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":386},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/dedicated.rs","byte_start":8898,"byte_end":8916,"line_start":165,"line_end":165,"column_start":15,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":386},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9841,"byte_end":9853,"line_start":36,"line_end":36,"column_start":34,"column_end":46},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9893,"byte_end":9905,"line_start":37,"line_end":37,"column_start":34,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":9930,"byte_end":9942,"line_start":39,"line_end":39,"column_start":18,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":10098,"byte_end":10110,"line_start":46,"line_end":46,"column_start":31,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":393},"to":{"krate":0,"index":209}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":12629,"byte_end":12645,"line_start":131,"line_end":131,"column_start":34,"column_end":50},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":413},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":12685,"byte_end":12701,"line_start":132,"line_end":132,"column_start":34,"column_end":50},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":413},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13042,"byte_end":13051,"line_start":146,"line_end":146,"column_start":30,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":426},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":13331,"byte_end":13347,"line_start":159,"line_end":159,"column_start":18,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":24021,"byte_end":24037,"line_start":472,"line_end":472,"column_start":35,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":413},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":25047,"byte_end":25063,"line_start":506,"line_end":506,"column_start":27,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":413},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/general.rs","byte_start":25935,"byte_end":25940,"line_start":538,"line_end":538,"column_start":18,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":29969,"byte_end":29980,"line_start":20,"line_end":20,"column_start":34,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":452},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30020,"byte_end":30031,"line_start":21,"line_end":21,"column_start":34,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":452},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30056,"byte_end":30067,"line_start":23,"line_end":23,"column_start":18,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":30223,"byte_end":30234,"line_start":30,"line_end":30,"column_start":31,"column_end":42},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":452},"to":{"krate":0,"index":209}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32589,"byte_end":32593,"line_start":108,"line_end":108,"column_start":34,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":479},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32633,"byte_end":32637,"line_start":109,"line_end":109,"column_start":34,"column_end":38},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":479},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":32662,"byte_end":32677,"line_start":111,"line_end":111,"column_start":18,"column_end":33},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":35193,"byte_end":35208,"line_start":189,"line_end":189,"column_start":35,"column_end":50},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":468},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/allocator/linear.rs","byte_start":37793,"byte_end":37808,"line_start":271,"line_end":271,"column_start":27,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":468},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/heap.rs","byte_start":47858,"byte_end":47868,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/memory_type.rs","byte_start":49197,"byte_end":49208,"line_start":16,"line_end":16,"column_start":23,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/memory_type.rs","byte_start":49745,"byte_end":49755,"line_start":37,"line_end":37,"column_start":23,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39447,"byte_end":39457,"line_start":22,"line_end":22,"column_start":28,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":39857,"byte_end":39867,"line_start":34,"line_end":34,"column_start":28,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":542},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40141,"byte_end":40151,"line_start":43,"line_end":43,"column_start":45,"column_end":55},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40305,"byte_end":40315,"line_start":49,"line_end":49,"column_start":41,"column_end":51},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":40620,"byte_end":40625,"line_start":62,"line_end":62,"column_start":23,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":45832,"byte_end":45837,"line_start":219,"line_end":219,"column_start":32,"column_end":37},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":558},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46186,"byte_end":46197,"line_start":234,"line_end":234,"column_start":23,"column_end":34},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/heaps/mod.rs","byte_start":46340,"byte_end":46351,"line_start":241,"line_end":241,"column_start":36,"column_end":47},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":565},"to":{"krate":0,"index":209}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53313,"byte_end":53319,"line_start":23,"line_end":23,"column_start":21,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":53706,"byte_end":53712,"line_start":33,"line_end":33,"column_start":38,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":582},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/mapping.rs","byte_start":54530,"byte_end":54541,"line_start":63,"line_end":63,"column_start":22,"column_end":33},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/memory.rs","byte_start":59746,"byte_end":59752,"line_start":13,"line_end":13,"column_start":23,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.1.3/src/usage.rs","byte_start":66202,"byte_end":66213,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":647},"to":{"krate":4294967295,"index":4294967295}}]}