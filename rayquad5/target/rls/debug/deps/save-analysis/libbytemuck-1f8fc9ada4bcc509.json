{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=1f8fc9ada4bcc509","-C","extra-filename=-1f8fc9ada4bcc509","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps/libbytemuck-1f8fc9ada4bcc509.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[6234400421790325621,5390850689647829091]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":0,"byte_end":13925,"line_start":1,"line_end":442,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1894,"byte_end":1898,"line_start":51,"line_end":51,"column_start":11,"column_end":15},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1902,"byte_end":1908,"line_start":51,"line_end":51,"column_start":19,"column_end":25},"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":0,"byte_end":13925,"line_start":1,"line_end":442,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":561},{"krate":0,"index":582},{"krate":0,"index":580},{"krate":0,"index":579},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":570},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"! This crate gives small utilities for casting between plain data types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":35,"byte_end":109,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":110,"byte_end":113,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! ## Basics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":114,"byte_end":127,"line_start":6,"line_end":6,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":128,"byte_end":131,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":132,"byte_end":205,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"! functions:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":206,"byte_end":220,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":221,"byte_end":224,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! * `T` uses [`cast`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":225,"byte_end":248,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"! * `&T` uses [`cast_ref`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":249,"byte_end":277,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"! * `&mut T` uses [`cast_mut`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":278,"byte_end":310,"line_start":13,"line_end":13,"column_start":1,"column_end":33}},{"value":"! * `&[T]` uses [`cast_slice`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":311,"byte_end":343,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"! * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":344,"byte_end":384,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":385,"byte_end":388,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":389,"byte_end":464,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"! casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":465,"byte_end":544,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"! isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":545,"byte_end":625,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"! will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":626,"byte_end":705,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"! invalid input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":706,"byte_end":724,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":725,"byte_end":728,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ## Using Your Own Types","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":729,"byte_end":756,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":757,"byte_end":760,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":761,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"! sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":833,"byte_end":873,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":874,"byte_end":877,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":878,"byte_end":953,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"! traits for your type and then they'll have full casting support. However,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":954,"byte_end":1031,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"! these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1032,"byte_end":1109,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"! before adding the them to your own types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1110,"byte_end":1155,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1156,"byte_end":1159,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Features","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1160,"byte_end":1175,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1176,"byte_end":1179,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1180,"byte_end":1260,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"!   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1261,"byte_end":1340,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"!   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1341,"byte_end":1420,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"!   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":1421,"byte_end":1491,"line_start":38,"line_end":38,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14400,"byte_end":14408,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":13942,"byte_end":13993,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":13994,"byte_end":14028,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14029,"byte_end":14032,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14033,"byte_end":14096,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14097,"byte_end":14153,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14154,"byte_end":14157,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14158,"byte_end":14171,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14172,"byte_end":14175,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14176,"byte_end":14217,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14218,"byte_end":14265,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14266,"byte_end":14339,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14340,"byte_end":14382,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14688,"byte_end":14694,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"fn () -> Self","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14420,"byte_end":14460,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14463,"byte_end":14466,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14469,"byte_end":14544,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14547,"byte_end":14625,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14628,"byte_end":14670,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14673,"byte_end":14682,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19570,"byte_end":19573,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18274,"byte_end":18312,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18313,"byte_end":18316,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18317,"byte_end":18394,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18395,"byte_end":18474,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18475,"byte_end":18555,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18556,"byte_end":18574,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18575,"byte_end":18578,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18579,"byte_end":18655,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18656,"byte_end":18727,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18728,"byte_end":18802,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18803,"byte_end":18821,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18822,"byte_end":18825,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18826,"byte_end":18839,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18840,"byte_end":18843,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18844,"byte_end":18884,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18885,"byte_end":18932,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":18933,"byte_end":19011,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19012,"byte_end":19040,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any padding bytes, either in the middle or on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19041,"byte_end":19118,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19119,"byte_end":19199,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19200,"byte_end":19280,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19281,"byte_end":19296,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19297,"byte_end":19351,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19352,"byte_end":19427,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19428,"byte_end":19507,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19508,"byte_end":19552,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24889,"byte_end":24899,"line_start":79,"line_end":79,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":21921,"byte_end":21949,"line_start":4,"line_end":4,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":21950,"byte_end":21953,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":21954,"byte_end":22029,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22030,"byte_end":22096,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22097,"byte_end":22141,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22142,"byte_end":22145,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22146,"byte_end":22225,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22226,"byte_end":22306,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22307,"byte_end":22369,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22370,"byte_end":22373,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22374,"byte_end":22452,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22453,"byte_end":22528,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22529,"byte_end":22557,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22558,"byte_end":22561,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22562,"byte_end":22575,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22576,"byte_end":22579,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22580,"byte_end":22587,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22588,"byte_end":22619,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22620,"byte_end":22635,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22636,"byte_end":22680,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22681,"byte_end":22695,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22696,"byte_end":22708,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22709,"byte_end":22721,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22722,"byte_end":22734,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22735,"byte_end":22747,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22748,"byte_end":22760,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22761,"byte_end":22766,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22767,"byte_end":22803,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22804,"byte_end":22824,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22825,"byte_end":22866,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22867,"byte_end":22908,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22909,"byte_end":22914,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22915,"byte_end":22969,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":22970,"byte_end":23013,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23014,"byte_end":23055,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23056,"byte_end":23063,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23064,"byte_end":23076,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23077,"byte_end":23080,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23081,"byte_end":23154,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23155,"byte_end":23168,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23169,"byte_end":23172,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23173,"byte_end":23250,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23251,"byte_end":23330,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23331,"byte_end":23385,"line_start":47,"line_end":47,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23386,"byte_end":23389,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23390,"byte_end":23470,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23471,"byte_end":23493,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23494,"byte_end":23497,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23498,"byte_end":23578,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23579,"byte_end":23635,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23636,"byte_end":23639,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23640,"byte_end":23715,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23716,"byte_end":23788,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23789,"byte_end":23858,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23859,"byte_end":23862,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23863,"byte_end":23941,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":23942,"byte_end":24018,"line_start":60,"line_end":60,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24019,"byte_end":24030,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24031,"byte_end":24034,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24035,"byte_end":24107,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24108,"byte_end":24186,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24187,"byte_end":24263,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24264,"byte_end":24343,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24344,"byte_end":24347,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24348,"byte_end":24420,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24421,"byte_end":24486,"line_start":69,"line_end":69,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24487,"byte_end":24490,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24491,"byte_end":24568,"line_start":71,"line_end":71,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24569,"byte_end":24591,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24592,"byte_end":24595,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24596,"byte_end":24675,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24676,"byte_end":24709,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24710,"byte_end":24713,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24714,"byte_end":24791,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24792,"byte_end":24871,"line_start":78,"line_end":78,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25724,"byte_end":25727,"line_start":97,"line_end":97,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24920,"byte_end":24991,"line_start":80,"line_end":80,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24994,"byte_end":25003,"line_start":81,"line_end":81,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25006,"byte_end":25009,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25012,"byte_end":25084,"line_start":83,"line_end":83,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25087,"byte_end":25153,"line_start":84,"line_end":84,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25156,"byte_end":25224,"line_start":85,"line_end":85,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25227,"byte_end":25269,"line_start":86,"line_end":86,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25272,"byte_end":25275,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25278,"byte_end":25351,"line_start":88,"line_end":88,"column_start":3,"column_end":76}},{"value":"/   use `type Int = u8`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25354,"byte_end":25380,"line_start":89,"line_end":89,"column_start":3,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25383,"byte_end":25386,"line_start":90,"line_end":90,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25389,"byte_end":25458,"line_start":91,"line_end":91,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25461,"byte_end":25537,"line_start":92,"line_end":92,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25540,"byte_end":25609,"line_start":93,"line_end":93,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25612,"byte_end":25650,"line_start":94,"line_end":94,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25653,"byte_end":25656,"line_start":95,"line_end":95,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25659,"byte_end":25716,"line_start":96,"line_end":96,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25818,"byte_end":25827,"line_start":100,"line_end":100,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25744,"byte_end":25809,"line_start":99,"line_end":99,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25917,"byte_end":25926,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25843,"byte_end":25908,"line_start":102,"line_end":102,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26591,"byte_end":26603,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"fn (value: Self::Int) -> Option<Self>","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":25942,"byte_end":26010,"line_start":105,"line_end":105,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26013,"byte_end":26076,"line_start":106,"line_end":106,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26079,"byte_end":26082,"line_start":107,"line_end":107,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26085,"byte_end":26159,"line_start":108,"line_end":108,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26162,"byte_end":26229,"line_start":109,"line_end":109,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26232,"byte_end":26300,"line_start":110,"line_end":110,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26303,"byte_end":26306,"line_start":111,"line_end":111,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26309,"byte_end":26321,"line_start":112,"line_end":112,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26324,"byte_end":26327,"line_start":113,"line_end":113,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26330,"byte_end":26403,"line_start":114,"line_end":114,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26406,"byte_end":26452,"line_start":115,"line_end":115,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26455,"byte_end":26458,"line_start":116,"line_end":116,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26461,"byte_end":26535,"line_start":117,"line_end":117,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26538,"byte_end":26573,"line_start":118,"line_end":118,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":26576,"byte_end":26585,"line_start":119,"line_end":119,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":28154,"byte_end":28166,"line_start":155,"line_end":155,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"fn (self) -> Self::Int","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27470,"byte_end":27545,"line_start":139,"line_end":139,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27548,"byte_end":27624,"line_start":140,"line_end":140,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27627,"byte_end":27639,"line_start":141,"line_end":141,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27642,"byte_end":27645,"line_start":142,"line_end":142,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27648,"byte_end":27722,"line_start":143,"line_end":143,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27725,"byte_end":27792,"line_start":144,"line_end":144,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27795,"byte_end":27863,"line_start":145,"line_end":145,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27866,"byte_end":27869,"line_start":146,"line_end":146,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27872,"byte_end":27884,"line_start":147,"line_end":147,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27887,"byte_end":27890,"line_start":148,"line_end":148,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27893,"byte_end":27966,"line_start":149,"line_end":149,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":27969,"byte_end":28015,"line_start":150,"line_end":150,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":28018,"byte_end":28021,"line_start":151,"line_end":151,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":28024,"byte_end":28098,"line_start":152,"line_end":152,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":28101,"byte_end":28136,"line_start":153,"line_end":153,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":28139,"byte_end":28148,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37694,"byte_end":37712,"line_start":83,"line_end":83,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Wrapped: ?Sized>","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"decl_id":null,"docs":" A trait which indicates that a type is a `repr(transparent)` wrapper around\n the `Wrapped` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `repr(transparent)` wrapper around","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":34886,"byte_end":34965,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the `Wrapped` value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":34966,"byte_end":34990,"line_start":4,"line_end":4,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":34991,"byte_end":34994,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely creating references to `T` from those to the `Wrapped`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":34995,"byte_end":35072,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ type, using the `wrap_ref` and `wrap_mut` functions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35073,"byte_end":35129,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35130,"byte_end":35133,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35134,"byte_end":35146,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35147,"byte_end":35150,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35151,"byte_end":35220,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35221,"byte_end":35224,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Wrapped>`:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35225,"byte_end":35298,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35299,"byte_end":35302,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ 1. Wrapper must be a `#[repr(transparent)]` wrapper around `Wrapped`. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35303,"byte_end":35381,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/    either means that it must be a `#[repr(transparent)]` struct which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35382,"byte_end":35455,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/    contains a either a field of type `Wrapped` (or a field of some other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35456,"byte_end":35532,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/    transparent wrapper for `Wrapped`) as the only non-ZST field.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35533,"byte_end":35601,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35602,"byte_end":35605,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Wrapped` field must be trivially","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35606,"byte_end":35674,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/    constructable ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35675,"byte_end":35750,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35751,"byte_end":35754,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35755,"byte_end":35829,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/    `Wrapped`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35830,"byte_end":35847,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35848,"byte_end":35926,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":35927,"byte_end":36005,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36006,"byte_end":36009,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 4. The `wrap_ref` and `wrap_mut` functions on `TransparentWrapper` may not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36010,"byte_end":36088,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/    be overridden.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36089,"byte_end":36110,"line_start":29,"line_end":29,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36111,"byte_end":36114,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36115,"byte_end":36129,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36130,"byte_end":36133,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the wrapped type which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36134,"byte_end":36211,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ are required for safety, it's responsible for ensuring those still hold --","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36212,"byte_end":36290,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ this generally requires preventing access to instances of the wrapped type,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36291,"byte_end":36370,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ as implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36371,"byte_end":36443,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36444,"byte_end":36481,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36482,"byte_end":36485,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36486,"byte_end":36564,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36565,"byte_end":36633,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36634,"byte_end":36637,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36638,"byte_end":36652,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36653,"byte_end":36656,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36657,"byte_end":36669,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36670,"byte_end":36673,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36674,"byte_end":36681,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36682,"byte_end":36719,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36720,"byte_end":36744,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36745,"byte_end":36774,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36775,"byte_end":36778,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36779,"byte_end":36803,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36804,"byte_end":36837,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36838,"byte_end":36841,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36842,"byte_end":36905,"line_start":54,"line_end":54,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36906,"byte_end":36909,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36910,"byte_end":36969,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":36970,"byte_end":37008,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/ let wrapped_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37009,"byte_end":37071,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37072,"byte_end":37075,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37076,"byte_end":37103,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37104,"byte_end":37150,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/ let wrapped_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37151,"byte_end":37225,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37226,"byte_end":37229,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # let _ = (wrapped_ref, wrapped_mut); // silence warnings","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37230,"byte_end":37291,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37292,"byte_end":37299,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37300,"byte_end":37303,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37304,"byte_end":37343,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37344,"byte_end":37347,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37348,"byte_end":37355,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37356,"byte_end":37393,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37394,"byte_end":37397,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37398,"byte_end":37422,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37423,"byte_end":37448,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37449,"byte_end":37452,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37453,"byte_end":37511,"line_start":75,"line_end":75,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37512,"byte_end":37515,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37516,"byte_end":37559,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37560,"byte_end":37593,"line_start":78,"line_end":78,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37594,"byte_end":37597,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37598,"byte_end":37628,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37629,"byte_end":37668,"line_start":81,"line_end":81,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37669,"byte_end":37676,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":38087,"byte_end":38095,"line_start":91,"line_end":91,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"fn (s: &Wrapped) -> &Self","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Convert a reference to a wrapped type into a reference to the wrapper.","sig":null,"attributes":[{"value":"/ Convert a reference to a wrapped type into a reference to the wrapper.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37734,"byte_end":37808,"line_start":84,"line_end":84,"column_start":3,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37811,"byte_end":37814,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::wrap_ref(...)` in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37817,"byte_end":37892,"line_start":86,"line_end":86,"column_start":3,"column_end":78}},{"value":"/ your code. It is part of the safety contract for this trait that if you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37895,"byte_end":37970,"line_start":87,"line_end":87,"column_start":3,"column_end":78}},{"value":"/ implement `TransparentWrapper<_>` for your type you **must not** override","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":37973,"byte_end":38050,"line_start":88,"line_end":88,"column_start":3,"column_end":80}},{"value":"/ this method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":38053,"byte_end":38069,"line_start":89,"line_end":89,"column_start":3,"column_end":19}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":38072,"byte_end":38081,"line_start":90,"line_end":90,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":39244,"byte_end":39252,"line_start":116,"line_end":116,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"fn (s: &mut Wrapped) -> &mut Self","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Convert a mut reference to a wrapped type into a mut reference to the\n wrapper.","sig":null,"attributes":[{"value":"/ Convert a mut reference to a wrapped type into a mut reference to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":38883,"byte_end":38956,"line_start":109,"line_end":109,"column_start":3,"column_end":76}},{"value":"/ wrapper.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":38959,"byte_end":38971,"line_start":110,"line_end":110,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":38974,"byte_end":38977,"line_start":111,"line_end":111,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::wrap_mut(...)` in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":38980,"byte_end":39055,"line_start":112,"line_end":112,"column_start":3,"column_end":78}},{"value":"/ your code. It is part of the safety contract for this trait that if you implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":39058,"byte_end":39143,"line_start":113,"line_end":113,"column_start":3,"column_end":88}},{"value":"/ `TransparentWrapper<_>` for your type you **must not** override this method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":39146,"byte_end":39226,"line_start":114,"line_end":114,"column_start":3,"column_end":83}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":39229,"byte_end":39238,"line_start":115,"line_end":115,"column_start":3,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3625,"byte_end":3633,"line_start":114,"line_end":114,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"fn <T> (t: &T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3416,"byte_end":3450,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3451,"byte_end":3454,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3455,"byte_end":3533,"line_start":111,"line_end":111,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3534,"byte_end":3607,"line_start":112,"line_end":112,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3608,"byte_end":3617,"line_start":113,"line_end":113,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3990,"byte_end":4002,"line_start":126,"line_end":126,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"fn <T> (t: &mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3773,"byte_end":3815,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3816,"byte_end":3819,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3820,"byte_end":3898,"line_start":123,"line_end":123,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3899,"byte_end":3972,"line_start":124,"line_end":124,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":3973,"byte_end":3982,"line_start":125,"line_end":125,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4284,"byte_end":4294,"line_start":139,"line_end":139,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"fn <T> (s: &[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4154,"byte_end":4188,"line_start":133,"line_end":133,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4189,"byte_end":4192,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4193,"byte_end":4206,"line_start":135,"line_end":135,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4207,"byte_end":4210,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4211,"byte_end":4266,"line_start":137,"line_end":137,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4267,"byte_end":4276,"line_start":138,"line_end":138,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4567,"byte_end":4581,"line_start":152,"line_end":152,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"fn <T> (s: &mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4425,"byte_end":4467,"line_start":146,"line_end":146,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4468,"byte_end":4471,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4472,"byte_end":4485,"line_start":148,"line_end":148,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4486,"byte_end":4489,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4490,"byte_end":4549,"line_start":150,"line_end":150,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4550,"byte_end":4559,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4922,"byte_end":4936,"line_start":166,"line_end":166,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"fn <T> (s: &[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4728,"byte_end":4762,"line_start":159,"line_end":159,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4763,"byte_end":4766,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4767,"byte_end":4781,"line_start":161,"line_end":161,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4782,"byte_end":4785,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4786,"byte_end":4835,"line_start":163,"line_end":163,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4836,"byte_end":4904,"line_start":164,"line_end":164,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":4905,"byte_end":4914,"line_start":165,"line_end":165,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5443,"byte_end":5461,"line_start":183,"line_end":183,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"fn <T> (s: &mut [u8]) -> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5241,"byte_end":5283,"line_start":176,"line_end":176,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5284,"byte_end":5287,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5288,"byte_end":5302,"line_start":178,"line_end":178,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5303,"byte_end":5306,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5307,"byte_end":5356,"line_start":180,"line_end":180,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5357,"byte_end":5425,"line_start":181,"line_end":181,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5426,"byte_end":5435,"line_start":182,"line_end":182,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":562},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6059,"byte_end":6099,"line_start":200,"line_end":200,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5936,"byte_end":6008,"line_start":198,"line_end":198,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6011,"byte_end":6056,"line_start":199,"line_end":199,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":564},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6285,"byte_end":6309,"line_start":204,"line_end":204,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6103,"byte_end":6171,"line_start":201,"line_end":201,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6174,"byte_end":6249,"line_start":202,"line_end":202,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6252,"byte_end":6282,"line_start":203,"line_end":203,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":566},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6530,"byte_end":6542,"line_start":208,"line_end":208,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6313,"byte_end":6388,"line_start":205,"line_end":205,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6391,"byte_end":6464,"line_start":206,"line_end":206,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6467,"byte_end":6527,"line_start":207,"line_end":207,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":568},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6833,"byte_end":6850,"line_start":215,"line_end":215,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6546,"byte_end":6620,"line_start":209,"line_end":209,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6623,"byte_end":6654,"line_start":210,"line_end":210,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6657,"byte_end":6660,"line_start":211,"line_end":211,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6663,"byte_end":6739,"line_start":212,"line_end":212,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6742,"byte_end":6817,"line_start":213,"line_end":213,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6820,"byte_end":6830,"line_start":214,"line_end":214,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":561},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5919,"byte_end":5931,"line_start":197,"line_end":197,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"PodCastError::{TargetAlignmentGreaterAndInputNotAligned, OutputSliceWouldHaveSlop, SizeMismatch, AlignmentMismatch}","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":5785,"byte_end":5858,"line_start":195,"line_end":195,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7220,"byte_end":7224,"line_start":231,"line_end":231,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"fn <A, B> (a: A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7081,"byte_end":7102,"line_start":225,"line_end":225,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7103,"byte_end":7106,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7107,"byte_end":7120,"line_start":227,"line_end":227,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7121,"byte_end":7124,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7125,"byte_end":7202,"line_start":229,"line_end":229,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7203,"byte_end":7212,"line_start":230,"line_end":230,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7544,"byte_end":7552,"line_start":245,"line_end":245,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"fn <A, B> (a: &mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7418,"byte_end":7450,"line_start":239,"line_end":239,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7451,"byte_end":7454,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7455,"byte_end":7468,"line_start":241,"line_end":241,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7469,"byte_end":7472,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7473,"byte_end":7526,"line_start":243,"line_end":243,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7527,"byte_end":7536,"line_start":244,"line_end":244,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8072,"byte_end":8080,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"fn <A, B> (a: &A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7954,"byte_end":7978,"line_start":260,"line_end":260,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7979,"byte_end":7982,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7983,"byte_end":7996,"line_start":262,"line_end":262,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":7997,"byte_end":8000,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8001,"byte_end":8054,"line_start":264,"line_end":264,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8055,"byte_end":8064,"line_start":265,"line_end":265,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8598,"byte_end":8608,"line_start":287,"line_end":287,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"fn <A, B> (a: &[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8474,"byte_end":8502,"line_start":281,"line_end":281,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8503,"byte_end":8506,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8507,"byte_end":8520,"line_start":283,"line_end":283,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8521,"byte_end":8524,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8525,"byte_end":8580,"line_start":285,"line_end":285,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8581,"byte_end":8590,"line_start":286,"line_end":286,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8884,"byte_end":8898,"line_start":300,"line_end":300,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"fn <A, B> (a: &mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8748,"byte_end":8784,"line_start":294,"line_end":294,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8785,"byte_end":8788,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8789,"byte_end":8802,"line_start":296,"line_end":296,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8803,"byte_end":8806,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8807,"byte_end":8866,"line_start":298,"line_end":298,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":8867,"byte_end":8876,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9129,"byte_end":9141,"line_start":309,"line_end":309,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"fn <T, U> (vals: &[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9054,"byte_end":9111,"line_start":307,"line_end":307,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9112,"byte_end":9121,"line_start":308,"line_end":308,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9310,"byte_end":9326,"line_start":315,"line_end":315,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"fn <T, U> (vals: &mut [T]) -> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9231,"byte_end":9292,"line_start":313,"line_end":313,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9293,"byte_end":9302,"line_start":314,"line_end":314,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9828,"byte_end":9836,"line_start":332,"line_end":332,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"fn <A, B> (a: A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9441,"byte_end":9470,"line_start":321,"line_end":321,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9471,"byte_end":9474,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9475,"byte_end":9552,"line_start":323,"line_end":323,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9553,"byte_end":9632,"line_start":324,"line_end":324,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9633,"byte_end":9711,"line_start":325,"line_end":325,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9712,"byte_end":9731,"line_start":326,"line_end":326,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9732,"byte_end":9735,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9736,"byte_end":9750,"line_start":328,"line_end":328,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9751,"byte_end":9754,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9755,"byte_end":9810,"line_start":330,"line_end":330,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":9811,"byte_end":9820,"line_start":331,"line_end":331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10224,"byte_end":10236,"line_start":347,"line_end":347,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"fn <A, B> (a: &A) -> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10031,"byte_end":10067,"line_start":340,"line_end":340,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10068,"byte_end":10071,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10072,"byte_end":10086,"line_start":342,"line_end":342,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10087,"byte_end":10090,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10091,"byte_end":10143,"line_start":344,"line_end":344,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10144,"byte_end":10206,"line_start":345,"line_end":345,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10207,"byte_end":10216,"line_start":346,"line_end":346,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10814,"byte_end":10826,"line_start":365,"line_end":365,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"fn <A, B> (a: &mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10712,"byte_end":10756,"line_start":361,"line_end":361,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10757,"byte_end":10760,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10761,"byte_end":10796,"line_start":363,"line_end":363,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":10797,"byte_end":10806,"line_start":364,"line_end":364,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":12066,"byte_end":12080,"line_start":395,"line_end":395,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"fn <A, B> (a: &[A]) -> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11308,"byte_end":11381,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11382,"byte_end":11385,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11386,"byte_end":11445,"line_start":381,"line_end":381,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11446,"byte_end":11515,"line_start":382,"line_end":382,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11516,"byte_end":11519,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11520,"byte_end":11534,"line_start":384,"line_end":384,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11535,"byte_end":11538,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11539,"byte_end":11619,"line_start":386,"line_end":386,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11620,"byte_end":11640,"line_start":387,"line_end":387,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11641,"byte_end":11718,"line_start":388,"line_end":388,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11719,"byte_end":11795,"line_start":389,"line_end":389,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11796,"byte_end":11876,"line_start":390,"line_end":390,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11877,"byte_end":11901,"line_start":391,"line_end":391,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":11902,"byte_end":12027,"line_start":392,"line_end":392,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":12028,"byte_end":12048,"line_start":393,"line_end":393,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":12049,"byte_end":12058,"line_start":394,"line_end":394,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":13043,"byte_end":13061,"line_start":419,"line_end":419,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"fn <A, B> (a: &mut [A]) -> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":12897,"byte_end":12969,"line_start":414,"line_end":414,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":12970,"byte_end":12982,"line_start":415,"line_end":415,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":12983,"byte_end":12986,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":12987,"byte_end":13025,"line_start":417,"line_end":417,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":13026,"byte_end":13035,"line_start":418,"line_end":418,"column_start":1,"column_end":10}}]}],"impls":[{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15335,"byte_end":15343,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15376,"byte_end":15382,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15422,"byte_end":15428,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15469,"byte_end":15475,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15516,"byte_end":15522,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15563,"byte_end":15569,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15611,"byte_end":15617,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15660,"byte_end":15666,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15706,"byte_end":15712,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15753,"byte_end":15759,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15800,"byte_end":15806,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15847,"byte_end":15853,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15895,"byte_end":15901,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":16026,"byte_end":16032,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":16086,"byte_end":16097,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":16142,"byte_end":16154,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":17874,"byte_end":17881,"line_start":132,"line_end":132,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":17949,"byte_end":17955,"line_start":134,"line_end":134,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18023,"byte_end":18030,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18098,"byte_end":18105,"line_start":138,"line_end":138,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18173,"byte_end":18179,"line_start":140,"line_end":140,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18247,"byte_end":18254,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20041,"byte_end":20049,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20077,"byte_end":20083,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20118,"byte_end":20124,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20160,"byte_end":20166,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20202,"byte_end":20208,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20244,"byte_end":20250,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20287,"byte_end":20293,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20331,"byte_end":20337,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20372,"byte_end":20378,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20414,"byte_end":20420,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20456,"byte_end":20462,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20498,"byte_end":20504,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20541,"byte_end":20547,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20684,"byte_end":20690,"line_start":63,"line_end":63,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20734,"byte_end":20745,"line_start":64,"line_end":64,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20780,"byte_end":20792,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21504,"byte_end":21511,"line_start":89,"line_end":89,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21574,"byte_end":21580,"line_start":91,"line_end":91,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21643,"byte_end":21650,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21713,"byte_end":21720,"line_start":95,"line_end":95,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21783,"byte_end":21789,"line_start":97,"line_end":97,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21852,"byte_end":21859,"line_start":99,"line_end":99,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":40096,"byte_end":40104,"line_start":135,"line_end":135,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6882,"byte_end":6894,"line_start":217,"line_end":217,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":14410,"byte_end":14415,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":1888},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15335,"byte_end":15343,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":11199},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15376,"byte_end":15382,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15422,"byte_end":15428,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15469,"byte_end":15475,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15516,"byte_end":15522,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15563,"byte_end":15569,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15611,"byte_end":15617,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15660,"byte_end":15666,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15706,"byte_end":15712,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15753,"byte_end":15759,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15800,"byte_end":15806,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15847,"byte_end":15853,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":15895,"byte_end":15901,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":16026,"byte_end":16032,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":16086,"byte_end":16097,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":1901},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":16142,"byte_end":16154,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":15151},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":17874,"byte_end":17881,"line_start":132,"line_end":132,"column_start":34,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":34041},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":17949,"byte_end":17955,"line_start":134,"line_end":134,"column_start":34,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":34050},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18023,"byte_end":18030,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":34061},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18098,"byte_end":18105,"line_start":138,"line_end":138,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":34070},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18173,"byte_end":18179,"line_start":140,"line_end":140,"column_start":34,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":34081},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/zeroable.rs","byte_start":18247,"byte_end":18254,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":34096},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19575,"byte_end":19583,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":14},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":19586,"byte_end":19590,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":1893},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20041,"byte_end":20049,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":11199},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20077,"byte_end":20083,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20118,"byte_end":20124,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20160,"byte_end":20166,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20202,"byte_end":20208,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20244,"byte_end":20250,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20287,"byte_end":20293,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20331,"byte_end":20337,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20372,"byte_end":20378,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20414,"byte_end":20420,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20456,"byte_end":20462,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20498,"byte_end":20504,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20541,"byte_end":20547,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20684,"byte_end":20690,"line_start":63,"line_end":63,"column_start":33,"column_end":39},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":29311},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20734,"byte_end":20745,"line_start":64,"line_end":64,"column_start":29,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":1901},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":20780,"byte_end":20792,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":15151},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21504,"byte_end":21511,"line_start":89,"line_end":89,"column_start":29,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":34041},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21574,"byte_end":21580,"line_start":91,"line_end":91,"column_start":29,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":34050},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21643,"byte_end":21650,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":34061},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21713,"byte_end":21720,"line_start":95,"line_end":95,"column_start":29,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":34070},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21783,"byte_end":21789,"line_start":97,"line_end":97,"column_start":29,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":34081},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/pod.rs","byte_start":21852,"byte_end":21859,"line_start":99,"line_end":99,"column_start":29,"column_end":36},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":34096},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/contiguous.rs","byte_start":24901,"byte_end":24905,"line_start":79,"line_end":79,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1893},"to":{"krate":0,"index":162}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/transparent.rs","byte_start":40096,"byte_end":40104,"line_start":135,"line_end":135,"column_start":53,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":11199},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.4.1/src/lib.rs","byte_start":6882,"byte_end":6894,"line_start":217,"line_end":217,"column_start":29,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":561},"to":{"krate":1,"index":5983}}]}