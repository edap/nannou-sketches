{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","weezl","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=5f5f77e6aff94d89","-C","extra-filename=-5f5f77e6aff94d89","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps/libweezl-5f5f77e6aff94d89.rmeta"},"prelude":{"crate_id":{"name":"weezl","disambiguator":[10162027269754317538,7804571251057661068]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":0,"byte_end":2516,"line_start":1,"line_end":68,"column_start":1,"column_end":35}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2422,"byte_end":2434,"line_start":66,"line_end":66,"column_start":23,"column_end":35},"alias_span":null,"name":"BufferResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2436,"byte_end":2445,"line_start":66,"line_end":66,"column_start":37,"column_end":46},"alias_span":null,"name":"LzwStatus","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2447,"byte_end":2455,"line_start":66,"line_end":66,"column_start":48,"column_end":56},"alias_span":null,"name":"LzwError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2503,"byte_end":2515,"line_start":68,"line_end":68,"column_start":22,"column_end":34},"alias_span":null,"name":"StreamResult","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":0,"byte_end":2516,"line_start":1,"line_end":68,"column_start":1,"column_end":35},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":12},{"krate":0,"index":151},{"krate":0,"index":295},{"krate":0,"index":307},{"krate":0,"index":311}],"decl_id":null,"docs":" # LZW decoder and encoder","sig":null,"attributes":[{"value":"! # LZW decoder and encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":0,"byte_end":29,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":30,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crates provides an `Encoder` and a `Decoder` in their respective modules. The code words","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":34,"byte_end":131,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"! are written from and to bit byte slices (or streams) where it is possible to write either the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":132,"byte_end":229,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"! most or least significant bits first. The maximum possible code size is 12 bits, the smallest","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":230,"byte_end":327,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"! available code size is 2 bits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":328,"byte_end":362,"line_start":6,"line_end":6,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":363,"byte_end":366,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The de- and encoder expect the LZW stream to start with a clear code and end with an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":367,"byte_end":455,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"! end code which are defined as follows:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":456,"byte_end":498,"line_start":9,"line_end":9,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":499,"byte_end":502,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"!  * `CLEAR_CODE == 1 << min_code_size`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":503,"byte_end":544,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"!  * `END_CODE   == CLEAR_CODE + 1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":545,"byte_end":582,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":583,"byte_end":586,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! For optimal performance, all buffers and input and output slices should be as large as possible","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":587,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"! and at least 2048 bytes long. This extends to input streams which should have similarly sized","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":687,"byte_end":784,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"! buffers. This library uses Rust's standard allocation interfaces (`Box` and `Vec` to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":785,"byte_end":876,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"! precise). Since there are no ways to handle allocation errors it is not recommended to operate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":877,"byte_end":975,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"! it on 16-bit targets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":976,"byte_end":1001,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1002,"byte_end":1005,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! Exemplary use of the encoder:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1006,"byte_end":1039,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1040,"byte_end":1043,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! use weezl::{BitOrder, encode::Encoder};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1137,"byte_end":1180,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"! let size = 8;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1181,"byte_end":1198,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"! let data = b\"TOBEORNOTTOBEORTOBEORNOT\";","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1199,"byte_end":1242,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"! let mut compressed = vec![];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1243,"byte_end":1275,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1276,"byte_end":1279,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! let mut enc = Encoder::new(BitOrder::Msb, size);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1280,"byte_end":1332,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"! let result = enc.into_stream(&mut compressed).encode(&data[..]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1333,"byte_end":1401,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"! result.status.unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1402,"byte_end":1429,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1430,"byte_end":1437,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1438,"byte_end":1441,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! The main algorithm can be used in `no_std` as well, although it requires an allocator. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1442,"byte_end":1537,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"! restriction might be lifted at a later stage. For this you should deactivate the `std` feature.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1538,"byte_end":1637,"line_start":35,"line_end":35,"column_start":1,"column_end":100}},{"value":"! The main interfaces stay intact but the `into_stream` combinator is no available.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1638,"byte_end":1723,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1767,"byte_end":1790,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"forbid(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":1791,"byte_end":1815,"line_start":39,"line_end":39,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2233,"byte_end":2236,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Msb","qualname":"::BitOrder::Msb","value":"BitOrder::Msb","parent":{"krate":0,"index":7},"children":[],"decl_id":null,"docs":" The most significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The most significant bit is processed first.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2180,"byte_end":2228,"line_start":54,"line_end":54,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2296,"byte_end":2299,"line_start":57,"line_end":57,"column_start":5,"column_end":8},"name":"Lsb","qualname":"::BitOrder::Lsb","value":"BitOrder::Lsb","parent":{"krate":0,"index":7},"children":[],"decl_id":null,"docs":" The least significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The least significant bit is processed first.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2242,"byte_end":2291,"line_start":56,"line_end":56,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":7},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2165,"byte_end":2173,"line_start":53,"line_end":53,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"BitOrder::{Msb, Lsb}","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":10}],"decl_id":null,"docs":" The order of bits in bytes.\n","sig":null,"attributes":[{"value":"/ The order of bits in bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2124,"byte_end":2155,"line_start":52,"line_end":52,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":37},{"krate":0,"index":42},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":312},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":328},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":333},{"krate":0,"index":69},{"krate":0,"index":336},{"krate":0,"index":343},{"krate":0,"index":342},{"krate":0,"index":347},{"krate":0,"index":351},{"krate":0,"index":350},{"krate":0,"index":70},{"krate":0,"index":81},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":106},{"krate":0,"index":113},{"krate":0,"index":123},{"krate":0,"index":133},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":149}],"decl_id":null,"docs":" A module for all encoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2304,"byte_end":2329,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"! A module for all encoding needs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":2518,"byte_end":2554,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":30},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3116,"byte_end":3123,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encode::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":31}],"decl_id":null,"docs":" The state for encoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for encoding data with an LZW algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":2827,"byte_end":2881,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":2882,"byte_end":2885,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":2886,"byte_end":2983,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose any written","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":2984,"byte_end":3079,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ data in the process.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3080,"byte_end":3104,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3555,"byte_end":3565,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::encode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" A encoding stream sink.","sig":null,"attributes":[{"value":"/ A encoding stream sink.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3378,"byte_end":3405,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3406,"byte_end":3409,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See [`Encoder::into_stream`] on how to create this type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3410,"byte_end":3470,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3471,"byte_end":3474,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::into_stream`]: struct.Encoder.html#method.into_stream","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":3475,"byte_end":3543,"line_start":27,"line_end":27,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6608,"byte_end":6611,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"fn (order: BitOrder, size: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new encoder with the specified bit order and symbol size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6267,"byte_end":6337,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6342,"byte_end":6345,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6350,"byte_end":6443,"line_start":134,"line_end":134,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to encode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6448,"byte_end":6542,"line_start":135,"line_end":135,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6547,"byte_end":6596,"line_start":136,"line_end":136,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7332,"byte_end":7353,"line_start":154,"line_end":154,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Encoder>::with_tiff_size_switch","value":"fn (order: BitOrder, size: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible encoder with the specified bit order and symbol size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6980,"byte_end":7062,"line_start":149,"line_end":149,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7067,"byte_end":7070,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7075,"byte_end":7168,"line_start":151,"line_end":151,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7173,"byte_end":7266,"line_start":152,"line_end":152,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7271,"byte_end":7320,"line_start":153,"line_end":153,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8637,"byte_end":8649,"line_start":186,"line_end":186,"column_start":12,"column_end":24},"name":"encode_bytes","qualname":"<Encoder>::encode_bytes","value":"fn (&mut self, inp: &[u8], out: &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Encode some bytes from `inp` into `out`.","sig":null,"attributes":[{"value":"/ Encode some bytes from `inp` into `out`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7941,"byte_end":7985,"line_start":174,"line_end":174,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7990,"byte_end":7993,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (this interface is only available with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":7998,"byte_end":8089,"line_start":176,"line_end":176,"column_start":5,"column_end":96}},{"value":"/ `std` feature) and [`finish`] for marking the input data as complete.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8094,"byte_end":8167,"line_start":177,"line_end":177,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8172,"byte_end":8175,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ When some input byte is invalid, i.e. is not smaller than `1 << size`, then that byte and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8180,"byte_end":8273,"line_start":179,"line_end":179,"column_start":5,"column_end":98}},{"value":"/ all following ones will _not_ be consumed and the `status` of the result will signal an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8278,"byte_end":8369,"line_start":180,"line_end":180,"column_start":5,"column_end":96}},{"value":"/ error. The result will also indicate that all bytes up to but not including the offending","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8374,"byte_end":8467,"line_start":181,"line_end":181,"column_start":5,"column_end":98}},{"value":"/ byte have been consumed. You may try again with a fixed byte.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8472,"byte_end":8537,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8542,"byte_end":8545,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8550,"byte_end":8590,"line_start":184,"line_end":184,"column_start":5,"column_end":45}},{"value":"/ [`finish`]: #method.finish","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8595,"byte_end":8625,"line_start":185,"line_end":185,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8833,"byte_end":8844,"line_start":192,"line_end":192,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Encoder>::into_stream","value":"fn <W> (&mut self, writer: W) -> IntoStream<'_, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a encoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a encoder into a writer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8755,"byte_end":8793,"line_start":190,"line_end":190,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8798,"byte_end":8821,"line_start":191,"line_end":191,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9439,"byte_end":9445,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mark the encoding as in the process of finishing.","sig":null,"attributes":[{"value":"/ Mark the encoding as in the process of finishing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":8956,"byte_end":9009,"line_start":196,"line_end":196,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9014,"byte_end":9017,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The next following call to `encode_bytes` which is able to consume the complete input will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9022,"byte_end":9116,"line_start":198,"line_end":198,"column_start":5,"column_end":99}},{"value":"/ also try to emit an end code. It's not recommended, but also not unsound, to use different","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9121,"byte_end":9215,"line_start":199,"line_end":199,"column_start":5,"column_end":99}},{"value":"/ byte slices in different calls from this point forward and thus to 'delay' the actual end","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9220,"byte_end":9313,"line_start":200,"line_end":200,"column_start":5,"column_end":98}},{"value":"/ of the data stream. The behaviour after the end marker has been written is unspecified but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9318,"byte_end":9412,"line_start":201,"line_end":201,"column_start":5,"column_end":99}},{"value":"/ sound.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9417,"byte_end":9427,"line_start":202,"line_end":202,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10004,"byte_end":10009,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"reset","qualname":"<Encoder>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9733,"byte_end":9762,"line_start":214,"line_end":214,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9767,"byte_end":9770,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This produce an encoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9775,"byte_end":9870,"line_start":216,"line_end":216,"column_start":5,"column_end":100}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9875,"byte_end":9962,"line_start":217,"line_end":217,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":9967,"byte_end":9992,"line_start":218,"line_end":218,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10293,"byte_end":10299,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"encode","qualname":"<IntoStream>::encode","value":"fn (&mut self, read: impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader.","sig":null,"attributes":[{"value":"/ Encode data from a reader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10122,"byte_end":10152,"line_start":226,"line_end":226,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10157,"byte_end":10160,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This will drain the supplied reader. It will not encode an end marker after all data has","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10165,"byte_end":10257,"line_start":228,"line_end":228,"column_start":5,"column_end":97}},{"value":"/ been processed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10262,"byte_end":10281,"line_start":229,"line_end":229,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10458,"byte_end":10468,"line_start":235,"line_end":235,"column_start":12,"column_end":22},"name":"encode_all","qualname":"<IntoStream>::encode_all","value":"fn (mut self, read: impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader and an end marker.\n","sig":null,"attributes":[{"value":"/ Encode data from a reader and an end marker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10398,"byte_end":10446,"line_start":234,"line_end":234,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":177},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":359},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":371},{"krate":0,"index":182},{"krate":0,"index":191},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":221},{"krate":0,"index":237},{"krate":0,"index":242},{"krate":0,"index":251},{"krate":0,"index":257},{"krate":0,"index":267},{"krate":0,"index":277},{"krate":0,"index":284},{"krate":0,"index":292}],"decl_id":null,"docs":" A module for all decoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2346,"byte_end":2371,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"! A module for all decoding needs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":26718,"byte_end":26754,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27336,"byte_end":27343,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decode::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":171}],"decl_id":null,"docs":" The state for decoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for decoding data with an LZW algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27032,"byte_end":27086,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27087,"byte_end":27090,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27091,"byte_end":27188,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose or skip any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27189,"byte_end":27284,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ already decode data in the process.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27285,"byte_end":27324,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27573,"byte_end":27583,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::decode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"decl_id":null,"docs":" A decoding stream sink.","sig":null,"attributes":[{"value":"/ A decoding stream sink.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27396,"byte_end":27423,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27424,"byte_end":27427,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`Decoder::into_stream`] on how to create this type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27428,"byte_end":27488,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27489,"byte_end":27492,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`Decoder::into_stream`]: struct.Decoder.html#method.into_stream","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":27493,"byte_end":27561,"line_start":24,"line_end":24,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30337,"byte_end":30340,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"fn (order: BitOrder, size: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new decoder with the specified bit order and symbol size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":29996,"byte_end":30066,"line_start":118,"line_end":118,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30071,"byte_end":30074,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30079,"byte_end":30172,"line_start":120,"line_end":120,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to decode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30177,"byte_end":30271,"line_start":121,"line_end":121,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30276,"byte_end":30325,"line_start":122,"line_end":122,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":31061,"byte_end":31082,"line_start":140,"line_end":140,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Decoder>::with_tiff_size_switch","value":"fn (order: BitOrder, size: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible decoder with the specified bit order and symbol size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30709,"byte_end":30791,"line_start":135,"line_end":135,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30796,"byte_end":30799,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30804,"byte_end":30897,"line_start":137,"line_end":137,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":30902,"byte_end":30995,"line_start":138,"line_end":138,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":31000,"byte_end":31049,"line_start":139,"line_end":139,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32445,"byte_end":32457,"line_start":174,"line_end":174,"column_start":12,"column_end":24},"name":"decode_bytes","qualname":"<Decoder>::decode_bytes","value":"fn (&mut self, inp: &[u8], out: &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Decode some bytes from `inp` and write result to `out`.","sig":null,"attributes":[{"value":"/ Decode some bytes from `inp` and write result to `out`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":31670,"byte_end":31729,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":31734,"byte_end":31737,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ This will consume a prefix of the input buffer and write decoded output into a prefix of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":31742,"byte_end":31834,"line_start":162,"line_end":162,"column_start":5,"column_end":97}},{"value":"/ the output buffer. See the respective fields of the return value for the count of consumed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":31839,"byte_end":31933,"line_start":163,"line_end":163,"column_start":5,"column_end":99}},{"value":"/ and written bytes. For the next call You should have adjusted the inputs accordingly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":31938,"byte_end":32027,"line_start":164,"line_end":164,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32032,"byte_end":32035,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The call will try to decode and write as many bytes of output as available. It will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32040,"byte_end":32130,"line_start":166,"line_end":166,"column_start":5,"column_end":95}},{"value":"/ much more optimized (and avoid intermediate buffering) if it is allowed to write a large","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32135,"byte_end":32227,"line_start":167,"line_end":167,"column_start":5,"column_end":97}},{"value":"/ contiguous chunk at once.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32232,"byte_end":32261,"line_start":168,"line_end":168,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32266,"byte_end":32269,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (that are only available with the `std`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32274,"byte_end":32362,"line_start":170,"line_end":170,"column_start":5,"column_end":93}},{"value":"/ feature).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32367,"byte_end":32380,"line_start":171,"line_end":171,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32385,"byte_end":32388,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32393,"byte_end":32433,"line_start":173,"line_end":173,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32641,"byte_end":32652,"line_start":180,"line_end":180,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Decoder>::into_stream","value":"fn <W> (&mut self, writer: W) -> IntoStream<'_, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a decoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a decoder into a writer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32563,"byte_end":32601,"line_start":178,"line_end":178,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32606,"byte_end":32629,"line_start":179,"line_end":179,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33057,"byte_end":33066,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"has_ended","qualname":"<Decoder>::has_ended","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the decoding has finished.","sig":null,"attributes":[{"value":"/ Check if the decoding has finished.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32764,"byte_end":32803,"line_start":184,"line_end":184,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32808,"byte_end":32811,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ No more output is produced beyond the end code that marked the finish of the stream. The","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32816,"byte_end":32908,"line_start":186,"line_end":186,"column_start":5,"column_end":97}},{"value":"/ decoder may have read additional bytes, including padding bits beyond the last code word","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":32913,"byte_end":33005,"line_start":187,"line_end":187,"column_start":5,"column_end":97}},{"value":"/ but also excess bytes provided.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33010,"byte_end":33045,"line_start":188,"line_end":188,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33955,"byte_end":33960,"line_start":211,"line_end":211,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decoder>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33685,"byte_end":33714,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33719,"byte_end":33722,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ This produce a decoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33727,"byte_end":33821,"line_start":208,"line_end":208,"column_start":5,"column_end":99}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33826,"byte_end":33913,"line_start":209,"line_end":209,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":33918,"byte_end":33943,"line_start":210,"line_end":210,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34207,"byte_end":34213,"line_start":221,"line_end":221,"column_start":12,"column_end":18},"name":"decode","qualname":"<IntoStream>::decode","value":"fn (&mut self, read: impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader.","sig":null,"attributes":[{"value":"/ Decode data from a reader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34074,"byte_end":34104,"line_start":218,"line_end":218,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34109,"byte_end":34112,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ This will read data until the stream is empty or an end marker is reached.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34117,"byte_end":34195,"line_start":220,"line_end":220,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34379,"byte_end":34389,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"decode_all","qualname":"<IntoStream>::decode_all","value":"fn (mut self, read: impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader, requiring an end marker.\n","sig":null,"attributes":[{"value":"/ Decode data from a reader, requiring an end marker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34312,"byte_end":34367,"line_start":225,"line_end":225,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62448,"byte_end":62460,"line_start":3,"line_end":3,"column_start":12,"column_end":24},"name":"BufferResult","qualname":"::error::BufferResult","value":"BufferResult { consumed_in, consumed_out, status }","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"decl_id":null,"docs":" The result of a coding operation on a pair of buffer.\n","sig":null,"attributes":[{"value":"/ The result of a coding operation on a pair of buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62312,"byte_end":62369,"line_start":1,"line_end":1,"column_start":1,"column_end":58}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62370,"byte_end":62436,"line_start":2,"line_end":2,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":297},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62531,"byte_end":62542,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"name":"consumed_in","qualname":"::error::BufferResult::consumed_in","value":"usize","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62467,"byte_end":62522,"line_start":4,"line_end":4,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62619,"byte_end":62631,"line_start":7,"line_end":7,"column_start":9,"column_end":21},"name":"consumed_out","qualname":"::error::BufferResult::consumed_out","value":"usize","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The number of bytes written into the output buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes written into the output buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62555,"byte_end":62610,"line_start":6,"line_end":6,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62704,"byte_end":62710,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"status","qualname":"::error::BufferResult::status","value":"std::result::Result<error::LzwStatus, error::LzwError>","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The status after returning from the write call.\n","sig":null,"attributes":[{"value":"/ The status after returning from the write call.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62644,"byte_end":62695,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":300},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62894,"byte_end":62906,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::error::StreamResult","value":"StreamResult { bytes_read, bytes_written, status }","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"decl_id":null,"docs":" The result of coding into an output stream.\n","sig":null,"attributes":[{"value":"/ The result of coding into an output stream.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62744,"byte_end":62791,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62792,"byte_end":62815,"line_start":13,"line_end":13,"column_start":1,"column_end":24}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62816,"byte_end":62882,"line_start":14,"line_end":14,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":301},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62977,"byte_end":62987,"line_start":17,"line_end":17,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::error::StreamResult::bytes_read","value":"usize","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":" The total number of bytes consumed from the reader.\n","sig":null,"attributes":[{"value":"/ The total number of bytes consumed from the reader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":62913,"byte_end":62968,"line_start":16,"line_end":16,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63063,"byte_end":63076,"line_start":19,"line_end":19,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::error::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":" The total number of bytes written into the writer.\n","sig":null,"attributes":[{"value":"/ The total number of bytes written into the writer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63000,"byte_end":63054,"line_start":18,"line_end":18,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":303},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63243,"byte_end":63249,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"status","qualname":"::error::StreamResult::status","value":"std::result::Result<(), std::io::Error>","parent":{"krate":0,"index":300},"children":[],"decl_id":null,"docs":" The possible error that occurred.","sig":null,"attributes":[{"value":"/ The possible error that occurred.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63089,"byte_end":63126,"line_start":20,"line_end":20,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63131,"byte_end":63134,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Note that when writing into streams it is not in general possible to recover from an error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63139,"byte_end":63234,"line_start":22,"line_end":22,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":374},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63417,"byte_end":63419,"line_start":30,"line_end":30,"column_start":5,"column_end":7},"name":"Ok","qualname":"::error::LzwStatus::Ok","value":"LzwStatus::Ok","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" Everything went well.\n","sig":null,"attributes":[{"value":"/ Everything went well.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63387,"byte_end":63412,"line_start":29,"line_end":29,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63782,"byte_end":63792,"line_start":36,"line_end":36,"column_start":5,"column_end":15},"name":"NoProgress","qualname":"::error::LzwStatus::NoProgress","value":"LzwStatus::NoProgress","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" No bytes were read or written and no internal state advanced.","sig":null,"attributes":[{"value":"/ No bytes were read or written and no internal state advanced.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63425,"byte_end":63490,"line_start":31,"line_end":31,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63495,"byte_end":63498,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If this is returned but your application can not provide more input data then decoding is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63503,"byte_end":63596,"line_start":33,"line_end":33,"column_start":5,"column_end":98}},{"value":"/ definitely stuck for good and it should stop trying and report some error of its own. In","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63601,"byte_end":63693,"line_start":34,"line_end":34,"column_start":5,"column_end":97}},{"value":"/ other situations this may be used as a signal to refill an internal buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63698,"byte_end":63777,"line_start":35,"line_end":35,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":378},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63871,"byte_end":63875,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Done","qualname":"::error::LzwStatus::Done","value":"LzwStatus::Done","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" No more data will be produced because an end marker was reached.\n","sig":null,"attributes":[{"value":"/ No more data will be produced because an end marker was reached.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63798,"byte_end":63866,"line_start":37,"line_end":37,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":373},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63371,"byte_end":63380,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"LzwStatus","qualname":"::error::LzwStatus","value":"LzwStatus::{Ok, NoProgress, Done}","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378}],"decl_id":null,"docs":" The status after successful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The status after successful coding of an LZW stream.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63275,"byte_end":63331,"line_start":26,"line_end":26,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64334,"byte_end":64345,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"name":"InvalidCode","qualname":"::error::LzwError::InvalidCode","value":"LzwError::InvalidCode","parent":{"krate":0,"index":385},"children":[],"decl_id":null,"docs":" The input contained an invalid code.","sig":null,"attributes":[{"value":"/ The input contained an invalid code.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63997,"byte_end":64037,"line_start":44,"line_end":44,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64042,"byte_end":64045,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ For decompression this refers to a code larger than those currently known through the prior","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64050,"byte_end":64145,"line_start":46,"line_end":46,"column_start":5,"column_end":100}},{"value":"/ decoding stages. For compression this refers to a byte that has no code representation due","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64150,"byte_end":64244,"line_start":47,"line_end":47,"column_start":5,"column_end":99}},{"value":"/ to being larger than permitted by the `size` parameter given to the Encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64249,"byte_end":64329,"line_start":48,"line_end":48,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63982,"byte_end":63990,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"LzwError","qualname":"::error::LzwError","value":"LzwError::{InvalidCode}","parent":null,"children":[{"krate":0,"index":386}],"decl_id":null,"docs":" The error kind after unsuccessful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The error kind after unsuccessful coding of an LZW stream.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":63880,"byte_end":63942,"line_start":41,"line_end":41,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6253,"byte_end":6260,"line_start":131,"line_end":131,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10098,"byte_end":10108,"line_start":225,"line_end":225,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":12599,"byte_end":12610,"line_start":306,"line_end":306,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":13098,"byte_end":13109,"line_start":325,"line_end":325,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":16649,"byte_end":16660,"line_start":431,"line_end":431,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":17114,"byte_end":17123,"line_start":453,"line_end":453,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":18604,"byte_end":18613,"line_start":513,"line_end":513,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":20026,"byte_end":20030,"line_start":572,"line_end":572,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24211,"byte_end":24218,"line_start":678,"line_end":678,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24303,"byte_end":24309,"line_start":684,"line_end":684,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24488,"byte_end":24495,"line_start":694,"line_end":694,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24772,"byte_end":24785,"line_start":704,"line_end":704,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":29982,"byte_end":29989,"line_start":117,"line_end":117,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34050,"byte_end":34060,"line_start":217,"line_end":217,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":37426,"byte_end":37437,"line_start":308,"line_end":308,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":38268,"byte_end":38279,"line_start":337,"line_end":337,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":54781,"byte_end":54792,"line_start":696,"line_end":696,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":55204,"byte_end":55213,"line_start":714,"line_end":714,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":57125,"byte_end":57134,"line_start":784,"line_end":784,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":58976,"byte_end":58982,"line_start":853,"line_end":853,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":60676,"byte_end":60681,"line_start":908,"line_end":908,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":61986,"byte_end":61990,"line_start":958,"line_end":958,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64378,"byte_end":64386,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64631,"byte_end":64639,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2338,"byte_end":2344,"line_start":61,"line_end":61,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":12}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/lib.rs","byte_start":2380,"byte_end":2386,"line_start":63,"line_end":63,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":151}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":6253,"byte_end":6260,"line_start":131,"line_end":131,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":30},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":10098,"byte_end":10108,"line_start":225,"line_end":225,"column_start":16,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":12599,"byte_end":12610,"line_start":306,"line_end":306,"column_start":17,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":13098,"byte_end":13109,"line_start":325,"line_end":325,"column_start":30,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":42},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":16649,"byte_end":16660,"line_start":431,"line_end":431,"column_start":17,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":17114,"byte_end":17123,"line_start":453,"line_end":453,"column_start":17,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":51},"to":{"krate":0,"index":59}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":18604,"byte_end":18613,"line_start":513,"line_end":513,"column_start":17,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":55},"to":{"krate":0,"index":59}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":20026,"byte_end":20030,"line_start":572,"line_end":572,"column_start":6,"column_end":10},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24211,"byte_end":24218,"line_start":678,"line_end":678,"column_start":18,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":318},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24303,"byte_end":24309,"line_start":684,"line_end":684,"column_start":18,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":336},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24488,"byte_end":24495,"line_start":694,"line_end":694,"column_start":30,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":318},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/encode.rs","byte_start":24772,"byte_end":24785,"line_start":704,"line_end":704,"column_start":24,"column_end":37},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":29982,"byte_end":29989,"line_start":117,"line_end":117,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":34050,"byte_end":34060,"line_start":217,"line_end":217,"column_start":16,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":172},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":37426,"byte_end":37437,"line_start":308,"line_end":308,"column_start":21,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":38268,"byte_end":38279,"line_start":337,"line_end":337,"column_start":34,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":54781,"byte_end":54792,"line_start":696,"line_end":696,"column_start":21,"column_end":32},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":55204,"byte_end":55213,"line_start":714,"line_end":714,"column_start":21,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":359},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":57125,"byte_end":57134,"line_start":784,"line_end":784,"column_start":21,"column_end":30},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":366},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":58976,"byte_end":58982,"line_start":853,"line_end":853,"column_start":6,"column_end":12},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":60676,"byte_end":60681,"line_start":908,"line_end":908,"column_start":6,"column_end":11},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/decode.rs","byte_start":61986,"byte_end":61990,"line_start":958,"line_end":958,"column_start":6,"column_end":10},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64378,"byte_end":64386,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":385},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/weezl-0.1.0/src/error.rs","byte_start":64631,"byte_end":64639,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":385},"to":{"krate":1,"index":1624}}]}